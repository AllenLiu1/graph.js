{"version":3,"file":"js-graph.js","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 8b5df0e15b1e32f6e51c","webpack:///./src/js-graph.es6.js"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","id","loaded","modules","call","m","c","p","JsGraph","_vertices","Map","_edges","_reverseEdges","_vertexCount","_edgeCount","addNewVertex","key","value","hasVertex","VertexExistsError","get","set","Set","setVertex","VertexNotExistsError","ensureVertex","addVertex","removeExistingVertex","size","HasConnectedEdgesError","destroyExistingVertex","_iterator","verticesFrom","Symbol","iterator","_step","_iteratorNormalCompletion","next","done","to","_step$value","removeEdge","_iterator2","verticesTo","_step2","_iteratorNormalCompletion2","from","_step2$value","removeVertex","destroyVertex","vertexCount","has","vertexValue","addNewEdge","hasEdge","EdgeExistsError","edgeValue","v","add","createNewEdge","setEdge","EdgeNotExistsError","spanEdge","addEdge","ensureEdge","createEdge","removeExistingEdge","edgeCount","undefined","vertices","_didIteratorError","_iteratorError","_this","edges","_didIteratorError2","_iteratorError2","keys","_verticesFrom","_verticesTo","verticesWithPathFrom","_verticesWithPathFrom","verticesWithPathTo","_verticesWithPathTo","vertices_topologically","visit","regeneratorRuntime","mark","a","i","cycle","b","visited","push","indexOf","length","slice","reverse","CycleError","handled","pop","_this2","clearEdges","clear","equals","other","arguments","eq","x","y","hasCycle","hasPath","hasPathAux","current","clone","tr","result","val","transitiveReduction","_iterator3","_step3","_iteratorNormalCompletion3","z","_step3$value","_Error","_refreshMessage","aVertices","message","concat","_toConsumableArray","map","join","Error","_Error2","VertexNotExistError","_Error3","e","anEdges","_Error4","_Error5","_Error6"],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JsGraph\"] = factory();\n\telse\n\t\troot[\"JsGraph\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 8b5df0e15b1e32f6e51c\n **/","'use strict';\n\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n//  // JsGraph class ///////////////////////////////////////////////////////////////////////////////\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @public\n * @class JsGraph\n * @classdesc The main class of this library, to be used for representing a mathematical (di)graph.\n */\nexport default class JsGraph {\n\n\tconstructor() {\n\t\tthis._vertices     = new Map(); // Map.< string, * >\n\t\tthis._edges        = new Map(); // Map.< string, Map.<string, *> >\n\t\tthis._reverseEdges = new Map(); // Map.< string, Set.<*> >\n\t\tthis._vertexCount  = 0;\n\t\tthis._edgeCount    = 0;\n\t}\n\n\n\t//////////////////////////////\n\t////////// Vertices //////////\n\t//////////////////////////////\n\n\t////////// creating them //////////\n\n\t/**\n\t * Add a new vertex to this graph.\n\t * @throws {JsGraph.VertexExistsError} if a vertex with this key already exists\n\t * @param key   {string} the key with which to refer to this new vertex\n\t * @param value {*}      the value to store in this new vertex\n\t */\n\taddNewVertex(key, value) {\n\t\tif (this.hasVertex(key)) {\n\t\t\tthrow new JsGraph.VertexExistsError(key, this._vertices.get(key));\n\t\t}\n\t\tthis._vertices.set(key, value);\n\t\tthis._edges.set(key, new Map());\n\t\tthis._reverseEdges.set(key, new Set());\n\t\tthis._vertexCount += 1;\n\t}\n\n\t/**\n\t * Set the value of an existing vertex in this graph.\n\t * @throws {JsGraph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param key   {string} the key belonging to the vertex\n\t * @param value {*}      the value to store in this vertex\n\t */\n\tsetVertex(key, value) {\n\t\tif (!this.hasVertex(key)) {\n\t\t\tthrow new JsGraph.VertexNotExistsError(key);\n\t\t}\n\t\tthis._vertices.set(key, value);\n\t}\n\n\t/**\n\t * Make sure a vertex with a specific key exists in this graph. If it already exists, nothing is done.\n\t * If it does not yet exist, a new vertex is added with the given value.\n\t * @param key   {string} the key for the vertex\n\t * @param value {*}      the value to store if a new vertex is added\n\t */\n\tensureVertex(key, value) {\n\t\tif (!this.hasVertex(key)) {\n\t\t\tthis.addNewVertex(key, value);\n\t\t}\n\t}\n\n\t/**\n\t * Add a new vertex to this graph. If a vertex with this key already exists,\n\t * the value of that vertex is overwritten.\n\t * @param key   {string} the key with which to refer to this new vertex\n\t * @param value {*}      the value to store in this new vertex\n\t */\n\taddVertex(key, value) {\n\t\tif (this.hasVertex(key)) {\n\t\t\tthis.setVertex(key, value);\n\t\t} else {\n\t\t\tthis.addNewVertex(key, value);\n\t\t}\n\t}\n\n\n\t////////// removing them //////////\n\n\t/**\n\t * Remove an existing vertex from this graph.\n\t * @throws {JsGraph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @throws {JsGraph.HasConnectedEdgesError} if there are still edges connected to this vertex\n\t * @param key {string} the key of the vertex to remove\n\t */\n\tremoveExistingVertex(key) {\n\t\tif (!this.hasVertex(key)) {\n\t\t\tthrow new JsGraph.VertexNotExistsError(key);\n\t\t}\n\t\tif (this._edges.get(key).size > 0 || this._reverseEdges.get(key).size > 0) {\n\t\t\tthrow new JsGraph.HasConnectedEdgesError(key);\n\t\t}\n\t\tthis._vertices.delete(key);\n\t\tthis._vertexCount -= 1;\n\t}\n\n\t/**\n\t * Remove an existing vertex from this graph, as well as all edges connected to it.\n\t * @throws {JsGraph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param key {string} the key of the vertex to remove\n\t */\n\tdestroyExistingVertex(key) {\n\t\tif (!this.hasVertex(key)) {\n\t\t\tthrow new JsGraph.VertexNotExistsError(key);\n\t\t}\n\t\tfor (let [to] of this.verticesFrom(key)) {\n\t\t\tthis.removeEdge(key, to);\n\t\t}\n\t\tfor (let [from] of this.verticesTo(key)) {\n\t\t\tthis.removeEdge(from, key);\n\t\t}\n\t\tthis.removeExistingVertex(key);\n\t}\n\n\t/**\n\t * Remove an existing vertex from this graph.\n\t * If a vertex with this key does not exist, nothing happens.\n\t * @throws {JsGraph.HasConnectedEdgesError} if there are still edges connected to this vertex\n\t * @param key {string} the key of the vertex to remove\n\t */\n\tremoveVertex(key) {\n\t\tif (this.hasVertex(key)) {\n\t\t\tthis.removeExistingVertex(key);\n\t\t}\n\t}\n\n\t/**\n\t * Remove a vertex from this graph, as well as all edges connected to it.\n\t * If a vertex with this key does not exist, nothing happens.\n\t * @param key {string} the key of the vertex to remove\n\t */\n\tdestroyVertex(key) {\n\t\tif (this.hasVertex(key)) {\n\t\t\tthis.destroyExistingVertex(key);\n\t\t}\n\t}\n\n\n\t////////// querying them //////////\n\n\t/**\n\t * @returns {number} the number of vertices in the whole graph\n\t */\n\tvertexCount() { return this._vertexCount }\n\n\t/**\n\t * Ask whether a vertex with a given key exists.\n\t * @param key {string} the key to query\n\t * @returns {boolean} whether there is a vertex with the given key\n\t */\n\thasVertex(key) { return this._vertices.has(key) }\n\n\t/**\n\t * Get the value associated with the vertex of a given key.\n\t * @param key {string} the key to query\n\t * @returns {*} the value associated with the vertex of the given key.\n\t * Note that a return value of `undefined` can mean\n\t *\n\t * 1. that there is no such vertex, or\n\t * 2. that the stored value is actually `undefined`.\n\t *\n\t * Use {@link JsGraph#hasVertex} to distinguish these cases.\n\t */\n\tvertexValue(key) { return this._vertices.get(key) }\n\n\n\t///////////////////////////\n\t////////// Edges //////////\n\t///////////////////////////\n\n\t////////// adding them //////////\n\n\t/**\n\t * Add a new edge to this graph.\n\t * @throws {JsGraph.EdgeExistsError} if an edge between `from` and `to` already exists\n\t * @throws {JsGraph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @param from  {string} the key for the originating vertex\n\t * @param to    {string} the key for the terminating vertex\n\t * @param value {*}      the value to store in this new edge\n\t */\n\taddNewEdge(from, to, value) {\n\t\tif (this.hasEdge(from, to)) {\n\t\t\tthrow new JsGraph.EdgeExistsError(from, to, this.edgeValue(from, to));\n\t\t}\n\t\tif (!this.hasVertex(from)) {\n\t\t\tif (this.hasVertex(to)) {\n\t\t\t\tthrow new JsGraph.VertexNotExistsError(from);\n\t\t\t} else {\n\t\t\t\tthrow new JsGraph.VertexNotExistsError(from).v(to);\n\t\t\t}\n\t\t} else if (!this.hasVertex(to)) {\n\t\t\tthrow new JsGraph.VertexNotExistsError(to);\n\t\t}\n\t\tthis._edges.get(from).set(to, value);\n\t\tthis._reverseEdges.get(to).add(from);\n\t\tthis._edgeCount += 1;\n\t}\n\n\t/**\n\t * Add a new edge to this graph. If the `from` and/or `to` vertices do not yet exist\n\t * in the graph, they are implicitly added with an `undefined` value.\n\t * @throws {JsGraph.EdgeExistsError} if an edge between `from` and `to` already exists\n\t * @param from  {string} the key for the originating vertex\n\t * @param to    {string} the key for the terminating vertex\n\t * @param value {*}      the value to store in this new edge\n\t */\n\tcreateNewEdge(from, to, value) {\n\t\tif (this.hasEdge(from, to)) {\n\t\t\tthrow new JsGraph.EdgeExistsError(from, to, this.edgeValue(from, to));\n\t\t}\n\t\tthis.ensureVertex(from);\n\t\tthis.ensureVertex(to);\n\t\tthis.addNewEdge(from, to, value);\n\t}\n\n\t/**\n\t * Set the value of an existing edge in this graph.\n\t * @throws {JsGraph.EdgeNotExistsError} if an edge between `from` and `to` does not yet exist\n\t * @param from  {string} the key for the originating vertex\n\t * @param to    {string} the key for the terminating vertex\n\t * @param value {*}      the value to store in this edge\n\t */\n\tsetEdge(from, to, value) {\n\t\tif (!this.hasEdge(from, to)) {\n\t\t\tthrow new JsGraph.EdgeNotExistsError(from, to);\n\t\t}\n\t\tthis._edges.get(from).set(to, value);\n\t}\n\n\t/**\n\t * Make sure an edge between the `from` and `to` vertices in this graph.\n\t * If one already exists, nothing is done.\n\t * If one does not yet exist, a new edge is added with the given value.\n\t * @throws {JsGraph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @param from  {string} the key for the originating vertex\n\t * @param to    {string} the key for the terminating vertex\n\t * @param value {*}      the value to store if a new edge is added\n\t */\n\tspanEdge(from, to, value) {\n\t\tif (!this.hasVertex(from)) {\n\t\t\tif (this.hasVertex(to)) {\n\t\t\t\tthrow new JsGraph.VertexNotExistsError(from);\n\t\t\t} else {\n\t\t\t\tthrow new JsGraph.VertexNotExistsError(from).v(to);\n\t\t\t}\n\t\t} else if (!this.hasVertex(to)) {\n\t\t\tthrow new JsGraph.VertexNotExistsError(to);\n\t\t}\n\t\tif (!this.hasEdge(from, to)) {\n\t\t\tthis.addNewEdge(from, to, value);\n\t\t}\n\t}\n\n\t/**\n\t * Add a new edge to this graph. If an edge between `from` and `to` already exists,\n\t * the value of that edge is overwritten.\n\t * @throws {JsGraph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @param from  {string} the key for the originating vertex\n\t * @param to    {string} the key for the terminating vertex\n\t * @param value {*}      the value to store in this new edge\n\t */\n\taddEdge(from, to, value) {\n\t\tif (this.hasEdge(from, to)) {\n\t\t\tthis.setEdge(from, to, value);\n\t\t} else {\n\t\t\tthis.addNewEdge(from, to, value);\n\t\t}\n\t}\n\n\t/**\n\t * Make sure an edge between the `from` and `to` vertices exists in this graph.\n\t * If it already exists, nothing is done.\n\t * If it does not yet exist, a new edge is added with the given value.\n\t * If the `from` and/or `to` vertices do not yet exist\n\t * in the graph, they are implicitly added with an `undefined` value.\n\t * @param from  {string} the key for the originating vertex\n\t * @param to    {string} the key for the terminating vertex\n\t * @param value {*}      the value to store if a new edge is added\n\t */\n\tensureEdge(from, to, value) {\n\t\tif (!this.hasEdge(from, to)) {\n\t\t\tthis.createNewEdge(from, to, value);\n\t\t}\n\t}\n\n\t/**\n\t * Add a new edge to this graph. If an edge between the `from` and `to`\n\t * vertices already exists, the value of that edge is overwritten.\n\t * If the `from` and/or `to` vertices do not yet exist\n\t * in the graph, they are implicitly added with an `undefined` value.\n\t * @param from  {string} the key for the originating vertex\n\t * @param to    {string} the key for the terminating vertex\n\t * @param value {*}      the value to store if a new edge is added\n\t */\n\tcreateEdge(from, to, value) {\n\t\tif (this.hasEdge(from, to)) {\n\t\t\tthis.setEdge(from, to, value);\n\t\t} else {\n\t\t\tthis.createNewEdge(from, to, value);\n\t\t}\n\t}\n\n\n\t////////// removing them //////////\n\n\t/**\n\t * Remove an existing edge from this graph.\n\t * @throws {JsGraph.EdgeNotExistsError} if an edge between the `from` and `to` vertices doesn't exist\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t */\n\tremoveExistingEdge(from, to) {\n\t\tif (!this.hasEdge(from, to)) {\n\t\t\tthrow new JsGraph.EdgeNotExistsError(from, to);\n\t\t}\n\t\tthis._edges.get(from).delete(to);\n\t\tthis._reverseEdges.get(to).delete(from);\n\t\tthis._edgeCount -= 1;\n\t}\n\n\t/**\n\t * Remove an edge from this graph.\n\t * If an edge between the `from` and `to` vertices doesn't exist, nothing happens.\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t */\n\tremoveEdge(from, to) {\n\t\tif (this.hasEdge(from, to)) {\n\t\t\tthis.removeExistingEdge(from, to);\n\t\t}\n\t}\n\n\n\t////////// querying them //////////\n\n\t/**\n\t * @returns {number} the number of edges in the whole graph\n\t */\n\tedgeCount() { return this._edgeCount }\n\n\t/**\n\t * Ask whether an edge between given `from` and `to` vertices exist.\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t * @returns {boolean} whether there is an edge between the given `from` and `to` vertices\n\t */\n\thasEdge(from, to) {\n\t\treturn this.hasVertex(from) &&\n\t\t\tthis.hasVertex(to) &&\n\t\t\tthis._edges.has(from) &&\n\t\t\tthis._edges.get(from).has(to);\n\t}\n\n\t/**\n\t * Get the value associated with the edge between given `from` and `to` vertices.\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t * @returns {*} the value associated with the edge between the given `from` and `to` vertices\n\t * Note that a return value of `undefined` can mean\n\t *\n\t * 1. that there is no such edge, or\n\t * 2. that the stored value is actually `undefined`.\n\t *\n\t * Use {@link JsGraph#hasEdge} to distinguish these cases.\n\t */\n\tedgeValue(from, to) {\n\t\treturn this.hasEdge(from, to) ? this._edges.get(from).get(to) : undefined;\n\t}\n\n\n\t///////////////////////////////////////////////\n\t//////////// ES6 Iterable interfaces //////////\n\t///////////////////////////////////////////////\n\n\t/**\n\t * Iterate over all vertices of the graph, in no particular order.\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = jsGraph.vertices(), keyVal = it.next(); !it.done;) {\n\t *     var key   = keyVal[0],\n\t *         value = keyVal[1];\n\t *     // iterates over all vertices of the graph\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of jsGraph.vertices()) {\n\t *     // iterates over all vertices of the graph\n\t * }\n\t * @see {@link JsGraph#@@iterator}\n\t */\n\t*vertices() {\n\t\tvar done = new Set();\n\t\tfor (let [key, value] of this._vertices) {\n\t\t\tif (this.hasVertex(key) && !done.has(key)) {\n\t\t\t\tdone.add(key);\n\t\t\t\tyield [key, value];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * A {@link JsGraph} object is itself {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol|iterable},\n\t * and serves as a short notation in ECMAScript 6 to iterate over all vertices in the graph, in no particular order.\n\t * @method JsGraph#@@iterator\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (let [key, value] of jsGraph) {\n\t *     // iterates over all vertices of the graph\n\t * }\n\t * @see {@link JsGraph#vertices}\n\t */\n\t[Symbol.iterator]() { return this.vertices() }\n\n\t/**\n\t * Iterate over all edges of the graph, in no particular order.\n\t * @returns { Iterator.<string, string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = jsGraph.edges(), fromToVal = it.next(); !it.done;) {\n\t *     var from  = fromToVal[0],\n\t *         to    = fromToVal[1],\n\t *         value = fromToVal[2];\n\t *     // iterates over all edges of the graph\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [from, to, value] of jsGraph.edges()) {\n\t *     // iterates over all vertices of the graph\n\t * }\n\t */\n\t*edges() {\n\t\tvar done = new Map();\n\t\tfor (let from of this._edges.keys()) {\n\t\t\tif (!done.has(from)) { done.set(from, new Set()) }\n\t\t\tfor (let to of this._edges.get(from).keys()) {\n\t\t\t\tif (this.hasEdge(from, to) && !done.get(from).has(to)) {\n\t\t\t\t\tdone.get(from).add(to);\n\t\t\t\t\tyield [from, to, this._edges.get(from).get(to)];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over the outgoing edges of a given vertex in the graph, in no particular order.\n\t * @throws {JsGraph.VertexNotExistsError} if a vertex with the given `from` key does not exist\n\t * @param from {string} the key of the vertex to take the outgoing edges from\n\t * @returns { Iterator.<string, *, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = jsGraph.verticesFrom(from), toVertexEdge = it.next(); !it.done;) {\n\t *     var to          = toVertexEdge[0],\n\t *         vertexValue = toVertexEdge[1],\n\t *         edgeValue   = toVertexEdge[2];\n\t *     // iterates over all outgoing vertices of the `from` vertex\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [to, vertexValue, edgeValue] of jsGraph.verticesFrom(from)) {\n\t *     // iterates over all outgoing edges of the `from` vertex\n\t * }\n\t */\n\tverticesFrom(from) {\n\t\tif (!this.hasVertex(from)) { throw new JsGraph.VertexNotExistsError(from) }\n\t\treturn this._verticesFrom(from);\n\t}\n\t*_verticesFrom(from) {\n\t\tvar done = new Set();\n\t\tfor (let to of this._edges.get(from).keys()) {\n\t\t\tif (this.hasEdge(from, to) && !done.has(to)) {\n\t\t\t\tdone.add(to);\n\t\t\t\tyield [to, this._vertices.get(to), this._edges.get(from).get(to)];\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Iterate over the incoming edges of a given vertex in the graph, in no particular order.\n\t * @throws {JsGraph.VertexNotExistsError} if a vertex with the given `to` key does not exist\n\t * @param to {string} the key of the vertex to take the incoming edges from\n\t * @returns { Iterator.<string, *, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = jsGraph.verticesTo(to), fromVertexEdge = it.next(); !it.done;) {\n\t *     var from        = fromVertexEdge[0],\n\t *         vertexValue = fromVertexEdge[1],\n\t *         edgeValue   = fromVertexEdge[2];\n\t *     // iterates over all outgoing vertices of the `from` vertex\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [from, vertexValue, edgeValue] of jsGraph.verticesTo(to)) {\n\t *     // iterates over all incoming edges of the `to` vertex\n\t * }\n\t */\n\tverticesTo(to) {\n\t\tif (!this.hasVertex(to)) { throw new JsGraph.VertexNotExistsError(to) }\n\t\treturn this._verticesTo(to);\n\t}\n\t*_verticesTo(to) {\n\t\tvar done = new Set();\n\t\tfor (let from of this._reverseEdges.get(to)) {\n\t\t\tif (this.hasEdge(from, to) && !done.has(from)) {\n\t\t\t\tdone.add(from);\n\t\t\t\tyield [from, this._vertices.get(from), this._edges.get(from).get(to)];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over all vertices reachable from a given vertex in the graph, in no particular order.\n\t * @throws {JsGraph.VertexNotExistsError} if a vertex with the given `from` key does not exist\n\t * @param from {string} the key of the vertex to take the reachable vertices from\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = jsGraph.verticesWithPathFrom(from), keyValue = it.next(); !it.done;) {\n\t *     var key   = keyValue[0],\n\t *         value = keyValue[1];\n\t *     // iterates over all vertices reachable from `from`\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of jsGraph.verticesWithPathFrom(from)) {\n\t *     // iterates over all vertices reachable from `from`\n\t * }\n\t */\n\tverticesWithPathFrom(from) {\n\t\tif (!this.hasVertex(from)) { throw new JsGraph.VertexNotExistsError(from) }\n\t\treturn this._verticesWithPathFrom(from, new Set());\n\t}\n\t*_verticesWithPathFrom(from, done) {\n\t\tfor (let to of this._edges.get(from).keys()) {\n\t\t\tif (this.hasEdge(from, to) && !done.has(to)) {\n\t\t\t\tdone.add(to);\n\t\t\t\tyield [to, this._vertices.get(to)];\n\t\t\t\tyield* this._verticesWithPathFrom(to, done);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over all vertices from which a given vertex in the graph can be reached, in no particular order.\n\t * @throws {JsGraph.VertexNotExistsError} if a vertex with the given `to` key does not exist\n\t * @param to {string} the key of the vertex to take the reachable vertices from\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = jsGraph.verticesWithPathTo(to), keyValue = it.next(); !it.done;) {\n\t *     var key   = keyValue[0],\n\t *         value = keyValue[1];\n\t *     // iterates over all vertices from which `to` can be reached\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of jsGraph.verticesWithPathTo(to)) {\n\t *     // iterates over all vertices from which `to` can be reached\n\t * }\n\t */\n\tverticesWithPathTo(to) {\n\t\tif (!this.hasVertex(to)) { throw new JsGraph.VertexNotExistsError(to) }\n\t\treturn this._verticesWithPathTo(to, new Set());\n\t}\n\t*_verticesWithPathTo(to, done) {\n\t\tfor (let from of this._reverseEdges.get(to)) {\n\t\t\tif (this.hasEdge(from, to) && !done.has(from)) {\n\t\t\t\tdone.add(from);\n\t\t\t\tyield [from, this._vertices.get(from)];\n\t\t\t\tyield* this._verticesWithPathTo(from, done);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over all vertices of the graph in topological order.\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = jsGraph.vertices_topologically(), keyVal = it.next(); !it.done;) {\n\t *     var key   = keyVal[0],\n\t *         value = keyVal[1];\n\t *     // iterates over all vertices of the graph in topological order\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of jsGraph.vertices_topologically()) {\n\t *     // iterates over all vertices of the graph in topological order\n\t * }\n\t */\n\t*vertices_topologically() {\n\t\tvar visited = []; // stack\n\t\tvar handled = new Set();\n\n\t\tvar _this = this;\n\t\tfunction *visit(a) {\n\t\t\tvisited.push(a);\n\t\t\tvar i = visited.indexOf(a);\n\t\t\tif (i !== visited.length - 1) {\n\t\t\t\tvar cycle = visited.slice(i + 1).reverse();\n\t\t\t\tthrow new JsGraph.CycleError(cycle);\n\t\t\t}\n\t\t\tif (!handled.has(a)) {\n\t\t\t\tfor (let [b] of _this.verticesTo(a)) {\n\t\t\t\t\tyield* visit(b);\n\t\t\t\t}\n\t\t\t\tif (_this.hasVertex(a)) {\n\t\t\t\t\tyield [a, _this._vertices.get(a)];\n\t\t\t\t}\n\t\t\t\thandled.add(a);\n\t\t\t}\n\t\t\tvisited.pop();\n\t\t}\n\t\tfor (let [a] of this.vertices()) {\n\t\t\tif (!handled.has(a)) {\n\t\t\t\tyield* visit(a);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t//////////////////////////////\n\t////////// Clearing //////////\n\t//////////////////////////////\n\n\t/**\n\t * Remove all edges from the graph, but leave the vertices intact.\n\t */\n\tclearEdges() {\n\t\tfor (let [from, to] of this.edges()) { this.removeEdge(from, to) }\n\t}\n\n\t/**\n\t * Remove all edges and vertices from the graph, putting it back in its initial state.\n\t */\n\tclear() {\n\t\tfor (let [v] of this.vertices()) { this.destroyVertex(v) }\n\t}\n\n\n\t////////////////////////////////////////\n\t////////// (Advanced) Queries //////////\n\t////////////////////////////////////////\n\n\t/**\n\t * Ask whether this graph and another graph are equal.\n\t * Two graphs are equal if they have the same vertices and the same edges.\n\t * @param other {JsGraph} the other graph to compare this one to\n\t * @param [eq] {function(*, *, string, ?string): boolean}\n\t *     a custom equality function for stored values; defaults to `===`\n\t *     comparison; The first two arguments are the two values to compare.\n\t *     If they are vertex values, the third argument is the vertex key.\n\t *     If they are edge values, the third and fourth argument are the\n\t *     `from` and `to` keys respectively. (So you can test the fourth\n\t *     argument to distinguish the two cases.)\n\t * @returns {boolean} `true` if the two graphs are equal; `false` otherwise\n\t */\n\tequals(other=undefined, eq=(x,y,from,to)=>x===y) {\n\t\tif (!(other instanceof JsGraph))                { return false }\n\t\tif (this.vertexCount() !== other.vertexCount()) { return false }\n\t\tif (this.edgeCount()   !== other.edgeCount()  ) { return false }\n\t\tfor (let [key, value] of this.vertices()) {\n\t\t\tif (!other.hasVertex(key))                   { return false }\n\t\t\tif (!eq(value, other.vertexValue(key), key)) { return false }\n\t\t}\n\t\tfor (let [from, to, value] of this.edges()) {\n\t\t\tif (!other.hasEdge(from, to))                        { return false }\n\t\t\tif (!eq(value, other.edgeValue(from, to), from, to)) { return false }\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Test whether the graph contains a directed cycle.\n\t * @returns {boolean} `false`, if there is no cycle; a truthy value if there *is* a cycle\n\t *                    (not necessarily `true`; future versions of the library might return\n\t *                     a description of the cycle)\n\t */\n\thasCycle() {\n\t\tlet visited = new Set();\n\t\tlet handled = new Set();\n\n\t\tconst visit = (a) => {\n\t\t\t/* if a cycle is found, record it and return */\n\t\t\tif (visited.has(a)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t/* if this vertex was already handled, no cycle can be found here */\n\t\t\tif (handled.has(a)) { return false }\n\t\t\thandled.add(a);\n\n\t\t\t/* recursively visit successors to check for cycles */\n\t\t\tvisited.add(a);\n\t\t\tfor (let [b] of this.verticesFrom(a)) {\n\t\t\t\tif (visit(b)) { return true }\n\t\t\t}\n\t\t\tvisited.delete(a);\n\t\t};\n\n\t\tfor (let [a] of this.vertices()) {\n\t\t\tif (visit(a)) { return true }\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Test whether there is a directed path between a given pair of keys.\n\t * @param from {string} the originating vertex\n\t * @param to   {string} the terminating vertex\n\t * @returns {boolean} `false`, if there is no such path; a truthy value if there *is* such a path\n\t *                    (not necessarily `true`; future versions of the library might return\n\t *                     a description of the path)\n\t */\n\thasPath(from, to) {\n\t\tif (!this.hasVertex(from) || !this.hasVertex(to)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar visited = new Set();\n\n\t\t/* Recursive auxiliary function: Is there a path from 'current' to 'to'? */\n\t\tconst hasPathAux = (current) => {\n\t\t\tif (this.hasEdge(current, to)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tvisited.add(current);\n\t\t\tfor (let [next] of this.verticesFrom(current)) {\n\t\t\t\tif (!visited.has(next) && hasPathAux(next)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvisited.delete(current);\n\t\t\treturn false;\n\t\t};\n\n\t\treturn hasPathAux(from);\n\t}\n\n\n\t/////////////////////////////\n\t////////// Cloning //////////\n\t/////////////////////////////\n\n\t/**\n\t * Create a clone of this graph.\n\t * @param [tr] {function(*, string, ?string): *}\n\t *     a custom transformation function for stored values; defaults to\n\t *     the identity function; The first argument is the value to clone.\n\t *     If it is a vertex value, the third argument is the vertex key.\n\t *     If it is an edge value, the third and fourth argument are the\n\t *     `from` and `to` keys respectively. (So you can test the fourth\n\t *     argument to distinguish the two cases.)\n\t * @returns {JsGraph} a clone of this graph\n\t */\n\tclone(tr=v=>v) {\n\t\tvar result = new JsGraph();\n\t\tfor (let [key, val] of this.vertices()) {\n\t\t\tresult.addVertex(key, tr(val, key));\n\t\t}\n\t\tfor (let [from, to, val] of this.edges()) {\n\t\t\tresult.addEdge(from, to, tr(val, from, to));\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Create a clone of this graph, but without any transitive edges.\n\t * @param [tr] {function(*, string, ?string): *}\n\t *     a custom transformation function for stored values; defaults to\n\t *     the identity function; The first argument is the value to clone.\n\t *     If it is a vertex value, the third argument is the vertex key.\n\t *     If it is an edge value, the third and fourth argument are the\n\t *     `from` and `to` keys respectively. (So you can test the fourth\n\t *     argument to distinguish the two cases.)\n\t * @returns {JsGraph} a clone of this graph\n\t */\n\ttransitiveReduction(tr=v=>v) {\n\t\tvar result = this.clone(tr);\n\t\tfor (let [x] of this.vertices()) {\n\t\t\tfor (let [y] of this.vertices()) {\n\t\t\t\tif (result.hasEdge(x, y)) {\n\t\t\t\t\tfor (let [z] of this.vertices()) {\n\t\t\t\t\t\tif (result.hasPath(y, z)) {\n\t\t\t\t\t\t\tresult.removeEdge(x, z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n}\n\n\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n//  // Errors //////////////////////////////////////////////////////////////////////////////////////\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @class\n * @classdesc This type of error is thrown when specific vertices are expected not to exist, but do.\n * @extends Error\n */\nJsGraph.VertexExistsError = class VertexExistsError extends Error {\n\tconstructor(key, value) {\n\t\t/**\n\t\t * the set of relevant vertices\n\t\t * @public\n\t\t * @constant vertices\n\t\t * @memberof JsGraph.VertexExistsError\n\t\t * @instance\n\t\t * @type {Set.<{ key: string, value }>}\n\t\t */\n\t\tthis.vertices = new Set();\n\t\tthis.v(key, value);\n\t}\n\tv(key, value) {\n\t\tthis.vertices.add({ key, value });\n\t\tthis._refreshMessage();\n\t\treturn this;\n\t}\n\t_refreshMessage() {\n\t\tvar aVertices = this.vertices.size === 1 ? \"a vertex\" : \"vertices\";\n\t\tthis.message = `This graph has ${aVertices} '${\n\t\t\t[...this.vertices].map((v) => v.key).join(\"', '\")\n\t\t}'`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when specific vertices are expected to exist, but don't.\n * @extends Error\n */\nJsGraph.VertexNotExistsError = class VertexNotExistError extends Error {\n\tconstructor(key) {\n\t\t/**\n\t\t * the set of relevant vertices\n\t\t * @public\n\t\t * @constant vertices\n\t\t * @memberof JsGraph.VertexNotExistsError\n\t\t * @instance\n\t\t * @type {Set.<{ key: string }>}\n\t\t */\n\t\tthis.vertices = new Set();\n\t\tthis.v(key);\n\t}\n\tv(key) {\n\t\tthis.vertices.add({ key });\n\t\tthis._refreshMessage();\n\t\treturn this;\n\t}\n\t_refreshMessage() {\n\t\tvar aVertices = this.vertices.size === 1 ? \"a vertex\" : \"vertices\";\n\t\tthis.message = `This graph does not have ${aVertices} '${\n\t\t\t[...this.vertices].map((v) => v.key).join(\"', '\")\n\t\t}'`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when specific edges are expected not to exist, but do.\n * @extends Error\n */\nJsGraph.EdgeExistsError = class EdgeExistsError extends Error {\n\tconstructor(from, to, value) {\n\t\t/**\n\t\t * the set of relevant edges\n\t\t * @public\n\t\t * @constant edges\n\t\t * @memberof JsGraph.EdgeExistsError\n\t\t * @instance\n\t\t * @type {Set.<{ from: string, to: string, value }>}\n\t\t */\n\t\tthis.edges = new Set();\n\t\tthis.e(from, to, value);\n\t}\n\te(from, to, value) {\n\t\tthis.edges.add({ from, to, value });\n\t\tthis._refreshMessage();\n\t\treturn this;\n\t}\n\t_refreshMessage() {\n\t\tvar edges = [];\n\t\tfor (let {from, to} of this.edges) {\n\t\t\tedges.push(\"('\" + from + \"', '\" + to + \"')\");\n\t\t}\n\t\tvar anEdges = edges.length === 1 ? \"an edge\" : \"edges\";\n\t\tthis.message = `This graph has ${anEdges} ${edges.join(\", \")}`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when specific edges are expected to exist, but don't.\n * @extends Error\n */\nJsGraph.EdgeNotExistsError = class EdgeNotExistsError extends Error {\n\tconstructor(from, to) {\n\t\t/**\n\t\t * the set of relevant edges\n\t\t * @public\n\t\t * @constant edges\n\t\t * @memberof JsGraph.EdgeNotExistsError\n\t\t * @instance\n\t\t * @type {Set.<{ from: string, to: string }>}\n\t\t */\n\t\tthis.edges = new Set();\n\t\tthis.e(from, to);\n\t}\n\te(from, to) {\n\t\tthis.edges.add({ from, to });\n\t\tthis._refreshMessage();\n\t\treturn this;\n\t}\n\t_refreshMessage() {\n\t\tvar edges = [];\n\t\tfor (let {from, to} of this.edges) {\n\t\t\tedges.push(\"('\" + from + \"', '\" + to + \"')\");\n\t\t}\n\t\tvar anEdges = edges.length === 1 ? \"an edge\" : \"edges\";\n\t\tthis.message = `This graph does not have ${anEdges} ${edges.join(\", \")}`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when a vertex is expected not to have connected edges, but does.\n * @extends Error\n */\nJsGraph.HasConnectedEdgesError = class HasConnectedEdgesError extends Error {\n\tconstructor(key) {\n\t\t/**\n\t\t * the key of the relevant vertex\n\t\t * @public\n\t\t * @constant key\n\t\t * @memberof JsGraph.HasConnectedEdgesError\n\t\t * @instance\n\t\t * @type {string}\n\t\t */\n\t\tthis.key = key;\n\t\tthis.message = `The '${key}' vertex has connected edges`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when a graph is expected not to have a directed cycle, but does.\n * @extends Error\n */\nJsGraph.CycleError = class CycleError extends Error {\n\tconstructor(cycle) {\n\t\t/**\n\t\t * the vertices involved in the cycle\n\t\t * @public\n\t\t * @constant cycle\n\t\t * @memberof JsGraph.CycleError\n\t\t * @instance\n\t\t * @type {Array.<string>}\n\t\t */\n\t\tthis.cycle = cycle;\n\t\tthis.message = `This graph contains a cycle: ${cycle}`;\n\t}\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/js-graph.es6.js\n **/"]}