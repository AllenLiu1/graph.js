{"version":3,"file":"graph.js","sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///webpack/bootstrap 50ab828972c5d86deea3?f628","webpack:///./src/graph.es6.js?8eb6"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","id","loaded","modules","call","m","c","p","_vertices","Symbol","_edges","_reverseEdges","_sources","_sinks","_edgeCount","_extractTwoArgs","_extractThreeArgs","_listeners","_trigger","_verticesFrom","_verticesTo","_edgesFrom","_edgesTo","_verticesWithPathTo","_verticesWithPathFrom","_paths","_expectVertices","_expectVerticesAbsent","_expectEdges","_expectEdgesAbsent","_expectNoConnectedEdges","Graph","parts","Array","_len","_key","arguments","Map","Set","_iterator","iterator","_step","_iteratorNormalCompletion","next","done","key","_step$value","value","isArray","from","_key11","to","createEdge","addVertex","on","event","handler","has","set","get","add","off","_iterator2","_step2","_iteratorNormalCompletion2","addNewVertex","_Graph$_extractTwoArgs2","setVertex","_Graph$_extractTwoArgs32","ensureVertex","_Graph$_extractTwoArgs42","hasVertex","_Graph$_extractTwoArgs52","removeExistingVertex","destroyExistingVertex","_iterator3","verticesFrom","_step3","_iteratorNormalCompletion3","_step3$value","removeEdge","_iterator4","verticesTo","_step4","_iteratorNormalCompletion4","_step4$value","removeVertex","destroyVertex","vertexCount","size","vertex","vertexValue","addNewEdge","_Graph$_extractThreeArgs2","createNewEdge","_Graph$_extractThreeArgs32","setEdge","_Graph$_extractThreeArgs42","spanEdge","_Graph$_extractThreeArgs52","hasEdge","addEdge","_Graph$_extractThreeArgs62","ensureEdge","_Graph$_extractThreeArgs72","_Graph$_extractThreeArgs82","removeExistingEdge","_Graph$_extractTwoArgs62","inDegree","outDegree","_Graph$_extractTwoArgs72","edgeCount","_Graph$_extractTwoArgs82","edge","_Graph$_extractTwoArgs92","edgeValue","_Graph$_extractTwoArgs102","undefined","vertices","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","_step5$value","edges","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_iterator6","_step6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_iterator7","_step7","keys","callee$1$0","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_iterator8","_step8","callee$1$1","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_iterator9","_step9","edgesFrom","callee$1$2","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_iterator10","_step10","edgesTo","callee$1$3","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_iterator11","_step11","verticesWithPathFrom","callee$1$4","_step12","verticesWithPathTo","callee$1$5","_step13","sources","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_iterator14","_step14","sinks","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_iterator15","_step15","vertices_topologically","visited","handled","_this","visit","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_iterator17","_step17","_step17$value","a","i","cycle","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_iterator16","_step16","_step16$value","b","push","indexOf","length","slice","reverse","CycleError","pop","map","regeneratorRuntime","mark","clearEdges","_iterator18","_step18","_iteratorNormalCompletion18","_step18$value$0","clear","_iterator19","_step19","_iteratorNormalCompletion19","v","_step19$value","equals","other","eqV","x","y","eqE","_iterator20","_step20","_iteratorNormalCompletion20","_step20$value","_iterator21","_step21","_iteratorNormalCompletion21","_step21$value$0","_step21$value","apply","cycles","pointStack","markedStack","backtrack","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_iterator22","_step22","_step22$value","out","w","o","u","_arr$_i","found","result","hasCycle","paths","_Graph$_extractTwoArgs112","callee$1$6","stack","pathsFromPrefix","current","_step23$value","path","hasPath","degree","mergeIn","mV","mE","v1","v2","_iterator24","_step24","_iteratorNormalCompletion24","_step24$value","_iterator25","_step25","_iteratorNormalCompletion25","_step25$value$0","clone","trV","trE","transitiveReduction","_iterator26","_step26","_iteratorNormalCompletion26","_step26$value","_iterator27","_step27","_iteratorNormalCompletion27","_step27$value","_iterator28","_step28","_iteratorNormalCompletion28","z","_step28$value","contractPaths","isNexus","nexuses","concat","_toConsumableArray","filter","_ref","_ref2","val","_this2","_ref3","_ref32","unhandledVertices","_ref4","_ref42","checkForBlCycle","_iterator29","_step29","_iteratorNormalCompletion29","_step29$value","_iterator30","_step30","_iteratorNormalCompletion30","_step30$value","_iterator31","_iteratorNormalCompletion31","_step31","startingKey","values","BranchlessCycleError","contractionsToAdd","startPath","start","backwards","fromTo","strt","nxt","verticesNext","verticesToRemove","edgesToRemove","_ref5","_iterator32","_step32","_iteratorNormalCompletion32","_iterator33","_step33","_iteratorNormalCompletion33","_iterator34","_step34","_iteratorNormalCompletion34","first","_iterator36","_step36","_iteratorNormalCompletion36","_step36$value","_iterator37","_step37","_iteratorNormalCompletion37","_step37$value","_iterator35","_step35","_iteratorNormalCompletion35","_step35$value","toVal","_iterator38","_step38","_iteratorNormalCompletion38","_step38$value","rememberedPath","_len2","_key2","missingVertices","k","_this3","_bind","VertexNotExistsError","_len3","_key3","presentVertices","_this4","VertexExistsError","_len4","_key4","absentEdges","_this5","EdgeNotExistsError","_len5","_key5","presentEdges","_this6","EdgeExistsError","_iterator39","_step39","_iteratorNormalCompletion39","_step39$value","_iterator40","_step40","_iteratorNormalCompletion40","_step40$value","HasConnectedEdgesError","_temp2","_temp32","_Error","_len6","_key6","_get","Object","getPrototypeOf","prototype","message","_ref6","_ref62","join","Error","_Error2","VertexNotExistError","_len7","_key7","_Error3","_len8","_key8","_ref7","_ref72$0","_Error4","_len9","_key9","_ref8","_ref82","_Graph$EdgeExistsError","_len10","_key10","_ref9","_ref92$0","_Error5","_Graph$CycleError"],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Graph\"] = factory();\n\telse\n\t\troot[\"Graph\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 50ab828972c5d86deea3\n **/","'use strict';\n\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n//  // Symbols for private members /////////////////////////////////////////////////////////////////\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst _vertices     = Symbol(\"vertices\");\nconst _edges        = Symbol(\"edges\");\nconst _reverseEdges = Symbol(\"reverse edges\");\nconst _sources      = Symbol(\"sources\");\nconst _sinks        = Symbol(\"sinks\");\nconst _edgeCount    = Symbol(\"edge count\");\n\nconst _extractTwoArgs   = Symbol(\"extract ([a, b]) or (a, b) arguments\");\nconst _extractThreeArgs = Symbol(\"extract ([[a, b], c]), ([a, b], c) or (a, b, c) arguments\");\n\nconst _listeners = Symbol(\"listeners\");\nconst _trigger   = Symbol(\"trigger\");\n\nconst _verticesFrom         = Symbol(\"vertices from\");\nconst _verticesTo           = Symbol(\"vertices to\");\nconst _edgesFrom            = Symbol(\"edges from\");\nconst _edgesTo              = Symbol(\"edges to\");\nconst _verticesWithPathTo   = Symbol(\"vertices with path to\");\nconst _verticesWithPathFrom = Symbol(\"vertices with path from\");\nconst _paths                = Symbol(\"paths\");\n\nconst _expectVertices         = Symbol(\"expect vertices\");\nconst _expectVerticesAbsent   = Symbol(\"expect vertex absent\");\nconst _expectEdges            = Symbol(\"expect edge\");\nconst _expectEdgesAbsent      = Symbol(\"expect edge absent\");\nconst _expectNoConnectedEdges = Symbol(\"expect no connected edges\");\n\n\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n//  // Graph class /////////////////////////////////////////////////////////////////////////////////\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @class Graph\n * @classdesc The main class of this library, to be used for representing a mathematical (di)graph.\n *\n * @description Constructor arguments can be used to supply initial vertices and edges.\n * @param ...parts {Array.<Array>}\n *        a short notation for vertices and edges to initially add to the graph;\n *        A vertex should be an array of the form `[key, value]`.\n *        An edge should be an array of the form `[[from, to], value]`.\n *        Later values of vertices or edges in this list will overwrite earlier\n *        values, but vertices need not precede their edges. Vertices that are\n *        connected but store no value need not be listed at all.\n * @example\n * var map = new Graph(\n *     ['Amsterdam',             { population: 825000 }], // vertex\n *     ['Leiden',                { population: 122000 }], // vertex\n *     [['Amsterdam', 'Leiden'], { distance:   \"40km\" }]  // edge\n * );\n */\nexport default class Graph {\n\n\tconstructor(...parts) {\n\t\t/* storage */\n\t\tthis[_vertices]     = new Map(); // Map.< string, * >\n\t\tthis[_edges]        = new Map(); // Map.< string, Map.<string, *> >\n\n\t\t/* bookkeeping */\n\t\tthis[_reverseEdges] = new Map(); // Map.< string, Set.<*> >\n\t\tthis[_sources]      = new Set(); // Set.< string >\n\t\tthis[_sinks]        = new Set(); // Set.< string >\n\t\tthis[_edgeCount]    = 0;\n\n\t\t/* listeners */\n\t\tthis[_listeners] = new Map();\n\n\t\t/* add vertices and values from constructor arguments */\n\t\tfor (let [key, value] of parts) {\n\t\t\tif (Array.isArray(key)) {/////////////// an edge\n\t\t\t\tlet [from, to] = key;\n\t\t\t\tthis.createEdge(from, to, value);\n\t\t\t} else {//////////////////////////////// a vertex\n\t\t\t\tthis.addVertex(key, value);\n\t\t\t}\n\t\t}\n\t}\n\n\t////////////////////////////////////////////////////////\n\t////////// Static private convenience methods //////////\n\t////////////////////////////////////////////////////////\n\n\tstatic [_extractTwoArgs](a, b) {\n\t\treturn Array.isArray(a) ? a : [a, b];\n\t}\n\n\tstatic [_extractThreeArgs](a, b, c) {\n\t\tif (Array.isArray(a)) { [a, b, c] = [...a, b] }\n\t\tif (Array.isArray(a)) { [a, b, c] = [...a, b] }\n\t\treturn [a, b, c];\n\t}\n\n\t/////////////////////////////////////\n\t////////// Event Handling //////////\n\t/////////////////////////////////////\n\n\t/**\n\t * Register an event handler.\n\t * @param event   {string}   the event to listen for\n\t * @param handler {Function} the function to call for each such event fired, receiving its corresponding value\n\t */\n\ton(event, handler) {\n\t\tif (!this[_listeners].has(event)) {\n\t\t\tthis[_listeners].set(event, new Set());\n\t\t}\n\t\tthis[_listeners].get(event).add(handler);\n\t}\n\n\t/**\n\t * Deregister a previously registered event handler.\n\t * @param event   {string}   the event used to originally register a handler\n\t * @param handler {Function} the handler originally registered\n\t */\n\toff(event, handler) {\n\t\tif (this[_listeners].has(event)) {\n\t\t\tthis[_listeners].get(event).delete(handler);\n\t\t}\n\t}\n\n\t[_trigger](event, value) {\n\t\tfor (let handler of this[_listeners].get(event) || []) {\n\t\t\thandler(value);\n\t\t}\n\t}\n\n\t/**\n\t * An event that is triggered just after a vertex is added to this graph.\n\t * Handlers receive the new vertex `[key, value]` as an argument.\n\t * @event vertex-added\n\t * @memberof Graph\n\t * @instance\n\t * @see {@link Graph#on}\n\t * @see {@link Graph#off}\n\t */\n\t/**\n\t * An event that is triggered just after a vertex is removed from this graph.\n\t * Handlers receive the vertex key as an argument.\n\t * @event vertex-removed\n\t * @memberof Graph\n\t * @instance\n\t * @see {@link Graph#on}\n\t * @see {@link Graph#off}\n\t */\n\t/**\n\t * An event that is triggered after a vertex in this graph is modified.\n\t * It is also triggered after any {@link #Graph#event_vertex-added|\"vertex-added\"} event.\n\t * Handlers receive the vertex `[key, value]` as an argument.\n\t * @event vertex-modified\n\t * @memberof Graph\n\t * @instance\n\t * @see {@link Graph#on}\n\t * @see {@link Graph#off}\n\t */\n\t/**\n\t * An event that is triggered just after an edge is added to this graph.\n\t * Handlers receive the new edge `[[from, to], value]` as an argument.\n\t * @event edge-added\n\t * @memberof Graph\n\t * @instance\n\t * @see {@link Graph#on}\n\t * @see {@link Graph#off}\n\t */\n\t/**\n\t * An event that is triggered just after an edge is removed from this graph.\n\t * Handlers receive the edge key `[from, to]` as an argument.\n\t * @event edge-removed\n\t * @memberof Graph\n\t * @instance\n\t * @see {@link Graph#on}\n\t * @see {@link Graph#off}\n\t */\n\t/**\n\t * An event that is triggered after an edge in this graph is modified.\n\t * It is also triggered after any {@link #Graph#event_edge-added|\"edge-added\"} event.\n\t * Handlers receive the edge `[[from, to], value]` as an argument.\n\t * @event edge-modified\n\t * @memberof Graph\n\t * @instance\n\t * @see {@link Graph#on}\n\t * @see {@link Graph#off}\n\t */\n\n\n\t//////////////////////////////\n\t////////// Vertices //////////\n\t//////////////////////////////\n\n\t////////// creating them //////////\n\n\t/**\n\t * Add a new vertex to this graph.\n\t * @throws {Graph.VertexExistsError} if a vertex with this key already exists\n\t * @param  key    {string} the key with which to refer to this new vertex\n\t * @param [value] {*}      the value to store in this new vertex\n\t */ // TODO: allow [key, value] array to be given as argument in docs\n\taddNewVertex(key, value) {\n\t\t[key, value] = Graph[_extractTwoArgs](key, value);\n\t\tthis[_expectVerticesAbsent](key);\n\t\tthis[_vertices].set(key, value);\n\t\tthis[_edges].set(key, new Map());\n\t\tthis[_reverseEdges].set(key, new Set());\n\t\tthis[_sources].add(key);\n\t\tthis[_sinks].add(key);\n\t\tthis[_trigger]('vertex-added',    [key, value]);\n\t\tthis[_trigger]('vertex-modified', [key, value]);\n\t}\n\n\t/**\n\t * Set the value of an existing vertex in this graph.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param  key    {string} the key belonging to the vertex\n\t * @param [value] {*}      the value to store in this vertex\n\t */ // TODO: allow [key, value] array to be given as argument in docs\n\tsetVertex(key, value) {\n\t\t[key, value] = Graph[_extractTwoArgs](key, value);\n\t\tthis[_expectVertices](key);\n\t\tthis[_vertices].set(key, value);\n\t\tthis[_trigger]('vertex-modified', [key, value]);\n\t}\n\n\t/**\n\t * Make sure a vertex with a specific key exists in this graph. If it already exists,\n\t * do nothing. If it does not yet exist, add a new vertex with the given value.\n\t * @param  key    {string} the key for the vertex\n\t * @param [value] {*}      the value to store if a new vertex is added\n\t */ // TODO: allow [key, value] array to be given as argument in docs\n\tensureVertex(key, value) {\n\t\t[key, value] = Graph[_extractTwoArgs](key, value);\n\t\tif (!this.hasVertex(key)) {\n\t\t\tthis.addNewVertex(key, value);\n\t\t}\n\t}\n\n\t/**\n\t * Add a new vertex to this graph. If a vertex with this key already exists,\n\t * the value of that vertex is overwritten.\n\t * @param  key    {string} the key with which to refer to this new vertex\n\t * @param [value] {*}      the value to store in this new vertex\n\t */ // TODO: allow [key, value] array to be given as argument in docs\n\taddVertex(key, value) {\n\t\t[key, value] = Graph[_extractTwoArgs](key, value);\n\t\tif (this.hasVertex(key)) {\n\t\t\tthis.setVertex(key, value);\n\t\t} else {\n\t\t\tthis.addNewVertex(key, value);\n\t\t}\n\t}\n\n\n\t////////// removing them //////////\n\n\t/**\n\t * Remove an existing vertex from this graph.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @throws {Graph.HasConnectedEdgesError} if there are still edges connected to this vertex\n\t * @param key {string} the key of the vertex to remove\n\t */\n\tremoveExistingVertex(key) {\n\t\tthis[_expectVertices](key);\n\t\tthis[_expectNoConnectedEdges](key);\n\t\tthis[_vertices].delete(key);\n\t\tthis[_sources].delete(key);\n\t\tthis[_sinks].delete(key);\n\t\tthis[_trigger]('vertex-removed', key);\n\t}\n\n\t/**\n\t * Remove an existing vertex from this graph, as well as all edges connected to it.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param key {string} the key of the vertex to remove\n\t */\n\tdestroyExistingVertex(key) {\n\t\tthis[_expectVertices](key);\n\t\tfor (let [to] of this.verticesFrom(key)) { this.removeEdge(key,  to ) }\n\t\tfor (let [from] of this.verticesTo(key)) { this.removeEdge(from, key) }\n\t\tthis.removeExistingVertex(key);\n\t}\n\n\t/**\n\t * Remove an existing vertex from this graph.\n\t * If a vertex with this key does not exist, nothing happens.\n\t * @throws {Graph.HasConnectedEdgesError} if there are still edges connected to this vertex\n\t * @param key {string} the key of the vertex to remove\n\t */\n\tremoveVertex(key) {\n\t\tif (this.hasVertex(key)) {\n\t\t\tthis.removeExistingVertex(key);\n\t\t}\n\t}\n\n\t/**\n\t * Remove a vertex from this graph, as well as all edges connected to it.\n\t * If a vertex with this key does not exist, nothing happens.\n\t * @param key {string} the key of the vertex to remove\n\t */\n\tdestroyVertex(key) {\n\t\tif (this.hasVertex(key)) {\n\t\t\tthis.destroyExistingVertex(key);\n\t\t}\n\t}\n\n\n\t////////// querying them //////////\n\n\t/**\n\t * @returns {number} the number of vertices in the whole graph\n\t */\n\tvertexCount() { return this[_vertices].size }\n\n\t/**\n\t * Ask whether a vertex with a given key exists.\n\t * @param key {string} the key to query\n\t * @returns {boolean} whether there is a vertex with the given key\n\t */\n\thasVertex(key) { return this[_vertices].has(key) }\n\n\t/**\n\t * Get the key/value pair representing the vertex with the given `key`.\n\t * @param key {string} the key to query\n\t * @throws {Graph.VertexNotExistsError} if the `key` vertex does not exist in the graph\n\t * @returns {Array} a `[key, value]` shaped array representing the vertex\n\t */\n\tvertex(key) {\n\t\tthis[_expectVertices](key);\n\t\treturn [key, this.vertexValue(key)];\n\t}\n\n\t/**\n\t * Get the value associated with the vertex of a given `key`.\n\t * @param key {string} the key to query\n\t * @returns {*} the value associated with the vertex of the given key.\n\t * Note that a return value of `undefined` can mean\n\t *\n\t * 1. that there is no such vertex, or\n\t * 2. that the stored value is actually `undefined`.\n\t *\n\t * Use {@link Graph#hasVertex} to distinguish these cases.\n\t */\n\tvertexValue(key) { return this[_vertices].get(key) }\n\n\n\t///////////////////////////\n\t////////// Edges //////////\n\t///////////////////////////\n\n\t////////// adding them //////////\n\n\t/**\n\t * Add a new edge to this graph.\n\t * @throws {Graph.EdgeExistsError} if an edge between `from` and `to` already exists\n\t * @throws {Graph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store in this new edge\n\t */ // TODO: allow [from, to], value array to be given as argument in docss; or [[from, to], value] as single argument\n\taddNewEdge(from, to, value) {\n\t\t[from, to, value] = Graph[_extractThreeArgs](from, to, value);\n\t\tthis[_expectEdgesAbsent]([from, to]);\n\t\tthis[_expectVertices](from, to);\n\t\tthis[_edges].get(from).set(to, value);\n\t\tthis[_reverseEdges].get(to).add(from);\n\t\tthis[_edgeCount] += 1;\n\t\tthis[_sources].delete(to);\n\t\tthis[_sinks].delete(from);\n\t\tthis[_trigger]('edge-added',    [[from, to], value]);\n\t\tthis[_trigger]('edge-modified', [[from, to], value]);\n\t}\n\n\t/**\n\t * Add a new edge to this graph. If the `from` and/or `to` vertices do not yet exist\n\t * in the graph, they are implicitly added with an `undefined` value.\n\t * @throws {Graph.EdgeExistsError} if an edge between `from` and `to` already exists\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store in this new edge\n\t */ // TODO: allow [from, to], value array to be given as argument in docss; or [[from, to], value] as single argument\n\tcreateNewEdge(from, to, value) {\n\t\t[from, to, value] = Graph[_extractThreeArgs](from, to, value);\n\t\tthis[_expectEdgesAbsent]([from, to]);\n\t\tthis.ensureVertex(from);\n\t\tthis.ensureVertex(to);\n\t\tthis.addNewEdge(from, to, value);\n\t}\n\n\t/**\n\t * Set the value of an existing edge in this graph.\n\t * @throws {Graph.EdgeNotExistsError} if an edge between `from` and `to` does not yet exist\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store in this edge\n\t */ // TODO: allow [from, to], value array to be given as argument in docss; or [[from, to], value] as single argument\n\tsetEdge(from, to, value) {\n\t\t[from, to, value] = Graph[_extractThreeArgs](from, to, value);\n\t\tthis[_expectEdges]([from, to]);\n\t\tthis[_edges].get(from).set(to, value);\n\t\tthis[_trigger]('edge-modified', [[from, to], value]);\n\t}\n\n\t/**\n\t * Make sure an edge between the `from` and `to` vertices in this graph.\n\t * If one already exists, nothing is done.\n\t * If one does not yet exist, a new edge is added with the given value.\n\t * @throws {Graph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store if a new edge is added\n\t */ // TODO: allow [from, to], value array to be given as argument in docss; or [[from, to], value] as single argument\n\tspanEdge(from, to, value) {\n\t\t[from, to, value] = Graph[_extractThreeArgs](from, to, value);\n\t\tthis[_expectVertices](from, to);\n\t\tif (!this.hasEdge(from, to)) {\n\t\t\tthis.addNewEdge(from, to, value);\n\t\t}\n\t}\n\n\t/**\n\t * Add a new edge to this graph. If an edge between `from` and `to` already exists,\n\t * the value of that edge is overwritten.\n\t * @throws {Graph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store in this new edge\n\t */ // TODO: allow [from, to], value array to be given as argument in docss; or [[from, to], value] as single argument\n\taddEdge(from, to, value) {\n\t\t[from, to, value] = Graph[_extractThreeArgs](from, to, value);\n\t\tif (this.hasEdge(from, to)) {\n\t\t\tthis.setEdge(from, to, value);\n\t\t} else {\n\t\t\tthis.addNewEdge(from, to, value);\n\t\t}\n\t}\n\n\t/**\n\t * Make sure an edge between the `from` and `to` vertices exists in this graph.\n\t * If it already exists, nothing is done.\n\t * If it does not yet exist, a new edge is added with the given value.\n\t * If the `from` and/or `to` vertices do not yet exist\n\t * in the graph, they are implicitly added with an `undefined` value.\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store if a new edge is added\n\t */ // TODO: allow [from, to], value array to be given as argument in docss; or [[from, to], value] as single argument\n\tensureEdge(from, to, value) {\n\t\t[from, to, value] = Graph[_extractThreeArgs](from, to, value);\n\t\tif (!this.hasEdge(from, to)) {\n\t\t\tthis.createNewEdge(from, to, value);\n\t\t}\n\t}\n\n\t/**\n\t * Add a new edge to this graph. If an edge between the `from` and `to`\n\t * vertices already exists, the value of that edge is overwritten.\n\t * If the `from` and/or `to` vertices do not yet exist\n\t * in the graph, they are implicitly added with an `undefined` value.\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store if a new edge is added\n\t */ // TODO: allow [from, to], value array to be given as argument in docss; or [[from, to], value] as single argument\n\tcreateEdge(from, to, value) {\n\t\t[from, to, value] = Graph[_extractThreeArgs](from, to, value);\n\t\tif (this.hasEdge(from, to)) {\n\t\t\tthis.setEdge(from, to, value);\n\t\t} else {\n\t\t\tthis.createNewEdge(from, to, value);\n\t\t}\n\t}\n\n\n\t////////// removing them //////////\n\n\t/**\n\t * Remove an existing edge from this graph.\n\t * @throws {Graph.EdgeNotExistsError} if an edge between the `from` and `to` vertices doesn't exist\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t */ // TODO: allow [from, to] array to be given as argument in docs\n\tremoveExistingEdge(from, to) {\n\t\t[from, to] = Graph[_extractTwoArgs](from, to);\n\t\tthis[_expectEdges]([from, to]);\n\t\tthis[_edges].get(from).delete(to);\n\t\tthis[_reverseEdges].get(to).delete(from);\n\t\tthis[_edgeCount] -= 1;\n\t\tif (this. inDegree(to)   === 0) { this[_sources].add(to) }\n\t\tif (this.outDegree(from) === 0) { this[_sinks].add(from) }\n\t\tthis[_trigger]('edge-removed', [from, to]);\n\t}\n\n\t/**\n\t * Remove an edge from this graph.\n\t * If an edge between the `from` and `to` vertices doesn't exist, nothing happens.\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t */ // TODO: allow [from, to] array to be given as argument in docs\n\tremoveEdge(from, to) {\n\t\t[from, to] = Graph[_extractTwoArgs](from, to);\n\t\tif (this.hasEdge(from, to)) {\n\t\t\tthis.removeExistingEdge(from, to);\n\t\t}\n\t}\n\n\n\t////////// querying them //////////\n\n\t/**\n\t * @returns {number} the number of edges in the whole graph\n\t */\n\tedgeCount() { return this[_edgeCount] }\n\n\t/**\n\t * Ask whether an edge between given `from` and `to` vertices exist.\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t * @returns {boolean} whether there is an edge between the given `from` and `to` vertices\n\t */ // TODO: allow [from, to] array to be given as argument in docs\n\thasEdge(from, to) {\n\t\t[from, to] = Graph[_extractTwoArgs](from, to);\n\t\treturn this.hasVertex(from) &&\n\t\t\tthis.hasVertex(to) &&\n\t\t\tthis[_edges].has(from) &&\n\t\t\tthis[_edges].get(from).has(to);\n\t}\n\n\t/**\n\t * Get the key/value pair representing the edge between the given `from` and `to`.\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t * @returns {Array} a `[[from, to], value]` shaped array representing the edge\n\t */ // TODO: allow [from, to] array to be given as argument in docs\n\tedge(from, to) {\n\t\t[from, to] = Graph[_extractTwoArgs](from, to);\n\t\tthis[_expectEdges]([from, to]);\n\t\treturn [[from, to], this.edgeValue(from, to)];\n\t}\n\n\t/**\n\t * Get the value associated with the edge between given `from` and `to` vertices.\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t * @returns {*} the value associated with the edge between the given `from` and `to` vertices\n\t * Note that a return value of `undefined` can mean\n\t *\n\t * 1. that there is no such edge, or\n\t * 2. that the stored value is actually `undefined`.\n\t *\n\t * Use {@link Graph#hasEdge} to distinguish these cases.\n\t */ // TODO: allow [from, to] array to be given as argument in docs\n\tedgeValue(from, to) {\n\t\t[from, to] = Graph[_extractTwoArgs](from, to);\n\t\treturn this.hasEdge(from, to) ? this[_edges].get(from).get(to) : undefined;\n\t}\n\n\n\t///////////////////////////////////////////////\n\t//////////// ES6 Iterable interfaces //////////\n\t///////////////////////////////////////////////\n\n\t/**\n\t * Iterate over all vertices of the graph, in no particular order.\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.vertices(), kv; !(kv = it.next()).done;) {\n\t *     var key   = kv.value[0],\n\t *         value = kv.value[1];\n\t *     // iterates over all vertices of the graph\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.vertices()) {\n\t *     // iterates over all vertices of the graph\n\t * }\n\t * @see {@link Graph#@@iterator}\n\t */\n\t*vertices() {\n\t\tlet done = new Set();\n\t\tfor (let [key, value] of this[_vertices]) {\n\t\t\tif (this.hasVertex(key) && !done.has(key)) {\n\t\t\t\tdone.add(key);\n\t\t\t\tyield [key, value];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * A {@link Graph} object is itself {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol|iterable},\n\t * and serves as a short notation in ECMAScript 6 to iterate over all vertices in the graph, in no particular order.\n\t * @method Graph#@@iterator\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (let [key, value] of graph) {\n\t *     // iterates over all vertices of the graph\n\t * }\n\t * @see {@link Graph#vertices}\n\t */\n\t[Symbol.iterator]() { return this.vertices() }\n\n\t/**\n\t * Iterate over all edges of the graph, in no particular order.\n\t * @returns { Iterator.<string, string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.edges(), kv; !(kv = it.next()).done;) {\n\t *     var from  = kv.value[0][0],\n\t *         to    = kv.value[0][1],\n\t *         value = kv.value[1];\n\t *     // iterates over all edges of the graph\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [[from, to], value] of graph.edges()) {\n\t *     // iterates over all vertices of the graph\n\t * }\n\t */\n\t*edges() {\n\t\tlet done = new Map();\n\t\tfor (let from of this[_edges].keys()) {\n\t\t\tdone.set(from, new Set());\n\t\t\tfor (let to of this[_edges].get(from).keys()) {\n\t\t\t\tif (!done.get(from).has(to) && this.hasEdge(from, to)) {\n\t\t\t\t\tdone.get(from).add(to);\n\t\t\t\t\tyield this.edge(from, to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over the vertices directly reachable from a given vertex in the graph, in no particular order.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with the given `from` key does not exist\n\t * @param key {string} the key of the vertex to take the outgoing edges from\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.verticesFrom(from), kv; !(kv = it.next()).done;) {\n\t *     var to    = kv.value[0],\n\t *         value = kv.value[1];\n\t *     // iterates over all outgoing vertices of the `from` vertex\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [to, value] of graph.verticesFrom(from)) {\n\t *     // iterates over all outgoing vertices of the `from` vertex\n\t * }\n\t */\n\tverticesFrom(key) {\n\t\tthis[_expectVertices](key);\n\t\treturn this[_verticesFrom](key);\n\t}\n\t*[_verticesFrom](from) {\n\t\tlet done = new Set();\n\t\tfor (let to of this[_edges].get(from).keys()) {\n\t\t\tif (!done.has(to) && this.hasEdge(from, to)) {\n\t\t\t\tdone.add(to);\n\t\t\t\tyield this.vertex(to);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over the vertices from which a given vertex in the graph is directly reachable, in no particular order.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with the given `to` key does not exist\n\t * @param key {string} the key of the vertex to take the incoming edges from\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.verticesTo(to), kv; !(kv = it.next()).done;) {\n\t *     var from  = kv.value[0],\n\t *         value = kv.value[1];\n\t *     // iterates over all outgoing vertices of the `to` vertex\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [from, value] of graph.verticesTo(to)) {\n\t *     // iterates over all incoming vertices of the `to` vertex\n\t * }\n\t */\n\tverticesTo(key) {\n\t\tthis[_expectVertices](key);\n\t\treturn this[_verticesTo](key);\n\t}\n\t*[_verticesTo](to) {\n\t\tlet done = new Set();\n\t\tfor (let from of this[_reverseEdges].get(to)) {\n\t\t\tif (!done.has(from) && this.hasEdge(from, to)) {\n\t\t\t\tdone.add(from);\n\t\t\t\tyield this.vertex(from);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over the outgoing edges of a given vertex in the graph, in no particular order.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with the given `from` key does not exist\n\t * @param key {string} the key of the vertex to take the outgoing edges from\n\t * @returns { Iterator.<string, string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.edgesFrom(from), kv; !(kv = it.next()).done;) {\n\t *     var from  = kv.value[0][0],\n\t *         to    = kv.value[0][1],\n\t *         value = kv.value[1];\n\t *     // iterates over all outgoing edges of the `from` vertex\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [[from, to], value] of graph.edgesFrom(from)) {\n\t *     // iterates over all outgoing edges of the `from` vertex\n\t * }\n\t */\n\tedgesFrom(key) {\n\t\tthis[_expectVertices](key);\n\t\treturn this[_edgesFrom](key);\n\t}\n\t*[_edgesFrom](from) {\n\t\tlet done = new Set();\n\t\tfor (let to of this[_edges].get(from).keys()) {\n\t\t\tif (!done.has(to) && this.hasEdge(from, to)) {\n\t\t\t\tdone.add(to);\n\t\t\t\tyield this.edge(from, to);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over the incoming edges of a given vertex in the graph, in no particular order.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with the given `to` key does not exist\n\t * @param key {string} the key of the vertex to take the incoming edges from\n\t * @returns { Iterator.<string, string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.edgesTo(to), kv; !(kv = it.next()).done;) {\n\t *     var from  = kv.value[0][0],\n\t *         to    = kv.value[0][1],\n\t *         value = kv.value[1];\n\t *     // iterates over all incoming edges of the `to` vertex\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [[from, to], value] of graph.edgesTo(to)) {\n\t *     // iterates over all incoming edges of the `to` vertex\n\t * }\n\t */\n\tedgesTo(key) {\n\t\tthis[_expectVertices](key);\n\t\treturn this[_edgesTo](key);\n\t}\n\t*[_edgesTo](to) {\n\t\tlet done = new Set();\n\t\tfor (let from of this[_reverseEdges].get(to)) {\n\t\t\tif (!done.has(from) && this.hasEdge(from, to)) {\n\t\t\t\tdone.add(from);\n\t\t\t\tyield this.edge(from, to);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over all vertices reachable from a given vertex in the graph, in no particular order.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with the given `from` key does not exist\n\t * @param from {string} the key of the vertex to take the reachable vertices from\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.verticesWithPathFrom(from), kv; !(kv = it.next()).done;) {\n\t *     var key   = kv.value[0],\n\t *         value = kv.value[1];\n\t *     // iterates over all vertices reachable from `from`\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.verticesWithPathFrom(from)) {\n\t *     // iterates over all vertices reachable from `from`\n\t * }\n\t */\n\tverticesWithPathFrom(from) {\n\t\tthis[_expectVertices](from);\n\t\treturn this[_verticesWithPathFrom](from, new Set());\n\t}\n\t*[_verticesWithPathFrom](from, done) {\n\t\tfor (let to of this[_edges].get(from).keys()) {\n\t\t\tif (this.hasEdge(from, to) && !done.has(to)) {\n\t\t\t\tdone.add(to);\n\t\t\t\tyield [to, this[_vertices].get(to)];\n\t\t\t\tyield* this[_verticesWithPathFrom](to, done);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over all vertices from which a given vertex in the graph can be reached, in no particular order.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with the given `to` key does not exist\n\t * @param to {string} the key of the vertex to take the reachable vertices from\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.verticesWithPathTo(to), kv; !(kv = it.next()).done;) {\n\t *     var key   = kv.value[0],\n\t *         value = kv.value[1];\n\t *     // iterates over all vertices from which `to` can be reached\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.verticesWithPathTo(to)) {\n\t *     // iterates over all vertices from which `to` can be reached\n\t * }\n\t */\n\tverticesWithPathTo(to) {\n\t\tthis[_expectVertices](to);\n\t\treturn this[_verticesWithPathTo](to, new Set());\n\t}\n\t*[_verticesWithPathTo](to, done) {\n\t\tfor (let from of this[_reverseEdges].get(to)) {\n\t\t\tif (this.hasEdge(from, to) && !done.has(from)) {\n\t\t\t\tdone.add(from);\n\t\t\t\tyield [from, this[_vertices].get(from)];\n\t\t\t\tyield* this[_verticesWithPathTo](from, done);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Iterate over all vertices that have no incoming edges, in no particular order.\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.sources(), kv; !(kv = it.next()).done;) {\n\t *     var key   = kv.value[0],\n\t *         value = kv.value[1];\n\t *     // iterates over all vertices with no incoming edges\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.sources()) {\n\t *     // iterates over all vertices with no incoming edges\n\t * }\n\t */\n\t*sources() {\n\t\tlet done = new Set();\n\t\tfor (let key of this[_sources]) {\n\t\t\tif (this.hasVertex(key) && !done.has(key)) {\n\t\t\t\tdone.add(key);\n\t\t\t\tyield [key, this.vertexValue(key)];\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Iterate over all vertices that have no outgoing edges, in no particular order.\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.sinks(), kv; !(kv = it.next()).done;) {\n\t *     var key   = kv.value[0],\n\t *         value = kv.value[1];\n\t *     // iterates over all vertices with no outgoing edges\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.sinks()) {\n\t *     // iterates over all vertices with no outgoing edges\n\t * }\n\t */\n\t*sinks() {\n\t\tlet done = new Set();\n\t\tfor (let key of this[_sinks]) {\n\t\t\tif (this.hasVertex(key) && !done.has(key)) {\n\t\t\t\tdone.add(key);\n\t\t\t\tyield [key, this.vertexValue(key)];\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Iterate over all vertices of the graph in topological order.\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.vertices_topologically(), kv; !(kv = it.next()).done;) {\n\t *     var key   = kv.value[0],\n\t *         value = kv.value[1];\n\t *     // iterates over all vertices of the graph in topological order\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.vertices_topologically()) {\n\t *     // iterates over all vertices of the graph in topological order\n\t * }\n\t */\n\t*vertices_topologically() {\n\t\tlet visited = []; // stack\n\t\tlet handled = new Set();\n\n\t\tlet _this = this;\n\t\tfunction *visit(a) {\n\t\t\tvisited.push(a);\n\t\t\tlet i = visited.indexOf(a);\n\t\t\tif (i !== visited.length - 1) {\n\t\t\t\tlet cycle = visited.slice(i + 1).reverse();\n\t\t\t\tthrow new Graph.CycleError(cycle);\n\t\t\t}\n\t\t\tif (!handled.has(a)) {\n\t\t\t\tfor (let [b] of _this.verticesTo(a)) {\n\t\t\t\t\tyield* visit(b);\n\t\t\t\t}\n\t\t\t\tif (_this.hasVertex(a)) {\n\t\t\t\t\tyield [a, _this[_vertices].get(a)];\n\t\t\t\t}\n\t\t\t\thandled.add(a);\n\t\t\t}\n\t\t\tvisited.pop();\n\t\t}\n\t\tfor (let [a] of this.vertices()) {\n\t\t\tif (!handled.has(a)) {\n\t\t\t\tyield* visit(a);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t//////////////////////////////\n\t////////// Clearing //////////\n\t//////////////////////////////\n\n\t/**\n\t * Remove all edges from the graph, but leave the vertices intact.\n\t */\n\tclearEdges() {\n\t\tfor (let [[from, to]] of this.edges()) { this.removeEdge(from, to) }\n\t}\n\n\t/**\n\t * Remove all edges and vertices from the graph, putting it back in its initial state.\n\t */\n\tclear() {\n\t\tfor (let [v] of this.vertices()) { this.destroyVertex(v) }\n\t}\n\n\n\t////////////////////////////////////////\n\t////////// (Advanced) Queries //////////\n\t////////////////////////////////////////\n\n\n\t/**\n\t * Ask whether `this` graph and a given `other` graph are equal.\n\t * Two graphs are equal if they have the same vertices and the same edges.\n\t * @param other {Graph} the other graph to compare to `this` one\n\t * @param [eqV] {function(*, *, string): boolean}\n\t *     a custom equality function for values stored in vertices;\n\t *     defaults to `===` comparison; The first two arguments are the\n\t *     values to compare. The third is the corresponding `key`.\n\t * @param [eqE] {function(*, *, string, string): boolean}\n\t *     a custom equality function for values stored in edges;\n\t *     defaults to the function given for `trV`; The first two arguments\n\t *     are the values to compare. The third and fourth are the `from`\n\t *     and `to` keys respectively.\n\t * @returns {boolean} `true` if the two graphs are equal; `false` otherwise\n\t */\n\tequals(other, eqV=(x,y)=>(x===y), eqE=eqV) {\n\t\tif (!(other instanceof Graph))                  { return false }\n\t\tif (this.vertexCount() !== other.vertexCount()) { return false }\n\t\tif (this.edgeCount()   !== other.edgeCount()  ) { return false }\n\t\tfor (let [key, value] of this.vertices()) {\n\t\t\tif (!other.hasVertex(key))                    { return false }\n\t\t\tif (!eqV(value, other.vertexValue(key), key)) { return false }\n\t\t}\n\t\tfor (let [[from, to], value] of this.edges()) {\n\t\t\tif (!other.hasEdge(from, to))                         { return false }\n\t\t\tif (!eqE(value, other.edgeValue(from, to), from, to)) { return false }\n\t\t}\n\t\treturn true;\n\t}\n\n\n\t/**\n\t * Iterate over all simple directed cycles in this graph, in no particular order.\n\t * If you mutate the graph in between iterations, behavior of the iterator\n\t * becomes unspecified. (So, don't.)\n\t * @returns { Iterator.< Array.<string> > }\n\t *          an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}.\n\t *          Each iterated value is an array containing the vertex keys describing the cycle.\n\t *          These arrays will contain each vertex key only once — even the first/last one.\n\t * @example\n\t * for (var it = graph.cycles(), kv; !(kv = it.next()).done;) {\n\t *     var cycle = kv.value;\n\t *     // iterates over all cycles of the graph\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let cycle of graph.cycles()) {\n\t *     // iterates over all cycles of the graph\n\t * }\n\t */\n\t*cycles() {\n\t\t// This algorithm is based on the following article:\n\t\t// Enumeration of the elementary circuits of a directed graph\n\t\t// R. Tarjan, SIAM Journal on Computing, 2 (1973), pp. 211-216\n\t\t// http://dx.doi.org/10.1137/0202017\n\t\t// -----\n\t\t// TODO: implement the improved version as defined by Johnson:\n\t\t// Finding all the elementary circuits of a directed graph.\n\t\t// D. B. Johnson, SIAM Journal on Computing 4, no. 1, 77-84, 1975.\n\t\t// http://dx.doi.org/10.1137/0204007\n\n\t\t/* bookkeeping */\n\t\tlet pointStack = [];\n\t\tlet markedStack, mark;\n\n\t\t/* the main recursive backtracking algorithm */\n\t\tlet _this = this;\n\t\tfunction* backtrack(v, out = {}) {\n\t\t\tpointStack.push(v);\n\t\t\tmark.add(v);\n\t\t\tmarkedStack.push(v);\n\t\t\tfor (let [w] of [..._this.verticesFrom(v)]) {\n\t\t\t\tif (w < pointStack[0]) { continue }\n\t\t\t\tif (w === pointStack[0]) {\n\t\t\t\t\tyield [...pointStack];\n\t\t\t\t\tout.found = true;\n\t\t\t\t} else if (!mark.has(w)) {\n\t\t\t\t\tlet o = {};\n\t\t\t\t\tyield* backtrack(w, o);\n\t\t\t\t\tout.found = out.found || o.found;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (out.found) { // if a simple cycle continuing the partial path on the pointStack has been found\n\t\t\t\tlet u;\n\t\t\t\tdo {\n\t\t\t\t\tu = markedStack.pop();\n\t\t\t\t\tmark.delete(u);\n\t\t\t\t} while (u !== v);\n\t\t\t}\n\t\t\tpointStack.pop();\n\t\t}\n\n\t\t/* start backtracking from each vertex in the graph */\n\t\tfor (let [a] of this.vertices()) {\n\t\t\tmarkedStack = [];\n\t\t\tmark = new Set();\n\t\t\tyield* backtrack(a);\n\t\t}\n\t}\n\n\n\t/**\n\t * Find any directed cycle in this graph.\n\t * @returns {?Array} an array containing the vertex keys describing the cycle; `null`, if there is no cycle;\n\t *                   The array will contain each vertex key only once — even the first/last one.\n\t */\n\tcycle() {\n\t\tlet result = this.cycles().next();\n\t\treturn result.done ? null : result.value;\n\t}\n\n\n\t/**\n\t * Test whether this graph contains a directed cycle.\n\t * @returns {boolean} whether this graph contains any directed cycle\n\t */\n\thasCycle() { return !this.cycles().next().done }\n\n\n\t/**\n\t * Iterate over all paths between two given keys in this graph, in no particular order.\n\t * If you mutate the graph in between iterations, behavior of the iterator\n\t * becomes unspecified. (So, don't.)\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t * @throws {Graph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @returns { Iterator.< Array.<string> > }\n\t *          an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}.\n\t *          Each iterated value is an array containing the vertex-keys describing the path.\n\t * @example\n\t * for (var it = graph.paths(from, to), kv; !(kv = it.next()).done;) {\n\t *     var path = kv.value;\n\t *     // iterates over all paths between `from` and `to` in the graph\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let path of graph.paths(from, to)) {\n\t *     // iterates over all paths between `from` and `to` in the graph\n\t * }\n\t */\n\tpaths(from, to) {\n\t\t[from, to] = Graph[_extractTwoArgs](from, to);\n\t\tthis[_expectVertices](from, to);\n\t\treturn this[_paths](from, to);\n\t}\n\t*[_paths](from, to) {\n\t\tlet stack = [];\n\n\t\tlet _this = this;\n\t\tfunction *pathsFromPrefix(current) {\n\t\t\tstack.push(current);\n\t\t\tfor (let [next] of _this.verticesFrom(current)) {\n\t\t\t\tif (next === to) {\n\t\t\t\t\tyield [...stack, to];\n\t\t\t\t} else if (stack.indexOf(next) === -1) {\n\t\t\t\t\tyield* pathsFromPrefix(next);\n\t\t\t\t}\n\t\t\t}\n\t\t\tstack.pop();\n\t\t}\n\n\t\tyield* pathsFromPrefix(from);\n\t}\n\n\n\t/**\n\t * Find any path between a given pair of keys.\n\t * @param from {string} the originating vertex\n\t * @param to   {string} the terminating vertex\n\t * @throws {Graph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @returns {?Array} an array with the keys of the path found between the two vertices,\n\t *                   including those two vertices themselves; `null` if no such path exists\n\t */\n\tpath(from, to) {\n\t\tlet result = this.paths(from, to).next();\n\t\treturn result.done ? null : result.value;\n\t}\n\n\n\t/**\n\t * Test whether there is a directed path between a given pair of keys.\n\t * @param from {string} the originating vertex\n\t * @param to   {string} the terminating vertex\n\t * @throws {Graph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @returns {boolean} whether such a path exists\n\t */\n\thasPath(from, to) { return !this.paths(from, to).next().done }\n\n\n\t/**\n\t * Get the number of edges going out of a given vertex.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param key {string} the key of the vertex to query\n\t * @returns {number} the number of edges going out of the `key` vertex\n\t */\n\toutDegree(key) {\n\t\tthis[_expectVertices](key);\n\t\treturn this[_edges].get(key).size;\n\t}\n\n\n\t/**\n\t * Get the number of edges coming into a given vertex.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param key {string} the key of the vertex to query\n\t * @returns {number} the number of edges coming into the `key` vertex\n\t */\n\tinDegree(key) {\n\t\tthis[_expectVertices](key);\n\t\treturn this[_reverseEdges].get(key).size;\n\t}\n\n\n\t/**\n\t * Get the number of edges connected to a given vertex.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param key {string} the key of the vertex to query\n\t * @returns {number} the number of edges connected to the `key` vertex\n\t */\n\tdegree(key) { return this.outDegree(key) + this.inDegree(key) }\n\n\n\t///////////////////////////////////////\n\t////////// Cloning and stuff //////////\n\t///////////////////////////////////////\n\n\n\t/**\n\t * Merge another graph into this graph.\n\t * @param other {Graph} the other graph to merge into this one\n\t * @param [mV] {function(*, *, string): *}\n\t *     a custom merge function for values stored in vertices;\n\t *     defaults to whichever of the two values is not `undefined`,\n\t *     giving preference to that of the other graph; The first and\n\t *     second arguments are the vertex values of `this` graph and the\n\t *     `other` graph respectively. The third is the corresponding `key`.\n\t * @param [mE] {function(*, *, string, string): *}\n\t *     a custom merge function for values stored in edges;\n\t *     defaults to whichever of the two values is not `undefined`,\n\t *     giving preference to that of the other graph; The first and\n\t *     second arguments are the edge values of `this` graph and the\n\t *     `other` graph respectively. The third and fourth are the\n\t *     corresponding `from` and `to` keys.\n\t */\n\tmergeIn(other, mV, mE) {\n\t\tif (!mV) { mV = (v1,v2)=>(typeof v2 === 'undefined' ? v1 : v2) }\n\t\tif (!mE) { mE = mV }\n\t\tfor (let [key] of other.vertices()) {\n\t\t\tthis.addVertex(key, mV(this.vertexValue(key), other.vertexValue(key)));\n\t\t}\n\t\tfor (let [[from, to]] of other.edges()) {\n\t\t\tthis.addEdge(from, to, mE(this.edgeValue(from, to), other.edgeValue(from, to), from, to));\n\t\t}\n\t}\n\n\n\t/**\n\t * Create a clone of this graph.\n\t * @param [trV] {function(*, string): *}\n\t *     a custom transformation function for values stored in vertices;\n\t *     defaults to the identity function; The first argument is the\n\t *     value to clone. The second is the corresponding `key`.\n\t * @param [trE] {function(*, string, string): *}\n\t *     a custom transformation function for values stored in edges;\n\t *     defaults to the function given for `trV`; The first argument\n\t *     is the value to clone. The second and third are the `from`\n\t *     and `to` keys respectively.\n\t * @returns {Graph} a clone of this graph\n\t */\n\tclone(trV=(v=>v), trE=trV) {\n\t\tlet result = new Graph();\n\t\tresult.mergeIn(this, (v1, v2) => trV(v2), (v1, v2) => trE(v2));\n\t\treturn result;\n\t}\n\n\n\t/**\n\t * Create a clone of this graph, but without any transitive edges.\n\t * @param [trV] {function(*, string): *}\n\t *     a custom transformation function for values stored in vertices;\n\t *     defaults to the identity function; The first argument is the\n\t *     value to clone. The second is the corresponding `key`.\n\t * @param [trE] {function(*, string, string): *}\n\t *     a custom transformation function for values stored in edges;\n\t *     defaults to the function given for `trV`; The first argument\n\t *     is the value to clone. The second and third are the `from`\n\t *     and `to` keys respectively.\n\t * @returns {Graph} a clone of this graph with all transitive edges removed\n\t */\n\ttransitiveReduction(trV, trE) {\n\t\t// argument defaults are handled in `clone`\n\t\tlet result = this.clone(trV, trE);\n\t\tfor (let [x] of this.vertices())\n\t\t\tfor (let [y] of this.vertices())\n\t\t\t\tif (result.hasEdge(x, y))\n\t\t\t\t\tfor (let [z] of this.vertices())\n\t\t\t\t\t\tif (result.hasPath(y, z))\n\t\t\t\t\t\t\tresult.removeEdge(x, z);\n\t\treturn result;\n\t}\n\n\t/**\n\t * This method replaces stretches of non-branching directed pathway into single edges.\n\t * More specifically, it identifies all 'nexus' vertices in the graph and preserves them.\n\t * It then removes all other vertices and all edges from the graph, then inserts edges\n\t * between nexuses that summarize the connectivity that was there before.\n\t *\n\t * A nexus is any vertex that is *not* characterized by '1 edge in, 1 edge out'.\n\t * A custom `isNexus` function may be provided to manually select additional vertices\n\t * that should be preserved as nexus.\n\t * @param [isNexus] {function(string, *): boolean}\n\t *                  a predicate for identifying additional vertices that should be treated as nexus;\n\t *                  It receives a `key` and `value` associated to a vertex and should return\n\t *                  true if and only if that vertex should be a nexus.\n\t * @throws {Graph.BranchlessCycleError} if the graph contains a cycle with no branches or nexuses\n\t */\n\tcontractPaths(isNexus=(()=>false)) {\n\n\t\t/* what makes a a vertex a nexus (start/end-point) */\n\t\tlet nexuses = new Set(\n\t\t\t[...this.vertices()]\n\t\t\t\t.filter(([key, val]) => this.outDegree(key) !== 1 || this.inDegree(key) !== 1 || isNexus(key, val))\n\t\t\t\t.map(([key]) => key)\n\t\t);\n\n\t\t/* error if there is a branch-less cycle */\n\t\t{\n\t\t\tlet unhandledVertices = new Set([...this.vertices()].map(([key])=>key));\n\t\t\tconst checkForBlCycle = (key) => {\n\t\t\t\tif (!unhandledVertices.has(key)) { return }\n\t\t\t\tunhandledVertices.delete(key);\n\t\t\t\tfor (let [next] of this.verticesFrom(key)) { checkForBlCycle(next) }\n\t\t\t\tfor (let [next] of this.verticesTo  (key)) { checkForBlCycle(next) }\n\t\t\t};\n\t\t\tfor (let key of nexuses) { checkForBlCycle(key) }\n\t\t\tif (unhandledVertices.size > 0) {\n\t\t\t\tlet startingKey = unhandledVertices.values().next().value,\n\t\t\t\t    cycle       = [],\n\t\t\t\t    current     = startingKey;\n\t\t\t\tdo {\n\t\t\t\t\tcycle.push(current);\n\t\t\t\t\tcurrent = this.verticesFrom(current).next().value[0];\n\t\t\t\t} while (current !== startingKey);\n\t\t\t\tthrow new Graph.BranchlessCycleError(cycle);\n\t\t\t}\n\t\t}\n\n\t\t/* bookkeeping */\n\t\tlet contractionsToAdd = new Map();\n\n\t\t/* register the path starting with the given edge */\n\t\tconst startPath = (start, next, backwards) => {\n\t\t\t/* functions to help branch on `backwards` */\n\t\t\tconst fromTo       = (strt = start, nxt = next) => backwards ? [nxt, strt] : [strt, nxt];\n\t\t\tconst verticesNext = (v) => backwards ? this.verticesTo(v) : this.verticesFrom(v);\n\n\t\t\t/* bookkeeping */\n\t\t\tlet verticesToRemove = new Set();\n\t\t\tlet edgesToRemove    = new Set();\n\t\t\tlet path = new Graph();\n\n\t\t\t/* process the start of the path */\n\t\t\tpath.addVertex(start, this.vertexValue(start));\n\t\t\tpath.addVertex(next,  this.vertexValue(next) );\n\t\t\tpath.addNewEdge(...fromTo(), this.edgeValue(...fromTo()));\n\t\t\tedgesToRemove.add(fromTo());\n\n\t\t\t/* process as [current, next] moves across the path */\n\t\t\tlet current;\n\t\t\twhile (!nexuses.has(next)) {\n\t\t\t\t[current, next] = [next, verticesNext(next).next().value[0]];\n\t\t\t\tpath.addVertex(next, this.vertexValue(next));\n\t\t\t\tpath.addNewEdge(...fromTo(current, next), this.edgeValue(...fromTo(current, next)));\n\t\t\t\tverticesToRemove.add(current);\n\t\t\t\tedgesToRemove.add(fromTo(current, next));\n\t\t\t}\n\n\t\t\t/* register new path contraction */\n\t\t\tif (!contractionsToAdd.get(fromTo()[0]))                  { contractionsToAdd.set(fromTo()[0], new Map())                    }\n\t\t\tif (!contractionsToAdd.get(fromTo()[0]).get(fromTo()[1])) { contractionsToAdd.get(fromTo()[0]).set(fromTo()[1], new Graph()) }\n\t\t\tcontractionsToAdd.get(fromTo()[0]).get(fromTo()[1]).mergeIn(path);\n\n\t\t\t/* remove old edges and vertices */\n\t\t\tfor (let key of edgesToRemove)    { this.removeExistingEdge(...key) }\n\t\t\tfor (let key of verticesToRemove) { this.destroyExistingVertex(key) }\n\t\t};\n\n\t\t/* process paths starting at all nexus points */\n\t\tfor (let first of nexuses) {\n\t\t\tfor (let [next] of this.verticesFrom(first)) { startPath(first, next, false) }\n\t\t\tfor (let [next] of this.verticesTo  (first)) { startPath(first, next, true)  }\n\t\t}\n\n\t\t/* add the replacement edges */\n\t\tfor (let [from, toVal] of contractionsToAdd)\n\t\t\tfor (let [to, rememberedPath] of toVal)\n\t\t\t\tthis.addNewEdge(from, to, rememberedPath);\n\t}\n\n\n\t////////////////////////////////\n\t////////// Assertions //////////\n\t////////////////////////////////\n\t\n\t[_expectVertices](...keys) {\n\t\tlet missingVertices = keys.filter(k => !this.hasVertex(k));\n\t\tif (missingVertices.length) { throw new Graph.VertexNotExistsError(...missingVertices) }\n\t}\n\n\t[_expectVerticesAbsent](...keys) {\n\t\tlet presentVertices = keys.filter(k => this.hasVertex(k));\n\t\tif (presentVertices.length) {\n\t\t\tthrow new Graph.VertexExistsError(...presentVertices.map(k => [k, this.vertexValue(k)]));\n\t\t}\n\t}\n\n\t[_expectEdges](...keys) {\n\t\tlet absentEdges = keys.filter(k => !this.hasEdge(...k));\n\t\tif (absentEdges.length) {\n\t\t\tthrow new Graph.EdgeNotExistsError(...absentEdges);\n\t\t}\n\t}\n\n\t[_expectEdgesAbsent](...keys) {\n\t\tlet presentEdges = keys.filter(k => this.hasEdge(...k));\n\t\tif (presentEdges.length) {\n\t\t\tthrow new Graph.EdgeExistsError(...presentEdges.map(k => [k, this.edgeValue(...k)]));\n\t\t}\n\t}\n\n\t[_expectNoConnectedEdges](key) {\n\t\tlet edges = [];\n\t\tfor (let [to]   of this.verticesFrom(key)) { edges.push([[key,  to ], this.edgeValue(key,  to )]) }\n\t\tfor (let [from] of this.verticesTo  (key)) { edges.push([[from, key], this.edgeValue(from, key)]) }\n\t\tif (edges.length) { throw new Graph.HasConnectedEdgesError(key, ...edges) }\n\t}\n\n}\n\n\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n//  // Errors //////////////////////////////////////////////////////////////////////////////////////\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @class\n * @classdesc This type of error is thrown when specific vertices are expected not to exist, but do.\n * @extends Error\n */\nGraph.VertexExistsError = class VertexExistsError extends Error {\n\tconstructor(...vertices) {\n\t\tsuper();\n\t\t/**\n\t\t * the set of relevant vertices as `[key, value]` shaped arrays\n\t\t * @public\n\t\t * @constant vertices\n\t\t * @memberof Graph.VertexExistsError\n\t\t * @instance\n\t\t * @type {Set.<Array>}\n\t\t */\n\t\tthis.vertices = new Set(vertices);\n\t\tthis.message = `This graph has ${\n\t\t\tthis.vertices.size === 1 ? \"a vertex\" : \"vertices\"\n\t\t} '${\n\t\t\t[...this.vertices].map(([key]) => key).join(`', '`)\n\t\t}'`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when specific vertices are expected to exist, but don't.\n * @extends Error\n */\nGraph.VertexNotExistsError = class VertexNotExistError extends Error {\n\tconstructor(...keys) {\n\t\tsuper();\n\t\t/**\n\t\t * the set of relevant vertex keys\n\t\t * @public\n\t\t * @constant vertices\n\t\t * @memberof Graph.VertexNotExistsError\n\t\t * @instance\n\t\t * @type {Set.<string>}\n\t\t */\n\t\tthis.vertices = new Set(keys);\n\t\tthis.message = `This graph does not have ${\n\t\t\tthis.vertices.size === 1 ? \"a vertex\" : \"vertices\"\n\t\t} '${\n\t\t\t[...this.vertices].join(`', '`)\n\t\t}'`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when specific edges are expected not to exist, but do.\n * @extends Error\n */\nGraph.EdgeExistsError = class EdgeExistsError extends Error {\n\tconstructor(...edges) {\n\t\tsuper();\n\t\t/**\n\t\t * the set of relevant edges as `[[from, to], value]` shaped arrays\n\t\t * @public\n\t\t * @constant edges\n\t\t * @memberof Graph.EdgeExistsError\n\t\t * @instance\n\t\t * @type {Set.<Array>}\n\t\t */\n\t\tthis.edges = new Set(edges);\n\t\tthis.message = `This graph has ${\n\t\t\tthis.edges.size === 1 ? \"an edge\" : \"edges\"\n\t\t} ${\n\t\t\t[...this.edges].map(([[from, to]]) => `['${from}', '${to}']`).join(`, `)\n\t\t}`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when specific edges are expected to exist, but don't.\n * @extends Error\n */\nGraph.EdgeNotExistsError = class EdgeNotExistsError extends Error {\n\tconstructor(...edges) {\n\t\tsuper();\n\t\t/**\n\t\t * the set of relevant edge keys as `[from, to]` shaped arrays\n\t\t * @public\n\t\t * @constant edges\n\t\t * @memberof Graph.EdgeNotExistsError\n\t\t * @instance\n\t\t * @type {Set.<Array.<string>>}\n\t\t */\n\t\tthis.edges = new Set(edges);\n\t\tthis.message = `This graph does not have ${\n\t\t\tthis.edges.size === 1 ? \"an edge\" : \"edges\"\n\t\t} ${\n\t\t\t[...this.edges].map(([from, to]) => `['${from}', '${to}']`).join(`, `)\n\t\t}`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when a vertex is expected not to have any connected edges, but does.\n * @extends Graph.EdgeExistsError\n */\nGraph.HasConnectedEdgesError = class HasConnectedEdgesError extends Graph.EdgeExistsError {\n\tconstructor(key, ...edges) {\n\t\tsuper(...edges);\n\t\t/**\n\t\t * the key of the vertex that has connected edges\n\t\t * @public\n\t\t * @constant vertex\n\t\t * @memberof Graph.HasConnectedEdgesError\n\t\t * @instance\n\t\t * @type {string}\n\t\t */\n\t\tthis.vertex = key;\n\t\tthis.message = `The '${key}' vertex has connected ${\n\t\t\tthis.edges.size === 1 ? \"an edge\" : \"edges\"\n\t\t} ${\n\t\t\t[...this.edges].map(([[from, to]]) => `['${from}', '${to}']`).join(`, `)\n\t\t}`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when a graph is expected not to have a directed cycle, but does.\n * @extends Error\n */\nGraph.CycleError = class CycleError extends Error {\n\tconstructor(cycle) {\n\t\tsuper();\n\t\t/**\n\t\t * the vertices involved in the cycle, in order but with an unspecified starting point\n\t\t * @public\n\t\t * @constant cycle\n\t\t * @memberof Graph.CycleError\n\t\t * @instance\n\t\t * @type {Array.<string>}\n\t\t */\n\t\tthis.cycle = cycle;\n\t\tthis.message = `This graph contains a cycle: ${cycle}`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when a graph is expected not to have a branch-less directed cycle, but does.\n * @extends Graph.CycleError\n */\nGraph.BranchlessCycleError = class BranchlessCycleError extends Graph.CycleError {\n\tconstructor(cycle) {\n\t\tsuper(cycle);\n\t\tthis.message = `This graph contains a branch-less cycle: ${cycle}`;\n\t}\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/graph.es6.js\n **/"]}