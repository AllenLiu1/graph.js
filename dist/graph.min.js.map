{"version":3,"file":"graph.js","sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///webpack/bootstrap dcf92d94ec0629b851d0?d1eb","webpack:///./src/graph.es6.js?8eb6"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","id","loaded","modules","call","m","c","p","_vertices","Symbol","_edges","_reverseEdges","_sources","_sinks","_edgeCount","_listeners","_trigger","_verticesFrom","_verticesTo","_verticesWithPathTo","_verticesWithPathFrom","_paths","_expectVertices","_expectVertexAbsent","_expectEdge","_expectEdgeAbsent","_expectNoConnectedEdges","Graph","parts","Array","_len","_key","arguments","Map","Set","_iterator","iterator","_step","_iteratorNormalCompletion","next","done","key","_step$value","value","isArray","from","_key2","to","createEdge","addVertex","on","event","handler","has","set","get","add","off","_iterator2","_step2","_iteratorNormalCompletion2","addNewVertex","setVertex","ensureVertex","hasVertex","removeExistingVertex","destroyExistingVertex","_iterator3","verticesFrom","_step3","_iteratorNormalCompletion3","_step3$value","removeEdge","_iterator4","verticesTo","_step4","_iteratorNormalCompletion4","_step4$value","removeVertex","destroyVertex","vertexCount","size","vertexValue","addNewEdge","createNewEdge","setEdge","spanEdge","hasEdge","addEdge","ensureEdge","removeExistingEdge","inDegree","outDegree","edgeCount","edgeValue","undefined","vertices","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","_step5$value","edges","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_iterator6","_step6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_iterator7","_step7","keys","callee$1$0","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_iterator8","_step8","callee$1$1","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_iterator9","_step9","verticesWithPathFrom","callee$1$2","_step10","verticesWithPathTo","callee$1$3","_step11","sources","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_iterator12","_step12","sinks","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_iterator13","_step13","vertices_topologically","visited","handled","_this","visit","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_iterator15","_step15","_step15$value","a","i","cycle","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_iterator14","_step14","_step14$value","b","push","indexOf","length","slice","reverse","CycleError","pop","map","regeneratorRuntime","mark","clearEdges","_iterator16","_step16","_iteratorNormalCompletion16","_step16$value","clear","_iterator17","_step17","_iteratorNormalCompletion17","v","_step17$value","equals","other","eqV","x","y","eqE","_iterator18","_step18","_iteratorNormalCompletion18","_step18$value","_iterator19","_step19","_iteratorNormalCompletion19","_step19$value","apply","cycles","pointStack","markedStack","backtrack","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_iterator20","_step20","_step20$value","out","w","o","u","_arr$_i","found","result","hasCycle","paths","callee$1$4","stack","pathsFromPrefix","current","_step21$value","path","hasPath","degree","mergeIn","mV","mE","v1","v2","_iterator22","_step22","_iteratorNormalCompletion22","_step22$value","_iterator23","_step23","_iteratorNormalCompletion23","_step23$value","clone","trV","trE","transitiveReduction","_iterator24","_step24","_iteratorNormalCompletion24","_step24$value","_iterator25","_step25","_iteratorNormalCompletion25","_step25$value","_iterator26","_step26","_iteratorNormalCompletion26","z","_step26$value","contractPaths","isNexus","nexuses","concat","_toConsumableArray","filter","_ref","_ref2","val","_this2","_ref3","_ref32","unhandledVertices","_ref4","_ref42","checkForBlCycle","_iterator27","_step27","_iteratorNormalCompletion27","_step27$value","_iterator28","_step28","_iteratorNormalCompletion28","_step28$value","_iterator29","_iteratorNormalCompletion29","_step29","startingKey","values","BranchlessCycleError","contractionsToAdd","startPath","start","backwards","fromTo","strt","nxt","verticesNext","verticesToRemove","edgesToRemove","_ref5","_iterator30","_step30","_iteratorNormalCompletion30","_iterator31","_step31","_iteratorNormalCompletion31","_iterator32","_step32","_iteratorNormalCompletion32","first","_iterator34","_step34","_iteratorNormalCompletion34","_step34$value","_iterator35","_step35","_iteratorNormalCompletion35","_step35$value","_iterator33","_step33","_iteratorNormalCompletion33","_step33$value","toVal","_iterator36","_step36","_iteratorNormalCompletion36","_step36$value","rememberedPath","key1","key2","VertexNotExistsError","VertexExistsError","_ref6","_ref62","EdgeNotExistsError","_ref7","_ref72","EdgeExistsError","_iterator37","_step37","_iteratorNormalCompletion37","_step37$value","_iterator38","_step38","_iteratorNormalCompletion38","_step38$value","HasConnectedEdgesError","_Error","_get","Object","getPrototypeOf","prototype","message","_ref8","_ref82","join","Error","_Error2","VertexNotExistError","_Error3","_ref9","_ref92$0","_Error4","_ref10","_ref102","_Graph$EdgeExistsError","vertex","_ref11","_ref112$0","_Error5","_Graph$CycleError"],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Graph\"] = factory();\n\telse\n\t\troot[\"Graph\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap dcf92d94ec0629b851d0\n **/","'use strict';\n\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n//  // Symbols for private members /////////////////////////////////////////////////////////////////\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n\nconst _vertices     = Symbol(\"vertices\");\nconst _edges        = Symbol(\"edges\");\nconst _reverseEdges = Symbol(\"reverse edges\");\nconst _sources      = Symbol(\"sources\");\nconst _sinks        = Symbol(\"sinks\");\nconst _edgeCount    = Symbol(\"edge count\");\n\nconst _listeners = Symbol(\"listeners\");\nconst _trigger   = Symbol(\"trigger\");\n\nconst _verticesFrom         = Symbol(\"vertices from\");\nconst _verticesTo           = Symbol(\"vertices to\");\nconst _verticesWithPathTo   = Symbol(\"vertices with path to\");\nconst _verticesWithPathFrom = Symbol(\"vertices with path from\");\nconst _paths                = Symbol(\"paths\");\n\nconst _expectVertices         = Symbol(\"expect vertices\");\nconst _expectVertexAbsent     = Symbol(\"expect vertex absent\");\nconst _expectEdge             = Symbol(\"expect edge\");\nconst _expectEdgeAbsent       = Symbol(\"expect edge absent\");\nconst _expectNoConnectedEdges = Symbol(\"expect no connected edges\");\n\n\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n//  // Graph class /////////////////////////////////////////////////////////////////////////////////\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @class Graph\n * @classdesc The main class of this library, to be used for representing a mathematical (di)graph.\n *\n * @description Constructor arguments can be used to supply initial vertices and edges.\n * @param ...parts {Array.<Array>}\n *        a short notation for vertices and edges to initially add to the graph;\n *        A vertex should be an array of the form `[key, value]`.\n *        An edge should be an array of the form `[[from, to], value]`.\n *        Later values of vertices or edges in this list will overwrite earlier\n *        values, but vertices need not precede their edges. Vertices that are\n *        connected but store no value need not be listed at all.\n * @example\n * var map = new Graph(\n *     ['Amsterdam',             { population: 825000 }], // vertex\n *     ['Leiden',                { population: 122000 }], // vertex\n *     [['Amsterdam', 'Leiden'], { distance:   \"40km\" }]  // edge\n * );\n */\nexport default class Graph {\n\n\tconstructor(...parts) {\n\t\t/* storage */\n\t\tthis[_vertices]     = new Map(); // Map.< string, * >\n\t\tthis[_edges]        = new Map(); // Map.< string, Map.<string, *> >\n\n\t\t/* bookkeeping */\n\t\tthis[_reverseEdges] = new Map(); // Map.< string, Set.<*> >\n\t\tthis[_sources]      = new Set(); // Set.< string >\n\t\tthis[_sinks]        = new Set(); // Set.< string >\n\t\tthis[_edgeCount]    = 0;\n\n\t\t/* listeners */\n\t\tthis[_listeners] = new Map();\n\n\t\t/* add vertices and values from constructor arguments */\n\t\tfor (let [key, value] of parts) {\n\t\t\tif (Array.isArray(key)) {/////////////// an edge\n\t\t\t\tlet [from, to] = key;\n\t\t\t\tthis.createEdge(from, to, value);\n\t\t\t} else {//////////////////////////////// a vertex\n\t\t\t\tthis.addVertex(key, value);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/////////////////////////////////////\n\t////////// Event Handling //////////\n\t/////////////////////////////////////\n\n\t/**\n\t * Register an event handler.\n\t * @param event   {string}   the event to listen for\n\t * @param handler {Function} the function to call for each such event fired, receiving its corresponding value\n\t */\n\ton(event, handler) {\n\t\tif (!this[_listeners].has(event)) {\n\t\t\tthis[_listeners].set(event, new Set());\n\t\t}\n\t\tthis[_listeners].get(event).add(handler);\n\t}\n\n\t/**\n\t * Deregister a previously registered event handler.\n\t * @param event   {string}   the event used to originally register a handler\n\t * @param handler {Function} the handler originally registered\n\t */\n\toff(event, handler) {\n\t\tif (this[_listeners].has(event)) {\n\t\t\tthis[_listeners].get(event).delete(handler);\n\t\t}\n\t}\n\n\t[_trigger](event, value) {\n\t\tfor (let handler of this[_listeners].get(event) || []) {\n\t\t\thandler(value);\n\t\t}\n\t}\n\n\t/**\n\t * An event that is triggered just after a vertex is added to this graph.\n\t * Handlers receive the new vertex `[key, value]` as an argument.\n\t * @event vertex-added\n\t * @memberof Graph\n\t * @instance\n\t * @see {@link Graph#on}\n\t * @see {@link Graph#off}\n\t */\n\t/**\n\t * An event that is triggered just after a vertex is removed from this graph.\n\t * Handlers receive the vertex key as an argument.\n\t * @event vertex-removed\n\t * @memberof Graph\n\t * @instance\n\t * @see {@link Graph#on}\n\t * @see {@link Graph#off}\n\t */\n\t/**\n\t * An event that is triggered after a vertex in this graph is modified.\n\t * It is also triggered after any {@link #Graph#event_vertex-added|\"vertex-added\"} event.\n\t * Handlers receive the vertex `[key, value]` as an argument.\n\t * @event vertex-modified\n\t * @memberof Graph\n\t * @instance\n\t * @see {@link Graph#on}\n\t * @see {@link Graph#off}\n\t */\n\t/**\n\t * An event that is triggered just after an edge is added to this graph.\n\t * Handlers receive the new edge `[[from, to], value]` as an argument.\n\t * @event edge-added\n\t * @memberof Graph\n\t * @instance\n\t * @see {@link Graph#on}\n\t * @see {@link Graph#off}\n\t */\n\t/**\n\t * An event that is triggered just after an edge is removed from this graph.\n\t * Handlers receive the edge key `[from, to]` as an argument.\n\t * @event edge-removed\n\t * @memberof Graph\n\t * @instance\n\t * @see {@link Graph#on}\n\t * @see {@link Graph#off}\n\t */\n\t/**\n\t * An event that is triggered after an edge in this graph is modified.\n\t * It is also triggered after any {@link #Graph#event_edge-added|\"edge-added\"} event.\n\t * Handlers receive the edge `[[from, to], value]` as an argument.\n\t * @event edge-modified\n\t * @memberof Graph\n\t * @instance\n\t * @see {@link Graph#on}\n\t * @see {@link Graph#off}\n\t */\n\n\n\t//////////////////////////////\n\t////////// Vertices //////////\n\t//////////////////////////////\n\n\t////////// creating them //////////\n\n\t/**\n\t * Add a new vertex to this graph.\n\t * @throws {Graph.VertexExistsError} if a vertex with this key already exists\n\t * @param  key    {string} the key with which to refer to this new vertex\n\t * @param [value] {*}      the value to store in this new vertex\n\t */\n\taddNewVertex(key, value) {\n\t\tthis[_expectVertexAbsent](key);\n\t\tthis[_vertices].set(key, value);\n\t\tthis[_edges].set(key, new Map());\n\t\tthis[_reverseEdges].set(key, new Set());\n\t\tthis[_sources].add(key);\n\t\tthis[_sinks].add(key);\n\t\tthis[_trigger]('vertex-added',    [key, value]);\n\t\tthis[_trigger]('vertex-modified', [key, value]);\n\t}\n\n\t/**\n\t * Set the value of an existing vertex in this graph.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param  key    {string} the key belonging to the vertex\n\t * @param [value] {*}      the value to store in this vertex\n\t */\n\tsetVertex(key, value) {\n\t\tthis[_expectVertices](key);\n\t\tthis[_vertices].set(key, value);\n\t\tthis[_trigger]('vertex-modified', [key, value]);\n\t}\n\n\t/**\n\t * Make sure a vertex with a specific key exists in this graph. If it already exists,\n\t * do nothing. If it does not yet exist, add a new vertex with the given value.\n\t * @param  key    {string} the key for the vertex\n\t * @param [value] {*}      the value to store if a new vertex is added\n\t */\n\tensureVertex(key, value) {\n\t\tif (!this.hasVertex(key)) {\n\t\t\tthis.addNewVertex(key, value);\n\t\t}\n\t}\n\n\t/**\n\t * Add a new vertex to this graph. If a vertex with this key already exists,\n\t * the value of that vertex is overwritten.\n\t * @param  key    {string} the key with which to refer to this new vertex\n\t * @param [value] {*}      the value to store in this new vertex\n\t */\n\taddVertex(key, value) {\n\t\tif (this.hasVertex(key)) {\n\t\t\tthis.setVertex(key, value);\n\t\t} else {\n\t\t\tthis.addNewVertex(key, value);\n\t\t}\n\t}\n\n\n\t////////// removing them //////////\n\n\t/**\n\t * Remove an existing vertex from this graph.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @throws {Graph.HasConnectedEdgesError} if there are still edges connected to this vertex\n\t * @param key {string} the key of the vertex to remove\n\t */\n\tremoveExistingVertex(key) {\n\t\tthis[_expectVertices](key);\n\t\tthis[_expectNoConnectedEdges](key);\n\t\tthis[_vertices].delete(key);\n\t\tthis[_sources].delete(key);\n\t\tthis[_sinks].delete(key);\n\t\tthis[_trigger]('vertex-removed', key);\n\t}\n\n\t/**\n\t * Remove an existing vertex from this graph, as well as all edges connected to it.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param key {string} the key of the vertex to remove\n\t */\n\tdestroyExistingVertex(key) {\n\t\tthis[_expectVertices](key);\n\t\tfor (let [to] of this.verticesFrom(key)) { this.removeEdge(key,  to ) }\n\t\tfor (let [from] of this.verticesTo(key)) { this.removeEdge(from, key) }\n\t\tthis.removeExistingVertex(key);\n\t}\n\n\t/**\n\t * Remove an existing vertex from this graph.\n\t * If a vertex with this key does not exist, nothing happens.\n\t * @throws {Graph.HasConnectedEdgesError} if there are still edges connected to this vertex\n\t * @param key {string} the key of the vertex to remove\n\t */\n\tremoveVertex(key) {\n\t\tif (this.hasVertex(key)) {\n\t\t\tthis.removeExistingVertex(key);\n\t\t}\n\t}\n\n\t/**\n\t * Remove a vertex from this graph, as well as all edges connected to it.\n\t * If a vertex with this key does not exist, nothing happens.\n\t * @param key {string} the key of the vertex to remove\n\t */\n\tdestroyVertex(key) {\n\t\tif (this.hasVertex(key)) {\n\t\t\tthis.destroyExistingVertex(key);\n\t\t}\n\t}\n\n\n\t////////// querying them //////////\n\n\t/**\n\t * @returns {number} the number of vertices in the whole graph\n\t */\n\tvertexCount() { return this[_vertices].size }\n\n\t/**\n\t * Ask whether a vertex with a given key exists.\n\t * @param key {string} the key to query\n\t * @returns {boolean} whether there is a vertex with the given key\n\t */\n\thasVertex(key) { return this[_vertices].has(key) }\n\n\t/**\n\t * Get the value associated with the vertex of a given key.\n\t * @param key {string} the key to query\n\t * @returns {*} the value associated with the vertex of the given key.\n\t * Note that a return value of `undefined` can mean\n\t *\n\t * 1. that there is no such vertex, or\n\t * 2. that the stored value is actually `undefined`.\n\t *\n\t * Use {@link Graph#hasVertex} to distinguish these cases.\n\t */\n\tvertexValue(key) { return this[_vertices].get(key) }\n\n\n\t///////////////////////////\n\t////////// Edges //////////\n\t///////////////////////////\n\n\t////////// adding them //////////\n\n\t/**\n\t * Add a new edge to this graph.\n\t * @throws {Graph.EdgeExistsError} if an edge between `from` and `to` already exists\n\t * @throws {Graph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store in this new edge\n\t */\n\taddNewEdge(from, to, value) {\n\t\tthis[_expectEdgeAbsent]([from, to]);\n\t\tthis[_expectVertices](from, to);\n\t\tthis[_edges].get(from).set(to, value);\n\t\tthis[_reverseEdges].get(to).add(from);\n\t\tthis[_edgeCount] += 1;\n\t\tthis[_sources].delete(to);\n\t\tthis[_sinks].delete(from);\n\t\tthis[_trigger]('edge-added',    [[from, to], value]);\n\t\tthis[_trigger]('edge-modified', [[from, to], value]);\n\t}\n\n\t/**\n\t * Add a new edge to this graph. If the `from` and/or `to` vertices do not yet exist\n\t * in the graph, they are implicitly added with an `undefined` value.\n\t * @throws {Graph.EdgeExistsError} if an edge between `from` and `to` already exists\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store in this new edge\n\t */\n\tcreateNewEdge(from, to, value) {\n\t\tthis[_expectEdgeAbsent]([from, to]);\n\t\tthis.ensureVertex(from);\n\t\tthis.ensureVertex(to);\n\t\tthis.addNewEdge(from, to, value);\n\t}\n\n\t/**\n\t * Set the value of an existing edge in this graph.\n\t * @throws {Graph.EdgeNotExistsError} if an edge between `from` and `to` does not yet exist\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store in this edge\n\t */\n\tsetEdge(from, to, value) {\n\t\tthis[_expectEdge]([from, to]);\n\t\tthis[_edges].get(from).set(to, value);\n\t\tthis[_trigger]('edge-modified', [[from, to], value]);\n\t}\n\n\t/**\n\t * Make sure an edge between the `from` and `to` vertices in this graph.\n\t * If one already exists, nothing is done.\n\t * If one does not yet exist, a new edge is added with the given value.\n\t * @throws {Graph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store if a new edge is added\n\t */\n\tspanEdge(from, to, value) {\n\t\tthis[_expectVertices](from, to);\n\t\tif (!this.hasEdge(from, to)) {\n\t\t\tthis.addNewEdge(from, to, value);\n\t\t}\n\t}\n\n\t/**\n\t * Add a new edge to this graph. If an edge between `from` and `to` already exists,\n\t * the value of that edge is overwritten.\n\t * @throws {Graph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store in this new edge\n\t */\n\taddEdge(from, to, value) {\n\t\tif (this.hasEdge(from, to)) {\n\t\t\tthis.setEdge(from, to, value);\n\t\t} else {\n\t\t\tthis.addNewEdge(from, to, value);\n\t\t}\n\t}\n\n\t/**\n\t * Make sure an edge between the `from` and `to` vertices exists in this graph.\n\t * If it already exists, nothing is done.\n\t * If it does not yet exist, a new edge is added with the given value.\n\t * If the `from` and/or `to` vertices do not yet exist\n\t * in the graph, they are implicitly added with an `undefined` value.\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store if a new edge is added\n\t */\n\tensureEdge(from, to, value) {\n\t\tif (!this.hasEdge(from, to)) {\n\t\t\tthis.createNewEdge(from, to, value);\n\t\t}\n\t}\n\n\t/**\n\t * Add a new edge to this graph. If an edge between the `from` and `to`\n\t * vertices already exists, the value of that edge is overwritten.\n\t * If the `from` and/or `to` vertices do not yet exist\n\t * in the graph, they are implicitly added with an `undefined` value.\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store if a new edge is added\n\t */\n\tcreateEdge(from, to, value) {\n\t\tif (this.hasEdge(from, to)) {\n\t\t\tthis.setEdge(from, to, value);\n\t\t} else {\n\t\t\tthis.createNewEdge(from, to, value);\n\t\t}\n\t}\n\n\n\t////////// removing them //////////\n\n\t/**\n\t * Remove an existing edge from this graph.\n\t * @throws {Graph.EdgeNotExistsError} if an edge between the `from` and `to` vertices doesn't exist\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t */\n\tremoveExistingEdge(from, to) {\n\t\tthis[_expectEdge]([from, to]);\n\t\tthis[_edges].get(from).delete(to);\n\t\tthis[_reverseEdges].get(to).delete(from);\n\t\tthis[_edgeCount] -= 1;\n\t\tif (this. inDegree(to)   === 0) { this[_sources].add(to) }\n\t\tif (this.outDegree(from) === 0) { this[_sinks].add(from) }\n\t\tthis[_trigger]('edge-removed', [from, to]);\n\t}\n\n\t/**\n\t * Remove an edge from this graph.\n\t * If an edge between the `from` and `to` vertices doesn't exist, nothing happens.\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t */\n\tremoveEdge(from, to) {\n\t\tif (this.hasEdge(from, to)) {\n\t\t\tthis.removeExistingEdge(from, to);\n\t\t}\n\t}\n\n\n\t////////// querying them //////////\n\n\t/**\n\t * @returns {number} the number of edges in the whole graph\n\t */\n\tedgeCount() { return this[_edgeCount] }\n\n\t/**\n\t * Ask whether an edge between given `from` and `to` vertices exist.\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t * @returns {boolean} whether there is an edge between the given `from` and `to` vertices\n\t */\n\thasEdge(from, to) {\n\t\treturn this.hasVertex(from) &&\n\t\t\tthis.hasVertex(to) &&\n\t\t\tthis[_edges].has(from) &&\n\t\t\tthis[_edges].get(from).has(to);\n\t}\n\n\t/**\n\t * Get the value associated with the edge between given `from` and `to` vertices.\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t * @returns {*} the value associated with the edge between the given `from` and `to` vertices\n\t * Note that a return value of `undefined` can mean\n\t *\n\t * 1. that there is no such edge, or\n\t * 2. that the stored value is actually `undefined`.\n\t *\n\t * Use {@link Graph#hasEdge} to distinguish these cases.\n\t */\n\tedgeValue(from, to) {\n\t\treturn this.hasEdge(from, to) ? this[_edges].get(from).get(to) : undefined;\n\t}\n\n\n\t///////////////////////////////////////////////\n\t//////////// ES6 Iterable interfaces //////////\n\t///////////////////////////////////////////////\n\n\t/**\n\t * Iterate over all vertices of the graph, in no particular order.\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.vertices(), kv; !(kv = it.next()).done;) {\n\t *     var key   = kv.value[0],\n\t *         value = kv.value[1];\n\t *     // iterates over all vertices of the graph\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.vertices()) {\n\t *     // iterates over all vertices of the graph\n\t * }\n\t * @see {@link Graph#@@iterator}\n\t */\n\t*vertices() {\n\t\tlet done = new Set();\n\t\tfor (let [key, value] of this[_vertices]) {\n\t\t\tif (this.hasVertex(key) && !done.has(key)) {\n\t\t\t\tdone.add(key);\n\t\t\t\tyield [key, value];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * A {@link Graph} object is itself {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol|iterable},\n\t * and serves as a short notation in ECMAScript 6 to iterate over all vertices in the graph, in no particular order.\n\t * @method Graph#@@iterator\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (let [key, value] of graph) {\n\t *     // iterates over all vertices of the graph\n\t * }\n\t * @see {@link Graph#vertices}\n\t */\n\t[Symbol.iterator]() { return this.vertices() }\n\n\t/**\n\t * Iterate over all edges of the graph, in no particular order.\n\t * @returns { Iterator.<string, string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.edges(), kv; !(kv = it.next()).done;) {\n\t *     var from  = kv.value[0],\n\t *         to    = kv.value[1],\n\t *         value = kv.value[2];\n\t *     // iterates over all edges of the graph\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [from, to, value] of graph.edges()) {\n\t *     // iterates over all vertices of the graph\n\t * }\n\t */\n\t*edges() {\n\t\tlet done = new Map();\n\t\tfor (let from of this[_edges].keys()) {\n\t\t\tdone.set(from, new Set());\n\t\t\tfor (let to of this[_edges].get(from).keys()) {\n\t\t\t\tif (this.hasEdge(from, to) && !done.get(from).has(to)) {\n\t\t\t\t\tdone.get(from).add(to);\n\t\t\t\t\tyield [from, to, this[_edges].get(from).get(to)];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over the outgoing edges of a given vertex in the graph, in no particular order.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with the given `from` key does not exist\n\t * @param from {string} the key of the vertex to take the outgoing edges from\n\t * @returns { Iterator.<string, *, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.verticesFrom(from), kv; !(kv = it.next()).done;) {\n\t *     var to          = kv.value[0],\n\t *         vertexValue = kv.value[1],\n\t *         edgeValue   = kv.value[2];\n\t *     // iterates over all outgoing vertices of the `from` vertex\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [to, vertexValue, edgeValue] of graph.verticesFrom(from)) {\n\t *     // iterates over all outgoing edges of the `from` vertex\n\t * }\n\t */\n\tverticesFrom(from) {\n\t\tthis[_expectVertices](from);\n\t\treturn this[_verticesFrom](from);\n\t}\n\t*[_verticesFrom](from) {\n\t\tlet done = new Set();\n\t\tfor (let to of this[_edges].get(from).keys()) {\n\t\t\tif (this.hasEdge(from, to) && !done.has(to)) {\n\t\t\t\tdone.add(to);\n\t\t\t\tyield [to, this[_vertices].get(to), this[_edges].get(from).get(to)];\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Iterate over the incoming edges of a given vertex in the graph, in no particular order.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with the given `to` key does not exist\n\t * @param to {string} the key of the vertex to take the incoming edges from\n\t * @returns { Iterator.<string, *, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.verticesTo(to), kv; !(kv = it.next()).done;) {\n\t *     var from        = kv.value[0],\n\t *         vertexValue = kv.value[1],\n\t *         edgeValue   = kv.value[2];\n\t *     // iterates over all outgoing vertices of the `from` vertex\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [from, vertexValue, edgeValue] of graph.verticesTo(to)) {\n\t *     // iterates over all incoming edges of the `to` vertex\n\t * }\n\t */\n\tverticesTo(to) {\n\t\tthis[_expectVertices](to);\n\t\treturn this[_verticesTo](to);\n\t}\n\t*[_verticesTo](to) {\n\t\tlet done = new Set();\n\t\tfor (let from of this[_reverseEdges].get(to)) {\n\t\t\tif (this.hasEdge(from, to) && !done.has(from)) {\n\t\t\t\tdone.add(from);\n\t\t\t\tyield [from, this[_vertices].get(from), this[_edges].get(from).get(to)];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over all vertices reachable from a given vertex in the graph, in no particular order.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with the given `from` key does not exist\n\t * @param from {string} the key of the vertex to take the reachable vertices from\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.verticesWithPathFrom(from), kv; !(kv = it.next()).done;) {\n\t *     var key   = kv.value[0],\n\t *         value = kv.value[1];\n\t *     // iterates over all vertices reachable from `from`\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.verticesWithPathFrom(from)) {\n\t *     // iterates over all vertices reachable from `from`\n\t * }\n\t */\n\tverticesWithPathFrom(from) {\n\t\tthis[_expectVertices](from);\n\t\treturn this[_verticesWithPathFrom](from, new Set());\n\t}\n\t*[_verticesWithPathFrom](from, done) {\n\t\tfor (let to of this[_edges].get(from).keys()) {\n\t\t\tif (this.hasEdge(from, to) && !done.has(to)) {\n\t\t\t\tdone.add(to);\n\t\t\t\tyield [to, this[_vertices].get(to)];\n\t\t\t\tyield* this[_verticesWithPathFrom](to, done);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over all vertices from which a given vertex in the graph can be reached, in no particular order.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with the given `to` key does not exist\n\t * @param to {string} the key of the vertex to take the reachable vertices from\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.verticesWithPathTo(to), kv; !(kv = it.next()).done;) {\n\t *     var key   = kv.value[0],\n\t *         value = kv.value[1];\n\t *     // iterates over all vertices from which `to` can be reached\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.verticesWithPathTo(to)) {\n\t *     // iterates over all vertices from which `to` can be reached\n\t * }\n\t */\n\tverticesWithPathTo(to) {\n\t\tthis[_expectVertices](to);\n\t\treturn this[_verticesWithPathTo](to, new Set());\n\t}\n\t*[_verticesWithPathTo](to, done) {\n\t\tfor (let from of this[_reverseEdges].get(to)) {\n\t\t\tif (this.hasEdge(from, to) && !done.has(from)) {\n\t\t\t\tdone.add(from);\n\t\t\t\tyield [from, this[_vertices].get(from)];\n\t\t\t\tyield* this[_verticesWithPathTo](from, done);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Iterate over all vertices that have no incoming edges, in no particular order.\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.sources(), kv; !(kv = it.next()).done;) {\n\t *     var key   = kv.value[0],\n\t *         value = kv.value[1];\n\t *     // iterates over all vertices with no incoming edges\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.sources()) {\n\t *     // iterates over all vertices with no incoming edges\n\t * }\n\t */\n\t*sources() {\n\t\tlet done = new Set();\n\t\tfor (let key of this[_sources]) {\n\t\t\tif (this.hasVertex(key) && !done.has(key)) {\n\t\t\t\tdone.add(key);\n\t\t\t\tyield [key, this.vertexValue(key)];\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Iterate over all vertices that have no outgoing edges, in no particular order.\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.sinks(), kv; !(kv = it.next()).done;) {\n\t *     var key   = kv.value[0],\n\t *         value = kv.value[1];\n\t *     // iterates over all vertices with no outgoing edges\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.sinks()) {\n\t *     // iterates over all vertices with no outgoing edges\n\t * }\n\t */\n\t*sinks() {\n\t\tlet done = new Set();\n\t\tfor (let key of this[_sinks]) {\n\t\t\tif (this.hasVertex(key) && !done.has(key)) {\n\t\t\t\tdone.add(key);\n\t\t\t\tyield [key, this.vertexValue(key)];\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Iterate over all vertices of the graph in topological order.\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.vertices_topologically(), kv; !(kv = it.next()).done;) {\n\t *     var key   = kv.value[0],\n\t *         value = kv.value[1];\n\t *     // iterates over all vertices of the graph in topological order\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.vertices_topologically()) {\n\t *     // iterates over all vertices of the graph in topological order\n\t * }\n\t */\n\t*vertices_topologically() {\n\t\tlet visited = []; // stack\n\t\tlet handled = new Set();\n\n\t\tlet _this = this;\n\t\tfunction *visit(a) {\n\t\t\tvisited.push(a);\n\t\t\tlet i = visited.indexOf(a);\n\t\t\tif (i !== visited.length - 1) {\n\t\t\t\tlet cycle = visited.slice(i + 1).reverse();\n\t\t\t\tthrow new Graph.CycleError(cycle);\n\t\t\t}\n\t\t\tif (!handled.has(a)) {\n\t\t\t\tfor (let [b] of _this.verticesTo(a)) {\n\t\t\t\t\tyield* visit(b);\n\t\t\t\t}\n\t\t\t\tif (_this.hasVertex(a)) {\n\t\t\t\t\tyield [a, _this[_vertices].get(a)];\n\t\t\t\t}\n\t\t\t\thandled.add(a);\n\t\t\t}\n\t\t\tvisited.pop();\n\t\t}\n\t\tfor (let [a] of this.vertices()) {\n\t\t\tif (!handled.has(a)) {\n\t\t\t\tyield* visit(a);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t//////////////////////////////\n\t////////// Clearing //////////\n\t//////////////////////////////\n\n\t/**\n\t * Remove all edges from the graph, but leave the vertices intact.\n\t */\n\tclearEdges() {\n\t\tfor (let [from, to] of this.edges()) { this.removeEdge(from, to) }\n\t}\n\n\t/**\n\t * Remove all edges and vertices from the graph, putting it back in its initial state.\n\t */\n\tclear() {\n\t\tfor (let [v] of this.vertices()) { this.destroyVertex(v) }\n\t}\n\n\n\t////////////////////////////////////////\n\t////////// (Advanced) Queries //////////\n\t////////////////////////////////////////\n\n\n\t/**\n\t * Ask whether `this` graph and a given `other` graph are equal.\n\t * Two graphs are equal if they have the same vertices and the same edges.\n\t * @param other {Graph} the other graph to compare to `this` one\n\t * @param [eqV] {function(*, *, string): boolean}\n\t *     a custom equality function for values stored in vertices;\n\t *     defaults to `===` comparison; The first two arguments are the\n\t *     values to compare. The third is the corresponding `key`.\n\t * @param [eqE] {function(*, *, string, string): boolean}\n\t *     a custom equality function for values stored in edges;\n\t *     defaults to the function given for `trV`; The first two arguments\n\t *     are the values to compare. The third and fourth are the `from`\n\t *     and `to` keys respectively.\n\t * @returns {boolean} `true` if the two graphs are equal; `false` otherwise\n\t */\n\tequals(other, eqV=(x,y)=>(x===y), eqE=eqV) {\n\t\tif (!(other instanceof Graph))                  { return false }\n\t\tif (this.vertexCount() !== other.vertexCount()) { return false }\n\t\tif (this.edgeCount()   !== other.edgeCount()  ) { return false }\n\t\tfor (let [key, value] of this.vertices()) {\n\t\t\tif (!other.hasVertex(key))                    { return false }\n\t\t\tif (!eqV(value, other.vertexValue(key), key)) { return false }\n\t\t}\n\t\tfor (let [from, to, value] of this.edges()) {\n\t\t\tif (!other.hasEdge(from, to))                         { return false }\n\t\t\tif (!eqE(value, other.edgeValue(from, to), from, to)) { return false }\n\t\t}\n\t\treturn true;\n\t}\n\n\n\t/**\n\t * Iterate over all simple directed cycles in this graph, in no particular order.\n\t * If you mutate the graph in between iterations, behavior of the iterator\n\t * becomes unspecified. (So, don't.)\n\t * @returns { Iterator.< Array.<string> > }\n\t *          an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}.\n\t *          Each iterated value is an array containing the vertex keys describing the cycle.\n\t *          These arrays will contain each vertex key only once — even the first/last one.\n\t * @example\n\t * for (var it = graph.cycles(), kv; !(kv = it.next()).done;) {\n\t *     var cycle = kv.value;\n\t *     // iterates over all cycles of the graph\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let cycle of graph.cycles()) {\n\t *     // iterates over all cycles of the graph\n\t * }\n\t */\n\t*cycles() {\n\t\t// This algorithm is based on the following article:\n\t\t// Enumeration of the elementary circuits of a directed graph\n\t\t// R. Tarjan, SIAM Journal on Computing, 2 (1973), pp. 211-216\n\t\t// http://dx.doi.org/10.1137/0202017\n\t\t// -----\n\t\t// TODO: implement the improved version as defined by Johnson:\n\t\t// Finding all the elementary circuits of a directed graph.\n\t\t// D. B. Johnson, SIAM Journal on Computing 4, no. 1, 77-84, 1975.\n\t\t// http://dx.doi.org/10.1137/0204007\n\n\t\t/* bookkeeping */\n\t\tlet pointStack = [];\n\t\tlet markedStack, mark;\n\n\t\t/* the main recursive backtracking algorithm */\n\t\tlet _this = this;\n\t\tfunction* backtrack(v, out = {}) {\n\t\t\tpointStack.push(v);\n\t\t\tmark.add(v);\n\t\t\tmarkedStack.push(v);\n\t\t\tfor (let [w] of [..._this.verticesFrom(v)]) {\n\t\t\t\tif (w < pointStack[0]) { continue }\n\t\t\t\tif (w === pointStack[0]) {\n\t\t\t\t\tyield [...pointStack];\n\t\t\t\t\tout.found = true;\n\t\t\t\t} else if (!mark.has(w)) {\n\t\t\t\t\tlet o = {};\n\t\t\t\t\tyield* backtrack(w, o);\n\t\t\t\t\tout.found = out.found || o.found;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (out.found) { // if a simple cycle continuing the partial path on the pointStack has been found\n\t\t\t\tlet u;\n\t\t\t\tdo {\n\t\t\t\t\tu = markedStack.pop();\n\t\t\t\t\tmark.delete(u);\n\t\t\t\t} while (u !== v);\n\t\t\t}\n\t\t\tpointStack.pop();\n\t\t}\n\n\t\t/* start backtracking from each vertex in the graph */\n\t\tfor (let [a] of this.vertices()) {\n\t\t\tmarkedStack = [];\n\t\t\tmark = new Set();\n\t\t\tyield* backtrack(a);\n\t\t}\n\t}\n\n\n\t/**\n\t * Find any directed cycle in this graph.\n\t * @returns {?Array} an array containing the vertex keys describing the cycle; `null`, if there is no cycle;\n\t *                   The array will contain each vertex key only once — even the first/last one.\n\t */\n\tcycle() {\n\t\tlet result = this.cycles().next();\n\t\treturn result.done ? null : result.value;\n\t}\n\n\n\t/**\n\t * Test whether this graph contains a directed cycle.\n\t * @returns {boolean} whether this graph contains any directed cycle\n\t */\n\thasCycle() { return !this.cycles().next().done }\n\n\n\t/**\n\t * Iterate over all paths between two given keys in this graph, in no particular order.\n\t * If you mutate the graph in between iterations, behavior of the iterator\n\t * becomes unspecified. (So, don't.)\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t * @throws {Graph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @returns { Iterator.< Array.<string> > }\n\t *          an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}.\n\t *          Each iterated value is an array containing the vertex-keys describing the path.\n\t * @example\n\t * for (var it = graph.paths(), kv; !(kv = it.next()).done;) {\n\t *     var path = kv.value;\n\t *     // iterates over all paths between `from` and `to` in the graph\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let path of graph.paths()) {\n\t *     // iterates over all paths between `from` and `to` in the graph\n\t * }\n\t */\n\tpaths(from, to) {\n\t\tthis[_expectVertices](from, to);\n\t\treturn this[_paths](from, to);\n\t}\n\t*[_paths](from, to) {\n\t\tlet stack = [];\n\n\t\tlet _this = this;\n\t\tfunction *pathsFromPrefix(current) {\n\t\t\tstack.push(current);\n\t\t\tfor (let [next] of _this.verticesFrom(current)) {\n\t\t\t\tif (next === to) {\n\t\t\t\t\tyield [...stack, to];\n\t\t\t\t} else if (stack.indexOf(next) === -1) {\n\t\t\t\t\tyield* pathsFromPrefix(next);\n\t\t\t\t}\n\t\t\t}\n\t\t\tstack.pop();\n\t\t}\n\n\t\tyield* pathsFromPrefix(from);\n\t}\n\n\n\t/**\n\t * Find any path between a given pair of keys.\n\t * @param from {string} the originating vertex\n\t * @param to   {string} the terminating vertex\n\t * @throws {Graph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @returns {?Array} an array with the keys of the path found between the two vertices,\n\t *                   including those two vertices themselves; `null` if no such path exists\n\t */\n\tpath(from, to) {\n\t\tlet result = this.paths(from, to).next();\n\t\treturn result.done ? null : result.value;\n\t}\n\n\n\t/**\n\t * Test whether there is a directed path between a given pair of keys.\n\t * @param from {string} the originating vertex\n\t * @param to   {string} the terminating vertex\n\t * @throws {Graph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @returns {boolean} whether such a path exists\n\t */\n\thasPath(from, to) { return !this.paths(from, to).next().done }\n\n\n\t/**\n\t * Get the number of edges going out of a given vertex.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param key {string} the key of the vertex to query\n\t * @returns {number} the number of edges going out of the `key` vertex\n\t */\n\toutDegree(key) {\n\t\tthis[_expectVertices](key);\n\t\treturn this[_edges].get(key).size;\n\t}\n\n\n\t/**\n\t * Get the number of edges coming into a given vertex.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param key {string} the key of the vertex to query\n\t * @returns {number} the number of edges coming into the `key` vertex\n\t */\n\tinDegree(key) {\n\t\tthis[_expectVertices](key);\n\t\treturn this[_reverseEdges].get(key).size;\n\t}\n\n\n\t/**\n\t * Get the number of edges connected to a given vertex.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param key {string} the key of the vertex to query\n\t * @returns {number} the number of edges connected to the `key` vertex\n\t */\n\tdegree(key) { return this.outDegree(key) + this.inDegree(key) }\n\n\n\t///////////////////////////////////////\n\t////////// Cloning and stuff //////////\n\t///////////////////////////////////////\n\n\n\t/**\n\t * Merge another graph into this graph.\n\t * @param other {Graph} the other graph to merge into this one\n\t * @param [mV] {function(*, *, string): *}\n\t *     a custom merge function for values stored in vertices;\n\t *     defaults to whichever of the two values is not `undefined`,\n\t *     giving preference to that of the other graph; The first and\n\t *     second arguments are the vertex values of `this` graph and the\n\t *     `other` graph respectively. The third is the corresponding `key`.\n\t * @param [mE] {function(*, *, string, string): *}\n\t *     a custom merge function for values stored in edges;\n\t *     defaults to whichever of the two values is not `undefined`,\n\t *     giving preference to that of the other graph; The first and\n\t *     second arguments are the edge values of `this` graph and the\n\t *     `other` graph respectively. The third and fourth are the\n\t *     corresponding `from` and `to` keys.\n\t */\n\tmergeIn(other, mV, mE) {\n\t\tif (!mV) { mV = (v1,v2)=>(typeof v2 === 'undefined' ? v1 : v2) }\n\t\tif (!mE) { mE = mV }\n\t\tfor (let [key] of other.vertices()) {\n\t\t\tthis.addVertex(key, mV(this.vertexValue(key), other.vertexValue(key)));\n\t\t}\n\t\tfor (let [from, to] of other.edges()) {\n\t\t\tthis.addEdge(from, to, mE(this.edgeValue(from, to), other.edgeValue(from, to), from, to));\n\t\t}\n\t}\n\n\n\t/**\n\t * Create a clone of this graph.\n\t * @param [trV] {function(*, string): *}\n\t *     a custom transformation function for values stored in vertices;\n\t *     defaults to the identity function; The first argument is the\n\t *     value to clone. The second is the corresponding `key`.\n\t * @param [trE] {function(*, string, string): *}\n\t *     a custom transformation function for values stored in edges;\n\t *     defaults to the function given for `trV`; The first argument\n\t *     is the value to clone. The second and third are the `from`\n\t *     and `to` keys respectively.\n\t * @returns {Graph} a clone of this graph\n\t */\n\tclone(trV=(v=>v), trE=trV) {\n\t\tlet result = new Graph();\n\t\tresult.mergeIn(this, (v1, v2) => trV(v2), (v1, v2) => trE(v2));\n\t\treturn result;\n\t}\n\n\n\t/**\n\t * Create a clone of this graph, but without any transitive edges.\n\t * @param [trV] {function(*, string): *}\n\t *     a custom transformation function for values stored in vertices;\n\t *     defaults to the identity function; The first argument is the\n\t *     value to clone. The second is the corresponding `key`.\n\t * @param [trE] {function(*, string, string): *}\n\t *     a custom transformation function for values stored in edges;\n\t *     defaults to the function given for `trV`; The first argument\n\t *     is the value to clone. The second and third are the `from`\n\t *     and `to` keys respectively.\n\t * @returns {Graph} a clone of this graph with all transitive edges removed\n\t */\n\ttransitiveReduction(trV, trE) {\n\t\t// argument defaults are handled in `clone`\n\t\tlet result = this.clone(trV, trE);\n\t\tfor (let [x] of this.vertices())\n\t\t\tfor (let [y] of this.vertices())\n\t\t\t\tif (result.hasEdge(x, y))\n\t\t\t\t\tfor (let [z] of this.vertices())\n\t\t\t\t\t\tif (result.hasPath(y, z))\n\t\t\t\t\t\t\tresult.removeEdge(x, z);\n\t\treturn result;\n\t}\n\n\t/**\n\t * This method replaces stretches of non-branching directed pathway into single edges.\n\t * More specifically, it identifies all 'nexus' vertices in the graph and preserves them.\n\t * It then removes all other vertices and all edges from the graph, then inserts edges\n\t * between nexuses that summarize the connectivity that was there before.\n\t *\n\t * A nexus is any vertex that is *not* characterized by '1 edge in, 1 edge out'.\n\t * A custom `isNexus` function may be provided to manually select additional vertices\n\t * that should be preserved as nexus.\n\t * @param [isNexus] {function(string, *): boolean}\n\t *                  a predicate for identifying additional vertices that should be treated as nexus;\n\t *                  It receives a `key` and `value` associated to a vertex and should return\n\t *                  true if and only if that vertex should be a nexus.\n\t * @throws {Graph.BranchlessCycleError} if the graph contains a cycle with no branches or nexuses\n\t */\n\tcontractPaths(isNexus=(()=>false)) {\n\n\t\t/* what makes a a vertex a nexus (start/end-point) */\n\t\tlet nexuses = new Set(\n\t\t\t[...this.vertices()]\n\t\t\t\t.filter(([key, val]) => this.outDegree(key) !== 1 || this.inDegree(key) !== 1 || isNexus(key, val))\n\t\t\t\t.map(([key]) => key)\n\t\t);\n\n\t\t/* error if there is a branch-less cycle */\n\t\t{\n\t\t\tlet unhandledVertices = new Set([...this.vertices()].map(([key])=>key));\n\t\t\tconst checkForBlCycle = (key) => {\n\t\t\t\tif (!unhandledVertices.has(key)) { return }\n\t\t\t\tunhandledVertices.delete(key);\n\t\t\t\tfor (let [next] of this.verticesFrom(key)) { checkForBlCycle(next) }\n\t\t\t\tfor (let [next] of this.verticesTo  (key)) { checkForBlCycle(next) }\n\t\t\t};\n\t\t\tfor (let key of nexuses) { checkForBlCycle(key) }\n\t\t\tif (unhandledVertices.size > 0) {\n\t\t\t\tlet startingKey = unhandledVertices.values().next().value,\n\t\t\t\t    cycle       = [],\n\t\t\t\t    current     = startingKey;\n\t\t\t\tdo {\n\t\t\t\t\tcycle.push(current);\n\t\t\t\t\tcurrent = this.verticesFrom(current).next().value[0];\n\t\t\t\t} while (current !== startingKey);\n\t\t\t\tthrow new Graph.BranchlessCycleError(cycle);\n\t\t\t}\n\t\t}\n\n\t\t/* bookkeeping */\n\t\tlet contractionsToAdd = new Map();\n\n\t\t/* register the path starting with the given edge */\n\t\tconst startPath = (start, next, backwards) => {\n\t\t\t/* functions to help branch on `backwards` */\n\t\t\tconst fromTo       = (strt = start, nxt = next) => backwards ? [nxt, strt] : [strt, nxt];\n\t\t\tconst verticesNext = (v) => backwards ? this.verticesTo(v) : this.verticesFrom(v);\n\n\t\t\t/* bookkeeping */\n\t\t\tlet verticesToRemove = new Set();\n\t\t\tlet edgesToRemove    = new Set();\n\t\t\tlet path = new Graph();\n\n\t\t\t/* process the start of the path */\n\t\t\tpath.addVertex(start, this.vertexValue(start));\n\t\t\tpath.addVertex(next,  this.vertexValue(next) );\n\t\t\tpath.addNewEdge(...fromTo(), this.edgeValue(...fromTo()));\n\t\t\tedgesToRemove.add(fromTo());\n\n\t\t\t/* process as [current, next] moves across the path */\n\t\t\tlet current;\n\t\t\twhile (!nexuses.has(next)) {\n\t\t\t\t[current, next] = [next, verticesNext(next).next().value[0]];\n\t\t\t\tpath.addVertex(next, this.vertexValue(next));\n\t\t\t\tpath.addNewEdge(...fromTo(current, next), this.edgeValue(...fromTo(current, next)));\n\t\t\t\tverticesToRemove.add(current);\n\t\t\t\tedgesToRemove.add(fromTo(current, next));\n\t\t\t}\n\n\t\t\t/* register new path contraction */\n\t\t\tif (!contractionsToAdd.get(fromTo()[0]))                  { contractionsToAdd.set(fromTo()[0], new Map())                    }\n\t\t\tif (!contractionsToAdd.get(fromTo()[0]).get(fromTo()[1])) { contractionsToAdd.get(fromTo()[0]).set(fromTo()[1], new Graph()) }\n\t\t\tcontractionsToAdd.get(fromTo()[0]).get(fromTo()[1]).mergeIn(path);\n\n\t\t\t/* remove old edges and vertices */\n\t\t\tfor (let key of edgesToRemove)    { this.removeExistingEdge(...key) }\n\t\t\tfor (let key of verticesToRemove) { this.destroyExistingVertex(key) }\n\t\t};\n\n\t\t/* process paths starting at all nexus points */\n\t\tfor (let first of nexuses) {\n\t\t\tfor (let [next] of this.verticesFrom(first)) { startPath(first, next, false) }\n\t\t\tfor (let [next] of this.verticesTo  (first)) { startPath(first, next, true)  }\n\t\t}\n\n\t\t/* add the replacement edges */\n\t\tfor (let [from, toVal] of contractionsToAdd)\n\t\t\tfor (let [to, rememberedPath] of toVal)\n\t\t\t\tthis.addNewEdge(from, to, rememberedPath);\n\t}\n\n\n\t////////////////////////////////\n\t////////// Assertions //////////\n\t////////////////////////////////\n\t\n\t[_expectVertices](key1, key2) {\n\t\tif (key2 && !this.hasVertex(key2)) {\n\t\t\tif (!this.hasVertex(key1)) {\n\t\t\t\tthrow new Graph.VertexNotExistsError([key1, key2]);\n\t\t\t} else {\n\t\t\t\tthrow new Graph.VertexNotExistsError([key2]);\n\t\t\t}\n\t\t} else if (!this.hasVertex(key1)) {\n\t\t\tthrow new Graph.VertexNotExistsError([key1]);\n\t\t}\n\t}\n\n\t[_expectVertexAbsent](key) {\n\t\tif (this.hasVertex(key)) {\n\t\t\tthrow new Graph.VertexExistsError([[key, this.vertexValue(key)]]);\n\t\t}\n\t}\n\n\t[_expectEdge]([from, to]) {\n\t\tif (!this.hasEdge(from, to)) {\n\t\t\tthrow new Graph.EdgeNotExistsError([[from, to]]);\n\t\t}\n\t}\n\n\t[_expectEdgeAbsent]([from, to]) {\n\t\tif (this.hasEdge(from, to)) {\n\t\t\tthrow new Graph.EdgeExistsError([[[from, to], this.edgeValue(from, to)]]);\n\t\t}\n\t}\n\n\t[_expectNoConnectedEdges](key) {\n\t\tlet edges = [];\n\t\tfor (let [to]   of this.verticesFrom(key)) { edges.push([[key,  to ], this.edgeValue(key,  to )]) }\n\t\tfor (let [from] of this.verticesTo  (key)) { edges.push([[from, key], this.edgeValue(from, key)]) }\n\t\tif (edges.length) { throw new Graph.HasConnectedEdgesError(key, edges) }\n\t}\n\n}\n\n\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n//  // Errors //////////////////////////////////////////////////////////////////////////////////////\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @class\n * @classdesc This type of error is thrown when specific vertices are expected not to exist, but do.\n * @extends Error\n */\nGraph.VertexExistsError = class VertexExistsError extends Error {\n\tconstructor(vertices) {\n\t\tsuper();\n\t\t/**\n\t\t * the set of relevant vertices as `[key, value]` shaped arrays\n\t\t * @public\n\t\t * @constant vertices\n\t\t * @memberof Graph.VertexExistsError\n\t\t * @instance\n\t\t * @type {Set.<Array>}\n\t\t */\n\t\tthis.vertices = new Set(vertices);\n\t\tthis.message = `This graph has ${\n\t\t\tthis.vertices.size === 1 ? \"a vertex\" : \"vertices\"\n\t\t} '${\n\t\t\t[...this.vertices].map(([key]) => key).join(`', '`)\n\t\t}'`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when specific vertices are expected to exist, but don't.\n * @extends Error\n */\nGraph.VertexNotExistsError = class VertexNotExistError extends Error {\n\tconstructor(keys) {\n\t\tsuper();\n\t\t/**\n\t\t * the set of relevant vertex keys\n\t\t * @public\n\t\t * @constant vertices\n\t\t * @memberof Graph.VertexNotExistsError\n\t\t * @instance\n\t\t * @type {Set.<string>}\n\t\t */\n\t\tthis.vertices = new Set(keys);\n\t\tthis.message = `This graph does not have ${\n\t\t\tthis.vertices.size === 1 ? \"a vertex\" : \"vertices\"\n\t\t} '${\n\t\t\t[...this.vertices].join(`', '`)\n\t\t}'`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when specific edges are expected not to exist, but do.\n * @extends Error\n */\nGraph.EdgeExistsError = class EdgeExistsError extends Error {\n\tconstructor(edges) {\n\t\tsuper();\n\t\t/**\n\t\t * the set of relevant edges as `[[from, to], value]` shaped arrays\n\t\t * @public\n\t\t * @constant edges\n\t\t * @memberof Graph.EdgeExistsError\n\t\t * @instance\n\t\t * @type {Set.<Array>}\n\t\t */\n\t\tthis.edges = new Set(edges);\n\t\tthis.message = `This graph has ${\n\t\t\tthis.edges.size === 1 ? \"an edge\" : \"edges\"\n\t\t} ${\n\t\t\t[...this.edges].map(([[from, to]]) => `['${from}', '${to}']`).join(`, `)\n\t\t}`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when specific edges are expected to exist, but don't.\n * @extends Error\n */\nGraph.EdgeNotExistsError = class EdgeNotExistsError extends Error {\n\tconstructor(edges) {\n\t\tsuper();\n\t\t/**\n\t\t * the set of relevant edge keys as `[from, to]` shaped arrays\n\t\t * @public\n\t\t * @constant edges\n\t\t * @memberof Graph.EdgeNotExistsError\n\t\t * @instance\n\t\t * @type {Set.<Array.<string>>}\n\t\t */\n\t\tthis.edges = new Set(edges);\n\t\tthis.message = `This graph does not have ${\n\t\t\tthis.edges.size === 1 ? \"an edge\" : \"edges\"\n\t\t} ${\n\t\t\t[...this.edges].map(([from, to]) => `['${from}', '${to}']`).join(`, `)\n\t\t}`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when a vertex is expected not to have any connected edges, but does.\n * @extends Graph.EdgeExistsError\n */\nGraph.HasConnectedEdgesError = class HasConnectedEdgesError extends Graph.EdgeExistsError {\n\tconstructor(key, edges) {\n\t\tsuper(edges);\n\t\t/**\n\t\t * the key of the vertex that has connected edges\n\t\t * @public\n\t\t * @constant vertex\n\t\t * @memberof Graph.HasConnectedEdgesError\n\t\t * @instance\n\t\t * @type {string}\n\t\t */\n\t\tthis.vertex = key;\n\t\tthis.message = `The '${key}' vertex has connected ${\n\t\t\tthis.edges.size === 1 ? \"an edge\" : \"edges\"\n\t\t} ${\n\t\t\t[...this.edges].map(([[from, to]]) => `['${from}', '${to}']`).join(`, `)\n\t\t}`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when a graph is expected not to have a directed cycle, but does.\n * @extends Error\n */\nGraph.CycleError = class CycleError extends Error {\n\tconstructor(cycle) {\n\t\tsuper();\n\t\t/**\n\t\t * the vertices involved in the cycle, in order but with an unspecified starting point\n\t\t * @public\n\t\t * @constant cycle\n\t\t * @memberof Graph.CycleError\n\t\t * @instance\n\t\t * @type {Array.<string>}\n\t\t */\n\t\tthis.cycle = cycle;\n\t\tthis.message = `This graph contains a cycle: ${cycle}`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when a graph is expected not to have a branch-less directed cycle, but does.\n * @extends Graph.CycleError\n */\nGraph.BranchlessCycleError = class BranchlessCycleError extends Graph.CycleError {\n\tconstructor(cycle) {\n\t\tsuper(cycle);\n\t\tthis.message = `This graph contains a branch-less cycle: ${cycle}`;\n\t}\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/graph.es6.js\n **/"]}