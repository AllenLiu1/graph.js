{"version":3,"file":"graph.js","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 9e696bc9fd2b28dfb51f","webpack:///./src/graph.es6.js"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","id","loaded","modules","call","m","c","p","Graph","_vertices","Map","_edges","_reverseEdges","_sources","Set","_sinks","_vertexCount","_edgeCount","addNewVertex","key","value","hasVertex","VertexExistsError","get","set","add","setVertex","VertexNotExistsError","ensureVertex","addVertex","removeExistingVertex","size","HasConnectedEdgesError","destroyExistingVertex","_iterator","verticesFrom","Symbol","iterator","_step","_iteratorNormalCompletion","next","done","to","_step$value","removeEdge","_iterator2","verticesTo","_step2","_iteratorNormalCompletion2","from","_step2$value","removeVertex","destroyVertex","vertexCount","has","vertexValue","addNewEdge","hasEdge","EdgeExistsError","edgeValue","v","createNewEdge","setEdge","EdgeNotExistsError","spanEdge","addEdge","ensureEdge","createEdge","removeExistingEdge","inDegree","outDegree","edgeCount","undefined","vertices","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_step3$value","edges","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","keys","_verticesFrom","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_iterator6","_step6","_verticesTo","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_iterator7","_step7","verticesWithPathFrom","_verticesWithPathFrom","_step8","verticesWithPathTo","_verticesWithPathTo","_step9","sources","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_iterator10","_step10","sinks","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_iterator11","_step11","vertices_topologically","visited","handled","_this","visit","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_iterator13","_step13","_step13$value","a","i","cycle","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_iterator12","_step12","_step12$value","b","push","indexOf","length","slice","reverse","CycleError","pop","map","regeneratorRuntime","mark","clearEdges","_iterator14","_step14","_iteratorNormalCompletion14","_step14$value","clear","_iterator15","_step15","_iteratorNormalCompletion15","_step15$value","equals","other","eqV","eqE","x","y","_iterator16","_step16","_iteratorNormalCompletion16","_step16$value","_iterator17","_step17","_iteratorNormalCompletion17","_step17$value","_iterator18","_this7","_step18","_iteratorNormalCompletion18","_step18$value","result","_iterator19","_step19","_iteratorNormalCompletion19","_step19$value","hasCycle","path","hasPathAux","current","_this8","concat","_iterator20","_step20","_iteratorNormalCompletion20","_step20$value","hasPath","degree","mergeIn","mV","mE","v1","v2","_iterator21","_step21","_iteratorNormalCompletion21","_step21$value","_iterator22","_step22","_iteratorNormalCompletion22","_step22$value","clone","trV","trE","transitiveReduction","_iterator23","_step23","_iteratorNormalCompletion23","_step23$value","_iterator24","_step24","_iteratorNormalCompletion24","_step24$value","_iterator25","_step25","_iteratorNormalCompletion25","z","_step25$value","_Error","prototype","_refreshMessage","aVertices","message","_toConsumableArray","join","Error","_Error2","VertexNotExistError","_this2","_Error3","_this3","e","_iterator26","_step26","_iteratorNormalCompletion26","_step26$value","anEdges","_Error4","_this4","_iterator27","_step27","_iteratorNormalCompletion27","_step27$value","_Error5","_this5","_Error6","_this6"],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Graph\"] = factory();\n\telse\n\t\troot[\"Graph\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 9e696bc9fd2b28dfb51f\n **/","'use strict';\n\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n//  // Graph class /////////////////////////////////////////////////////////////////////////////////\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @public\n * @class Graph\n * @classdesc The main class of this library, to be used for representing a mathematical (di)graph.\n */\nexport default class Graph {\n\n\tconstructor() {\n\t\tthis._vertices     = new Map(); // Map.< string, * >\n\t\tthis._edges        = new Map(); // Map.< string, Map.<string, *> >\n\t\tthis._reverseEdges = new Map(); // Map.< string, Set.<*> >\n\t\tthis._sources      = new Set(); // Set.< string >\n\t\tthis._sinks        = new Set(); // Set.< string >\n\t\tthis._vertexCount  = 0;\n\t\tthis._edgeCount    = 0;\n\t}\n\n\n\t//////////////////////////////\n\t////////// Vertices //////////\n\t//////////////////////////////\n\n\t////////// creating them //////////\n\n\t/**\n\t * Add a new vertex to this graph.\n\t * @throws {Graph.VertexExistsError} if a vertex with this key already exists\n\t * @param  key    {string} the key with which to refer to this new vertex\n\t * @param [value] {*}      the value to store in this new vertex\n\t */\n\taddNewVertex(key, value) {\n\t\tif (this.hasVertex(key)) {\n\t\t\tthrow new Graph.VertexExistsError(key, this._vertices.get(key));\n\t\t}\n\t\tthis._vertices.set(key, value);\n\t\tthis._edges.set(key, new Map());\n\t\tthis._reverseEdges.set(key, new Set());\n\t\tthis._vertexCount += 1;\n\t\tthis._sources.add(key);\n\t\tthis._sinks.add(key);\n\t}\n\n\t/**\n\t * Set the value of an existing vertex in this graph.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param  key    {string} the key belonging to the vertex\n\t * @param [value] {*}      the value to store in this vertex\n\t */\n\tsetVertex(key, value) {\n\t\tif (!this.hasVertex(key)) {\n\t\t\tthrow new Graph.VertexNotExistsError(key);\n\t\t}\n\t\tthis._vertices.set(key, value);\n\t}\n\n\t/**\n\t * Make sure a vertex with a specific key exists in this graph. If it already exists,\n\t * do nothing. If it does not yet exist, add a new vertex with the given value.\n\t * @param  key    {string} the key for the vertex\n\t * @param [value] {*}      the value to store if a new vertex is added\n\t */\n\tensureVertex(key, value) {\n\t\tif (!this.hasVertex(key)) {\n\t\t\tthis.addNewVertex(key, value);\n\t\t}\n\t}\n\n\t/**\n\t * Add a new vertex to this graph. If a vertex with this key already exists,\n\t * the value of that vertex is overwritten.\n\t * @param  key    {string} the key with which to refer to this new vertex\n\t * @param [value] {*}      the value to store in this new vertex\n\t */\n\taddVertex(key, value) {\n\t\tif (this.hasVertex(key)) {\n\t\t\tthis.setVertex(key, value);\n\t\t} else {\n\t\t\tthis.addNewVertex(key, value);\n\t\t}\n\t}\n\n\n\t////////// removing them //////////\n\n\t/**\n\t * Remove an existing vertex from this graph.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @throws {Graph.HasConnectedEdgesError} if there are still edges connected to this vertex\n\t * @param key {string} the key of the vertex to remove\n\t */\n\tremoveExistingVertex(key) {\n\t\tif (!this.hasVertex(key)) {\n\t\t\tthrow new Graph.VertexNotExistsError(key);\n\t\t}\n\t\tif (this._edges.get(key).size > 0 || this._reverseEdges.get(key).size > 0) {\n\t\t\tthrow new Graph.HasConnectedEdgesError(key);\n\t\t}\n\t\tthis._vertices.delete(key);\n\t\tthis._vertexCount -= 1;\n\t\tthis._sources.delete(key);\n\t\tthis._sinks.delete(key);\n\t}\n\n\t/**\n\t * Remove an existing vertex from this graph, as well as all edges connected to it.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param key {string} the key of the vertex to remove\n\t */\n\tdestroyExistingVertex(key) {\n\t\tif (!this.hasVertex(key)) {\n\t\t\tthrow new Graph.VertexNotExistsError(key);\n\t\t}\n\t\tfor (let [to] of this.verticesFrom(key)) {\n\t\t\tthis.removeEdge(key, to);\n\t\t}\n\t\tfor (let [from] of this.verticesTo(key)) {\n\t\t\tthis.removeEdge(from, key);\n\t\t}\n\t\tthis.removeExistingVertex(key);\n\t}\n\n\t/**\n\t * Remove an existing vertex from this graph.\n\t * If a vertex with this key does not exist, nothing happens.\n\t * @throws {Graph.HasConnectedEdgesError} if there are still edges connected to this vertex\n\t * @param key {string} the key of the vertex to remove\n\t */\n\tremoveVertex(key) {\n\t\tif (this.hasVertex(key)) {\n\t\t\tthis.removeExistingVertex(key);\n\t\t}\n\t}\n\n\t/**\n\t * Remove a vertex from this graph, as well as all edges connected to it.\n\t * If a vertex with this key does not exist, nothing happens.\n\t * @param key {string} the key of the vertex to remove\n\t */\n\tdestroyVertex(key) {\n\t\tif (this.hasVertex(key)) {\n\t\t\tthis.destroyExistingVertex(key);\n\t\t}\n\t}\n\n\n\t////////// querying them //////////\n\n\t/**\n\t * @returns {number} the number of vertices in the whole graph\n\t */\n\tvertexCount() { return this._vertexCount }\n\n\t/**\n\t * Ask whether a vertex with a given key exists.\n\t * @param key {string} the key to query\n\t * @returns {boolean} whether there is a vertex with the given key\n\t */\n\thasVertex(key) { return this._vertices.has(key) }\n\n\t/**\n\t * Get the value associated with the vertex of a given key.\n\t * @param key {string} the key to query\n\t * @returns {*} the value associated with the vertex of the given key.\n\t * Note that a return value of `undefined` can mean\n\t *\n\t * 1. that there is no such vertex, or\n\t * 2. that the stored value is actually `undefined`.\n\t *\n\t * Use {@link Graph#hasVertex} to distinguish these cases.\n\t */\n\tvertexValue(key) { return this._vertices.get(key) }\n\n\n\t///////////////////////////\n\t////////// Edges //////////\n\t///////////////////////////\n\n\t////////// adding them //////////\n\n\t/**\n\t * Add a new edge to this graph.\n\t * @throws {Graph.EdgeExistsError} if an edge between `from` and `to` already exists\n\t * @throws {Graph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store in this new edge\n\t */\n\taddNewEdge(from, to, value) {\n\t\tif (this.hasEdge(from, to)) {\n\t\t\tthrow new Graph.EdgeExistsError(from, to, this.edgeValue(from, to));\n\t\t}\n\t\tif (!this.hasVertex(from)) {\n\t\t\tif (this.hasVertex(to)) {\n\t\t\t\tthrow new Graph.VertexNotExistsError(from);\n\t\t\t} else {\n\t\t\t\tthrow new Graph.VertexNotExistsError(from).v(to);\n\t\t\t}\n\t\t} else if (!this.hasVertex(to)) {\n\t\t\tthrow new Graph.VertexNotExistsError(to);\n\t\t}\n\t\tthis._edges.get(from).set(to, value);\n\t\tthis._reverseEdges.get(to).add(from);\n\t\tthis._edgeCount += 1;\n\t\tthis._sources.delete(to);\n\t\tthis._sinks.delete(from);\n\t}\n\n\t/**\n\t * Add a new edge to this graph. If the `from` and/or `to` vertices do not yet exist\n\t * in the graph, they are implicitly added with an `undefined` value.\n\t * @throws {Graph.EdgeExistsError} if an edge between `from` and `to` already exists\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store in this new edge\n\t */\n\tcreateNewEdge(from, to, value) {\n\t\tif (this.hasEdge(from, to)) {\n\t\t\tthrow new Graph.EdgeExistsError(from, to, this.edgeValue(from, to));\n\t\t}\n\t\tthis.ensureVertex(from);\n\t\tthis.ensureVertex(to);\n\t\tthis.addNewEdge(from, to, value);\n\t}\n\n\t/**\n\t * Set the value of an existing edge in this graph.\n\t * @throws {Graph.EdgeNotExistsError} if an edge between `from` and `to` does not yet exist\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store in this edge\n\t */\n\tsetEdge(from, to, value) {\n\t\tif (!this.hasEdge(from, to)) {\n\t\t\tthrow new Graph.EdgeNotExistsError(from, to);\n\t\t}\n\t\tthis._edges.get(from).set(to, value);\n\t}\n\n\t/**\n\t * Make sure an edge between the `from` and `to` vertices in this graph.\n\t * If one already exists, nothing is done.\n\t * If one does not yet exist, a new edge is added with the given value.\n\t * @throws {Graph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store if a new edge is added\n\t */\n\tspanEdge(from, to, value) {\n\t\tif (!this.hasVertex(from)) {\n\t\t\tif (this.hasVertex(to)) {\n\t\t\t\tthrow new Graph.VertexNotExistsError(from);\n\t\t\t} else {\n\t\t\t\tthrow new Graph.VertexNotExistsError(from).v(to);\n\t\t\t}\n\t\t} else if (!this.hasVertex(to)) {\n\t\t\tthrow new Graph.VertexNotExistsError(to);\n\t\t}\n\t\tif (!this.hasEdge(from, to)) {\n\t\t\tthis.addNewEdge(from, to, value);\n\t\t}\n\t}\n\n\t/**\n\t * Add a new edge to this graph. If an edge between `from` and `to` already exists,\n\t * the value of that edge is overwritten.\n\t * @throws {Graph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store in this new edge\n\t */\n\taddEdge(from, to, value) {\n\t\tif (this.hasEdge(from, to)) {\n\t\t\tthis.setEdge(from, to, value);\n\t\t} else {\n\t\t\tthis.addNewEdge(from, to, value);\n\t\t}\n\t}\n\n\t/**\n\t * Make sure an edge between the `from` and `to` vertices exists in this graph.\n\t * If it already exists, nothing is done.\n\t * If it does not yet exist, a new edge is added with the given value.\n\t * If the `from` and/or `to` vertices do not yet exist\n\t * in the graph, they are implicitly added with an `undefined` value.\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store if a new edge is added\n\t */\n\tensureEdge(from, to, value) {\n\t\tif (!this.hasEdge(from, to)) {\n\t\t\tthis.createNewEdge(from, to, value);\n\t\t}\n\t}\n\n\t/**\n\t * Add a new edge to this graph. If an edge between the `from` and `to`\n\t * vertices already exists, the value of that edge is overwritten.\n\t * If the `from` and/or `to` vertices do not yet exist\n\t * in the graph, they are implicitly added with an `undefined` value.\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store if a new edge is added\n\t */\n\tcreateEdge(from, to, value) {\n\t\tif (this.hasEdge(from, to)) {\n\t\t\tthis.setEdge(from, to, value);\n\t\t} else {\n\t\t\tthis.createNewEdge(from, to, value);\n\t\t}\n\t}\n\n\n\t////////// removing them //////////\n\n\t/**\n\t * Remove an existing edge from this graph.\n\t * @throws {Graph.EdgeNotExistsError} if an edge between the `from` and `to` vertices doesn't exist\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t */\n\tremoveExistingEdge(from, to) {\n\t\tif (!this.hasEdge(from, to)) {\n\t\t\tthrow new Graph.EdgeNotExistsError(from, to);\n\t\t}\n\t\tthis._edges.get(from).delete(to);\n\t\tthis._reverseEdges.get(to).delete(from);\n\t\tthis._edgeCount -= 1;\n\t\tif (this. inDegree(to)   === 0) { this._sources.add(to) }\n\t\tif (this.outDegree(from) === 0) { this._sinks.add(from) }\n\t}\n\n\t/**\n\t * Remove an edge from this graph.\n\t * If an edge between the `from` and `to` vertices doesn't exist, nothing happens.\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t */\n\tremoveEdge(from, to) {\n\t\tif (this.hasEdge(from, to)) {\n\t\t\tthis.removeExistingEdge(from, to);\n\t\t}\n\t}\n\n\n\t////////// querying them //////////\n\n\t/**\n\t * @returns {number} the number of edges in the whole graph\n\t */\n\tedgeCount() { return this._edgeCount }\n\n\t/**\n\t * Ask whether an edge between given `from` and `to` vertices exist.\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t * @returns {boolean} whether there is an edge between the given `from` and `to` vertices\n\t */\n\thasEdge(from, to) {\n\t\treturn this.hasVertex(from) &&\n\t\t\tthis.hasVertex(to) &&\n\t\t\tthis._edges.has(from) &&\n\t\t\tthis._edges.get(from).has(to);\n\t}\n\n\t/**\n\t * Get the value associated with the edge between given `from` and `to` vertices.\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t * @returns {*} the value associated with the edge between the given `from` and `to` vertices\n\t * Note that a return value of `undefined` can mean\n\t *\n\t * 1. that there is no such edge, or\n\t * 2. that the stored value is actually `undefined`.\n\t *\n\t * Use {@link Graph#hasEdge} to distinguish these cases.\n\t */\n\tedgeValue(from, to) {\n\t\treturn this.hasEdge(from, to) ? this._edges.get(from).get(to) : undefined;\n\t}\n\n\n\t///////////////////////////////////////////////\n\t//////////// ES6 Iterable interfaces //////////\n\t///////////////////////////////////////////////\n\n\t/**\n\t * Iterate over all vertices of the graph, in no particular order.\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.vertices(), keyVal = it.next(); !it.done;) {\n\t *     var key   = keyVal[0],\n\t *         value = keyVal[1];\n\t *     // iterates over all vertices of the graph\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.vertices()) {\n\t *     // iterates over all vertices of the graph\n\t * }\n\t * @see {@link Graph#@@iterator}\n\t */\n\t*vertices() {\n\t\tlet done = new Set();\n\t\tfor (let [key, value] of this._vertices) {\n\t\t\tif (this.hasVertex(key) && !done.has(key)) {\n\t\t\t\tdone.add(key);\n\t\t\t\tyield [key, value];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * A {@link Graph} object is itself {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol|iterable},\n\t * and serves as a short notation in ECMAScript 6 to iterate over all vertices in the graph, in no particular order.\n\t * @method Graph#@@iterator\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (let [key, value] of graph) {\n\t *     // iterates over all vertices of the graph\n\t * }\n\t * @see {@link Graph#vertices}\n\t */\n\t[Symbol.iterator]() { return this.vertices() }\n\n\t/**\n\t * Iterate over all edges of the graph, in no particular order.\n\t * @returns { Iterator.<string, string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.edges(), fromToVal = it.next(); !it.done;) {\n\t *     var from  = fromToVal[0],\n\t *         to    = fromToVal[1],\n\t *         value = fromToVal[2];\n\t *     // iterates over all edges of the graph\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [from, to, value] of graph.edges()) {\n\t *     // iterates over all vertices of the graph\n\t * }\n\t */\n\t*edges() {\n\t\tlet done = new Map();\n\t\tfor (let from of this._edges.keys()) {\n\t\t\tif (!done.has(from)) { done.set(from, new Set()) }\n\t\t\tfor (let to of this._edges.get(from).keys()) {\n\t\t\t\tif (this.hasEdge(from, to) && !done.get(from).has(to)) {\n\t\t\t\t\tdone.get(from).add(to);\n\t\t\t\t\tyield [from, to, this._edges.get(from).get(to)];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over the outgoing edges of a given vertex in the graph, in no particular order.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with the given `from` key does not exist\n\t * @param from {string} the key of the vertex to take the outgoing edges from\n\t * @returns { Iterator.<string, *, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.verticesFrom(from), toVertexEdge = it.next(); !it.done;) {\n\t *     var to          = toVertexEdge[0],\n\t *         vertexValue = toVertexEdge[1],\n\t *         edgeValue   = toVertexEdge[2];\n\t *     // iterates over all outgoing vertices of the `from` vertex\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [to, vertexValue, edgeValue] of graph.verticesFrom(from)) {\n\t *     // iterates over all outgoing edges of the `from` vertex\n\t * }\n\t */\n\tverticesFrom(from) {\n\t\tif (!this.hasVertex(from)) { throw new Graph.VertexNotExistsError(from) }\n\t\treturn this._verticesFrom(from);\n\t}\n\t*_verticesFrom(from) {\n\t\tlet done = new Set();\n\t\tfor (let to of this._edges.get(from).keys()) {\n\t\t\tif (this.hasEdge(from, to) && !done.has(to)) {\n\t\t\t\tdone.add(to);\n\t\t\t\tyield [to, this._vertices.get(to), this._edges.get(from).get(to)];\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Iterate over the incoming edges of a given vertex in the graph, in no particular order.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with the given `to` key does not exist\n\t * @param to {string} the key of the vertex to take the incoming edges from\n\t * @returns { Iterator.<string, *, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.verticesTo(to), fromVertexEdge = it.next(); !it.done;) {\n\t *     var from        = fromVertexEdge[0],\n\t *         vertexValue = fromVertexEdge[1],\n\t *         edgeValue   = fromVertexEdge[2];\n\t *     // iterates over all outgoing vertices of the `from` vertex\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [from, vertexValue, edgeValue] of graph.verticesTo(to)) {\n\t *     // iterates over all incoming edges of the `to` vertex\n\t * }\n\t */\n\tverticesTo(to) {\n\t\tif (!this.hasVertex(to)) { throw new Graph.VertexNotExistsError(to) }\n\t\treturn this._verticesTo(to);\n\t}\n\t*_verticesTo(to) {\n\t\tlet done = new Set();\n\t\tfor (let from of this._reverseEdges.get(to)) {\n\t\t\tif (this.hasEdge(from, to) && !done.has(from)) {\n\t\t\t\tdone.add(from);\n\t\t\t\tyield [from, this._vertices.get(from), this._edges.get(from).get(to)];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over all vertices reachable from a given vertex in the graph, in no particular order.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with the given `from` key does not exist\n\t * @param from {string} the key of the vertex to take the reachable vertices from\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.verticesWithPathFrom(from), keyValue = it.next(); !it.done;) {\n\t *     var key   = keyValue[0],\n\t *         value = keyValue[1];\n\t *     // iterates over all vertices reachable from `from`\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.verticesWithPathFrom(from)) {\n\t *     // iterates over all vertices reachable from `from`\n\t * }\n\t */\n\tverticesWithPathFrom(from) {\n\t\tif (!this.hasVertex(from)) { throw new Graph.VertexNotExistsError(from) }\n\t\treturn this._verticesWithPathFrom(from, new Set());\n\t}\n\t*_verticesWithPathFrom(from, done) {\n\t\tfor (let to of this._edges.get(from).keys()) {\n\t\t\tif (this.hasEdge(from, to) && !done.has(to)) {\n\t\t\t\tdone.add(to);\n\t\t\t\tyield [to, this._vertices.get(to)];\n\t\t\t\tyield* this._verticesWithPathFrom(to, done);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over all vertices from which a given vertex in the graph can be reached, in no particular order.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with the given `to` key does not exist\n\t * @param to {string} the key of the vertex to take the reachable vertices from\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.verticesWithPathTo(to), keyValue = it.next(); !it.done;) {\n\t *     var key   = keyValue[0],\n\t *         value = keyValue[1];\n\t *     // iterates over all vertices from which `to` can be reached\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.verticesWithPathTo(to)) {\n\t *     // iterates over all vertices from which `to` can be reached\n\t * }\n\t */\n\tverticesWithPathTo(to) {\n\t\tif (!this.hasVertex(to)) { throw new Graph.VertexNotExistsError(to) }\n\t\treturn this._verticesWithPathTo(to, new Set());\n\t}\n\t*_verticesWithPathTo(to, done) {\n\t\tfor (let from of this._reverseEdges.get(to)) {\n\t\t\tif (this.hasEdge(from, to) && !done.has(from)) {\n\t\t\t\tdone.add(from);\n\t\t\t\tyield [from, this._vertices.get(from)];\n\t\t\t\tyield* this._verticesWithPathTo(from, done);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Iterate over all vertices that have no incoming edges, in no particular order.\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.sources(), keyValue = it.next(); !it.done;) {\n\t *     var key   = keyValue[0],\n\t *         value = keyValue[1];\n\t *     // iterates over all vertices with no incoming edges\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.sources()) {\n\t *     // iterates over all vertices with no incoming edges\n\t * }\n\t */\n\t*sources() {\n\t\tlet done = new Set();\n\t\tfor (let key of this._sources) {\n\t\t\tif (this.hasVertex(key) && !done.has(key)) {\n\t\t\t\tdone.add(key);\n\t\t\t\tyield [key, this.vertexValue(key)];\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Iterate over all vertices that have no outgoing edges, in no particular order.\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.sinks(), keyValue = it.next(); !it.done;) {\n\t *     var key   = keyValue[0],\n\t *         value = keyValue[1];\n\t *     // iterates over all vertices with no outgoing edges\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.sinks()) {\n\t *     // iterates over all vertices with no outgoing edges\n\t * }\n\t */\n\t*sinks() {\n\t\tlet done = new Set();\n\t\tfor (let key of this._sinks) {\n\t\t\tif (this.hasVertex(key) && !done.has(key)) {\n\t\t\t\tdone.add(key);\n\t\t\t\tyield [key, this.vertexValue(key)];\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Iterate over all vertices of the graph in topological order.\n\t * @returns { Iterator.<string, *> } an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol}\n\t * @example\n\t * for (var it = graph.vertices_topologically(), keyVal = it.next(); !it.done;) {\n\t *     var key   = keyVal[0],\n\t *         value = keyVal[1];\n\t *     // iterates over all vertices of the graph in topological order\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.vertices_topologically()) {\n\t *     // iterates over all vertices of the graph in topological order\n\t * }\n\t */\n\t*vertices_topologically() {\n\t\tlet visited = []; // stack\n\t\tlet handled = new Set();\n\n\t\tlet _this = this;\n\t\tfunction *visit(a) {\n\t\t\tvisited.push(a);\n\t\t\tlet i = visited.indexOf(a);\n\t\t\tif (i !== visited.length - 1) {\n\t\t\t\tlet cycle = visited.slice(i + 1).reverse();\n\t\t\t\tthrow new Graph.CycleError(cycle);\n\t\t\t}\n\t\t\tif (!handled.has(a)) {\n\t\t\t\tfor (let [b] of _this.verticesTo(a)) {\n\t\t\t\t\tyield* visit(b);\n\t\t\t\t}\n\t\t\t\tif (_this.hasVertex(a)) {\n\t\t\t\t\tyield [a, _this._vertices.get(a)];\n\t\t\t\t}\n\t\t\t\thandled.add(a);\n\t\t\t}\n\t\t\tvisited.pop();\n\t\t}\n\t\tfor (let [a] of this.vertices()) {\n\t\t\tif (!handled.has(a)) {\n\t\t\t\tyield* visit(a);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t//////////////////////////////\n\t////////// Clearing //////////\n\t//////////////////////////////\n\n\t/**\n\t * Remove all edges from the graph, but leave the vertices intact.\n\t */\n\tclearEdges() {\n\t\tfor (let [from, to] of this.edges()) { this.removeEdge(from, to) }\n\t}\n\n\t/**\n\t * Remove all edges and vertices from the graph, putting it back in its initial state.\n\t */\n\tclear() {\n\t\tfor (let [v] of this.vertices()) { this.destroyVertex(v) }\n\t}\n\n\n\t////////////////////////////////////////\n\t////////// (Advanced) Queries //////////\n\t////////////////////////////////////////\n\n\t/**\n\t * Ask whether `this` graph and a given `other` graph are equal.\n\t * Two graphs are equal if they have the same vertices and the same edges.\n\t * @param other {Graph} the other graph to compare to `this` one\n\t * @param [eqV] {function(*, *, string): boolean}\n\t *     a custom equality function for values stored in vertices;\n\t *     defaults to `===` comparison; The first two arguments are the\n\t *     values to compare. The third is the corresponding `key`.\n\t * @param [eqE] {function(*, *, string, string): boolean}\n\t *     a custom equality function for values stored in edges;\n\t *     defaults to the function given for `trV`; The first two arguments\n\t *     are the values to compare. The third and fourth are the `from`\n\t *     and `to` keys respectively.\n\t * @returns {boolean} `true` if the two graphs are equal; `false` otherwise\n\t */\n\tequals(other, eqV, eqE) {\n\t\tif (!eqV) { eqV = (x,y) => (x===y) }\n\t\tif (!eqE) { eqE = eqV              }\n\t\tif (!(other instanceof Graph))                  { return false }\n\t\tif (this.vertexCount() !== other.vertexCount()) { return false }\n\t\tif (this.edgeCount()   !== other.edgeCount()  ) { return false }\n\t\tfor (let [key, value] of this.vertices()) {\n\t\t\tif (!other.hasVertex(key))                    { return false }\n\t\t\tif (!eqV(value, other.vertexValue(key), key)) { return false }\n\t\t}\n\t\tfor (let [from, to, value] of this.edges()) {\n\t\t\tif (!other.hasEdge(from, to))                         { return false }\n\t\t\tif (!eqE(value, other.edgeValue(from, to), from, to)) { return false }\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Find any directed cycle in this graph.\n\t * @returns {?array} an array with the keys of a cycle in order;\n\t *                   `null`, if there is no cycle\n\t */\n\tcycle() {\n\t\tlet visited = []; // stack\n\t\tlet handled = new Set();\n\n\t\tconst visit = (a) => {\n\t\t\t/* if a cycle is found, record it and return */\n\t\t\tlet i = visited.indexOf(a);\n\t\t\tif (i >= 0) { return visited.slice(i) }\n\n\t\t\t/* if this vertex was already handled, no cycle can be found here */\n\t\t\tif (handled.has(a)) { return null }\n\t\t\thandled.add(a);\n\n\t\t\t/* recursively visit successors to check for cycles */\n\t\t\tvisited.push(a);\n\t\t\tfor (let [b] of this.verticesFrom(a)) {\n\t\t\t\tlet result = visit(b);\n\t\t\t\tif (result) { return result }\n\t\t\t}\n\t\t\tvisited.pop();\n\t\t};\n\n\t\tfor (let [a] of this.vertices()) {\n\t\t\tlet result = visit(a);\n\t\t\tif (result) { return result }\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Test whether this graph contains a directed cycle.\n\t * @returns {boolean} whether this graph contains a directed cycle\n\t */\n\thasCycle() { return !!this.cycle() }\n\n\n\t/**\n\t * Find any path between a given pair of keys.\n\t * @param from {string} the originating vertex\n\t * @param to   {string} the terminating vertex\n\t * @returns {?array} an array with the keys of the path found between the two vertices,\n\t *                   including those two vertices themselves; `null` if no such path exists\n\t */\n\tpath(from, to) {\n\t\tif (!this.hasVertex(from) || !this.hasVertex(to)) { return null }\n\n\t\tlet visited = [];\n\n\t\t/* recursive auxiliary function: find a path from 'current' to 'to' */\n\t\tconst hasPathAux = (current) => {\n\t\t\tvisited.push(current);\n\t\t\tif (this.hasEdge(current, to)) {\n\t\t\t\treturn [...visited, to];\n\t\t\t}\n\t\t\tfor (let [next] of this.verticesFrom(current)) {\n\t\t\t\tif (visited.indexOf(next) === -1) {\n\t\t\t\t\tlet result = hasPathAux(next);\n\t\t\t\t\tif (result) { return result }\n\t\t\t\t}\n\t\t\t}\n\t\t\tvisited.pop();\n\t\t\treturn null;\n\t\t};\n\n\t\treturn hasPathAux(from);\n\t}\n\n\n\t/**\n\t * Test whether there is a directed path between a given pair of keys.\n\t * @param from {string} the originating vertex\n\t * @param to   {string} the terminating vertex\n\t * @returns {boolean} whether such a path exists\n\t */\n\thasPath(from, to) { return !!this.path(from, to) }\n\n\n\t/**\n\t * Get the number of edges going out of a given vertex.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param key {string} the key of the vertex to query\n\t * @returns {number} the number of edges going out of the `key` vertex\n\t */\n\toutDegree(key) {\n\t\tif (!this.hasVertex(key)) { throw new Graph.VertexNotExistsError(key) }\n\t\treturn this._edges.get(key).size;\n\t}\n\n\n\t/**\n\t * Get the number of edges coming into a given vertex.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param key {string} the key of the vertex to query\n\t * @returns {number} the number of edges coming into the `key` vertex\n\t */\n\tinDegree(key) {\n\t\tif (!this.hasVertex(key)) { throw new Graph.VertexNotExistsError(key) }\n\t\treturn this._reverseEdges.get(key).size;\n\t}\n\n\n\t/**\n\t * Get the number of edges connected to a given vertex.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param key {string} the key of the vertex to query\n\t * @returns {number} the number of edges connected to the `key` vertex\n\t */\n\tdegree(key) { return this.outDegree(key) + this.inDegree(key) }\n\n\n\t///////////////////////////////////////\n\t////////// Cloning and stuff //////////\n\t///////////////////////////////////////\n\n\t/**\n\t * Merge another graph into this graph.\n\t * @param other {Graph} the other graph to merge into this one\n\t * @param [mV] {function(*, *, string): *}\n\t *     a custom merge function for values stored in vertices;\n\t *     defaults to whichever of the two values is not `undefined`,\n\t *     giving preference to that of the other graph; The first and\n\t *     second arguments are the vertex values of `this` graph and the\n\t *     `other` graph respectively. The third is the corresponding `key`.\n\t * @param [mE] {function(*, *, string, string): *}\n\t *     a custom merge function for values stored in edges;\n\t *     defaults to whichever of the two values is not `undefined`,\n\t *     giving preference to that of the other graph; The first and\n\t *     second arguments are the edge values of `this` graph and the\n\t *     `other` graph respectively. The third and fourth are the\n\t *     corresponding `from` and `to` keys.\n\t */\n\tmergeIn(other, mV, mE) {\n\t\tif (!mV) { mV = (v1,v2)=>(typeof v2 === 'undefined' ? v1 : v2) }\n\t\tif (!mE) { mE = mV }\n\t\tfor (let [key] of other.vertices()) {\n\t\t\tthis.addVertex(key, mV(this.vertexValue(key), other.vertexValue(key)));\n\t\t}\n\t\tfor (let [from, to] of other.edges()) {\n\t\t\tthis.addEdge(from, to, mE(this.edgeValue(from, to), other.edgeValue(from, to), from, to));\n\t\t}\n\t}\n\n\t/**\n\t * Create a clone of this graph.\n\t * @param [trV] {function(*, string): *}\n\t *     a custom transformation function for values stored in vertices;\n\t *     defaults to the identity function; The first argument is the\n\t *     value to clone. The second is the corresponding `key`.\n\t * @param [trE] {function(*, string, string): *}\n\t *     a custom transformation function for values stored in edges;\n\t *     defaults to the function given for `trV`; The first argument\n\t *     is the value to clone. The second and third are the `from`\n\t *     and `to` keys respectively.\n\t * @returns {Graph} a clone of this graph\n\t */\n\tclone(trV, trE) {\n\t\tif (!trV) { trV = v=>v }\n\t\tif (!trE) { trE = trV  }\n\t\tlet result = new Graph();\n\t\tresult.mergeIn(this, (v1, v2) => trV(v2), (v1, v2) => trE(v2));\n\t\treturn result;\n\t}\n\n\t/**\n\t * Create a clone of this graph, but without any transitive edges.\n\t * @param [trV] {function(*, string): *}\n\t *     a custom transformation function for values stored in vertices;\n\t *     defaults to the identity function; The first argument is the\n\t *     value to clone. The second is the corresponding `key`.\n\t * @param [trE] {function(*, string, string): *}\n\t *     a custom transformation function for values stored in edges;\n\t *     defaults to the function given for `trV`; The first argument\n\t *     is the value to clone. The second and third are the `from`\n\t *     and `to` keys respectively.\n\t * @returns {Graph} a clone of this graph with all transitive edges removed\n\t */\n\ttransitiveReduction(trV, trE) {\n\t\tif (!trV) { trV = v=>v }\n\t\tif (!trE) { trE = trV  }\n\t\tlet result = this.clone(trV, trE);\n\t\tfor (let [x] of this.vertices())\n\t\t\tfor (let [y] of this.vertices())\n\t\t\t\tif (result.hasEdge(x, y))\n\t\t\t\t\tfor (let [z] of this.vertices())\n\t\t\t\t\t\tif (result.hasPath(y, z))\n\t\t\t\t\t\t\tresult.removeEdge(x, z);\n\t\treturn result;\n\t}\n\n\n}\n\n\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n//  // Errors //////////////////////////////////////////////////////////////////////////////////////\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @class\n * @classdesc This type of error is thrown when specific vertices are expected not to exist, but do.\n * @extends Error\n */\nGraph.VertexExistsError = class VertexExistsError extends Error {\n\tconstructor(key, value) {\n\t\tsuper();\n\t\t/**\n\t\t * the set of relevant vertices\n\t\t * @public\n\t\t * @constant vertices\n\t\t * @memberof Graph.VertexExistsError\n\t\t * @instance\n\t\t * @type {Set.<{ key: string, value }>}\n\t\t */\n\t\tthis.vertices = new Set();\n\t\tthis.v(key, value);\n\t}\n\tv(key, value) {\n\t\tthis.vertices.add({ key, value });\n\t\tthis._refreshMessage();\n\t\treturn this;\n\t}\n\t_refreshMessage() {\n\t\tlet aVertices = this.vertices.size === 1 ? \"a vertex\" : \"vertices\";\n\t\tthis.message = `This graph has ${aVertices} '${\n\t\t\t[...this.vertices].map((v) => v.key).join(\"', '\")\n\t\t}'`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when specific vertices are expected to exist, but don't.\n * @extends Error\n */\nGraph.VertexNotExistsError = class VertexNotExistError extends Error {\n\tconstructor(key) {\n\t\tsuper();\n\t\t/**\n\t\t * the set of relevant vertices\n\t\t * @public\n\t\t * @constant vertices\n\t\t * @memberof Graph.VertexNotExistsError\n\t\t * @instance\n\t\t * @type {Set.<{ key: string }>}\n\t\t */\n\t\tthis.vertices = new Set();\n\t\tthis.v(key);\n\t}\n\tv(key) {\n\t\tthis.vertices.add({ key });\n\t\tthis._refreshMessage();\n\t\treturn this;\n\t}\n\t_refreshMessage() {\n\t\tlet aVertices = this.vertices.size === 1 ? \"a vertex\" : \"vertices\";\n\t\tthis.message = `This graph does not have ${aVertices} '${\n\t\t\t[...this.vertices].map((v) => v.key).join(\"', '\")\n\t\t}'`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when specific edges are expected not to exist, but do.\n * @extends Error\n */\nGraph.EdgeExistsError = class EdgeExistsError extends Error {\n\tconstructor(from, to, value) {\n\t\tsuper();\n\t\t/**\n\t\t * the set of relevant edges\n\t\t * @public\n\t\t * @constant edges\n\t\t * @memberof Graph.EdgeExistsError\n\t\t * @instance\n\t\t * @type {Set.<{ from: string, to: string, value }>}\n\t\t */\n\t\tthis.edges = new Set();\n\t\tthis.e(from, to, value);\n\t}\n\te(from, to, value) {\n\t\tthis.edges.add({ from, to, value });\n\t\tthis._refreshMessage();\n\t\treturn this;\n\t}\n\t_refreshMessage() {\n\t\tlet edges = [];\n\t\tfor (let {from, to} of this.edges) {\n\t\t\tedges.push(\"('\" + from + \"', '\" + to + \"')\");\n\t\t}\n\t\tlet anEdges = edges.length === 1 ? \"an edge\" : \"edges\";\n\t\tthis.message = `This graph has ${anEdges} ${edges.join(\", \")}`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when specific edges are expected to exist, but don't.\n * @extends Error\n */\nGraph.EdgeNotExistsError = class EdgeNotExistsError extends Error {\n\tconstructor(from, to) {\n\t\tsuper();\n\t\t/**\n\t\t * the set of relevant edges\n\t\t * @public\n\t\t * @constant edges\n\t\t * @memberof Graph.EdgeNotExistsError\n\t\t * @instance\n\t\t * @type {Set.<{ from: string, to: string }>}\n\t\t */\n\t\tthis.edges = new Set();\n\t\tthis.e(from, to);\n\t}\n\te(from, to) {\n\t\tthis.edges.add({ from, to });\n\t\tthis._refreshMessage();\n\t\treturn this;\n\t}\n\t_refreshMessage() {\n\t\tlet edges = [];\n\t\tfor (let {from, to} of this.edges) {\n\t\t\tedges.push(\"('\" + from + \"', '\" + to + \"')\");\n\t\t}\n\t\tlet anEdges = edges.length === 1 ? \"an edge\" : \"edges\";\n\t\tthis.message = `This graph does not have ${anEdges} ${edges.join(\", \")}`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when a vertex is expected not to have connected edges, but does.\n * @extends Error\n */\nGraph.HasConnectedEdgesError = class HasConnectedEdgesError extends Error {\n\tconstructor(key) {\n\t\tsuper();\n\t\t/**\n\t\t * the key of the relevant vertex\n\t\t * @public\n\t\t * @constant key\n\t\t * @memberof Graph.HasConnectedEdgesError\n\t\t * @instance\n\t\t * @type {string}\n\t\t */\n\t\tthis.key = key;\n\t\tthis.message = `The '${key}' vertex has connected edges`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when a graph is expected not to have a directed cycle, but does.\n * @extends Error\n */\nGraph.CycleError = class CycleError extends Error {\n\tconstructor(cycle) {\n\t\tsuper();\n\t\t/**\n\t\t * the vertices involved in the cycle\n\t\t * @public\n\t\t * @constant cycle\n\t\t * @memberof Graph.CycleError\n\t\t * @instance\n\t\t * @type {Array.<string>}\n\t\t */\n\t\tthis.cycle = cycle;\n\t\tthis.message = `This graph contains a cycle: ${cycle}`;\n\t}\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/graph.es6.js\n **/"]}