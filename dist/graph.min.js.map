{"version":3,"file":"graph.js","sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///webpack/bootstrap fcb1c3b8f21b02f96dd0?fda5","webpack:///./src/private.es6.js?1619","webpack:///./src/graph.es6.js?8eb6"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","id","loaded","modules","call","m","c","p","_vertices","Symbol","_edges","_reverseEdges","_sources","_sinks","_edgeCount","_extractTwoArgs","_extractThreeArgs","_listeners","_trigger","_verticesFrom","_verticesTo","_edgesFrom","_edgesTo","_verticesWithPathTo","_verticesWithPathFrom","_paths","_expectVertices","_expectVerticesAbsent","_expectEdges","_expectEdgesAbsent","_expectNoConnectedEdges","Graph","parts","Array","_len","_key","arguments","_vertices$_edges$_reverseEdges$_sources$_sinks$_edgeCount$_listeners$_extractTwoArgs$_extractThreeArgs$_trigger$_verticesFrom$_verticesTo$_edgesFrom$_edgesTo$_verticesWithPathTo$_verticesWithPathFrom$_paths$_expectVertices$_expectVerticesAbsent$_expectEdges$_expectEdgesAbsent$_expectNoConnectedEdges","Map","Set","_iterator","iterator","_step","_iteratorNormalCompletion","next","done","key","_step$value","value","isArray","createEdge","addVertex","on","event","handler","has","set","get","add","off","_iterator2","_step2","_iteratorNormalCompletion2","addNewVertex","_Graph$_extractTwoArgs2","setVertex","_Graph$_extractTwoArgs32","ensureVertex","_Graph$_extractTwoArgs42","hasVertex","_Graph$_extractTwoArgs52","removeExistingVertex","destroyExistingVertex","_iterator3","verticesFrom","_step3","_iteratorNormalCompletion3","to","_step3$value","removeEdge","_iterator4","verticesTo","_step4","_iteratorNormalCompletion4","from","_step4$value","removeVertex","destroyVertex","vertexCount","size","vertex","vertexValue","addNewEdge","_Graph$_extractThreeArgs2","createNewEdge","_Graph$_extractThreeArgs32","setEdge","_Graph$_extractThreeArgs42","spanEdge","_Graph$_extractThreeArgs52","hasEdge","addEdge","_Graph$_extractThreeArgs62","ensureEdge","_Graph$_extractThreeArgs72","_Graph$_extractThreeArgs82","removeExistingEdge","_Graph$_extractTwoArgs62","inDegree","outDegree","_Graph$_extractTwoArgs72","edgeCount","_Graph$_extractTwoArgs82","edge","_Graph$_extractTwoArgs92","edgeValue","_Graph$_extractTwoArgs102","undefined","vertices","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","_step5$value","edges","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_iterator6","_step6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_iterator7","_step7","keys","callee$1$0","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_iterator8","_step8","callee$1$1","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_iterator9","_step9","edgesFrom","callee$1$2","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_iterator10","_step10","edgesTo","callee$1$3","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_iterator11","_step11","verticesWithPathFrom","callee$1$4","_step12$value","verticesWithPathTo","callee$1$5","_step13$value","sources","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_iterator14","_step14","sinks","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_iterator15","_step15","clearEdges","_iterator16","_step16","_iteratorNormalCompletion16","_step16$value","clear","_iterator17","_step17","_iteratorNormalCompletion17","_step17$value","equals","other","eqV","x","y","eqE","_iterator18","_step18","_iteratorNormalCompletion18","_step18$value","_iterator19","_step19","_iteratorNormalCompletion19","_step19$value","apply","cycles","pointStack","markedStack","mark","_this","backtrack","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_iterator20","_step20","_step20$value","a","v","out","w","o","u","push","_arr$_i","found","pop","map","regeneratorRuntime","cycle","result","hasCycle","paths","_Graph$_extractTwoArgs112","callee$1$6","stack","pathsFromPrefix","current","_step21$value","indexOf","path","hasPath","degree","mergeIn","mV","v1","v2","mE","_iterator22","_step22","_iteratorNormalCompletion22","_step22$value","_iterator23","_step23","_iteratorNormalCompletion23","_step23$value","clone","trV","trE","transitiveReduction","_iterator24","_step24","_iteratorNormalCompletion24","_step24$value","_iterator25","_step25","_iteratorNormalCompletion25","_step25$value","_iterator26","_step26","_iteratorNormalCompletion26","z","_step26$value","contractPaths","isNexus","nexuses","concat","_toConsumableArray","filter","_ref","_ref2","val","_this2","_ref3","_ref32","unhandledVertices","_ref4","_ref42","checkForBlCycle","_iterator27","_step27","_iteratorNormalCompletion27","_step27$value","_iterator28","_step28","_iteratorNormalCompletion28","_step28$value","_iterator29","_iteratorNormalCompletion29","_step29","startingKey","values","BranchlessCycleError","contractionsToAdd","startPath","start","backwards","fromTo","strt","nxt","verticesNext","verticesToRemove","edgesToRemove","constructor","_ref5","_iterator30","_step30","_iteratorNormalCompletion30","_iterator31","_step31","_iteratorNormalCompletion31","_iterator32","_step32","_iteratorNormalCompletion32","first","_iterator34","_step34","_iteratorNormalCompletion34","_step34$value","_iterator35","_step35","_iteratorNormalCompletion35","_step35$value","_iterator33","_step33","_iteratorNormalCompletion33","_step33$value","toVal","_iterator36","_step36","_iteratorNormalCompletion36","_step36$value","rememberedPath","_len2","_key2","missingVertices","k","_this3","length","_bind","VertexNotExistsError","_len3","_key3","presentVertices","_this4","VertexExistsError","_len4","_key4","absentEdges","_this5","EdgeNotExistsError","_len5","_key5","presentEdges","_this6","EdgeExistsError","_iterator37","_step37","_iteratorNormalCompletion37","_step37$value","_iterator38","_step38","_iteratorNormalCompletion38","_step38$value","HasConnectedEdgesError","b","_temp2","_temp32","_Error","_len6","_key6","_get","Object","getPrototypeOf","prototype","message","_ref6","_ref62","join","Error","_Error2","_len7","_key7","_Error3","_len8","_key8","_ref7","_ref72","_Error4","_len9","_key9","_ref8","_ref82","_Graph$EdgeExistsError","_len10","_key10","_ref9","_ref92","CycleError","_Error5","_Graph$CycleError"],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Graph\"] = factory();\n\telse\n\t\troot[\"Graph\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap fcb1c3b8f21b02f96dd0\n **/","//  ////////////////////////////////////////////////////////////////////////////////////////////////\n//  // Symbols for private members /////////////////////////////////////////////////////////////////\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n\nexport const _vertices               = Symbol(\"vertices\");\nexport const _edges                  = Symbol(\"edges\");\nexport const _reverseEdges           = Symbol(\"reverse edges\");\nexport const _sources                = Symbol(\"sources\");\nexport const _sinks                  = Symbol(\"sinks\");\nexport const _edgeCount              = Symbol(\"edge count\");\n\nexport const _extractTwoArgs         = Symbol(\"extract ([a, b]) or (a, b) arguments\");\nexport const _extractThreeArgs       = Symbol(\"extract ([[a, b], c]), ([a, b], c) or (a, b, c) arguments\");\n\nexport const _listeners              = Symbol(\"listeners\");\nexport const _trigger                = Symbol(\"trigger\");\n\nexport const _verticesFrom           = Symbol(\"vertices from\");\nexport const _verticesTo             = Symbol(\"vertices to\");\nexport const _edgesFrom              = Symbol(\"edges from\");\nexport const _edgesTo                = Symbol(\"edges to\");\nexport const _verticesWithPathTo     = Symbol(\"vertices with path to\");\nexport const _verticesWithPathFrom   = Symbol(\"vertices with path from\");\nexport const _paths                  = Symbol(\"paths\");\n\nexport const _expectVertices         = Symbol(\"expect vertices\");\nexport const _expectVerticesAbsent   = Symbol(\"expect vertex absent\");\nexport const _expectEdges            = Symbol(\"expect edge\");\nexport const _expectEdgesAbsent      = Symbol(\"expect edge absent\");\nexport const _expectNoConnectedEdges = Symbol(\"expect no connected edges\");\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/private.es6.js\n **/","import {\n\t_vertices, _edges, _reverseEdges, _sources, _sinks, _edgeCount, _listeners,\n\t_extractTwoArgs, _extractThreeArgs, _trigger,\n\t_verticesFrom, _verticesTo, _edgesFrom, _edgesTo,\n\t_verticesWithPathTo, _verticesWithPathFrom, _paths,\n\t_expectVertices, _expectVerticesAbsent, _expectEdges, _expectEdgesAbsent,_expectNoConnectedEdges\n} from './private.es6.js';\n\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n//  // JSDoc stuff /////////////////////////////////////////////////////////////////////////////////\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n\n/**\n * an object conforming to the {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol|ES6 iterator protocol};\n * Note that ES6 offers nice syntax for dealing with iterators.\n * @typedef {Object} Iterator\n * @property {function(): { done: boolean, value: * }} next - a zero arguments function that returns an object `{ done, value }`\n *                                                            <ul><li>If `done === false`, then `value` is the next value in the iterated sequence.</li>\n *                                                                <li>If `done === true`, the iterator is past the end of the iterated sequence.   </li></ul>\n */\n\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n//  // Graph class /////////////////////////////////////////////////////////////////////////////////\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @class Graph\n * @classdesc The main class of this library, to be used for representing a mathematical (di)graph.\n *\n * @description Constructor arguments can be used to supply initial vertices and edges.\n * @param parts {...Array}\n *        a short notation for vertices and edges to initially add to the graph;\n *        A vertex should be an array of the form `[key, value]`.\n *        An edge should be an array of the form `[[from, to], value]`.\n *        Later values of vertices or edges in this list will overwrite earlier\n *        values, but vertices need not precede their edges. Vertices that are\n *        connected but store no value need not be listed at all.\n * @example\n * var map = new Graph(\n *     ['Amsterdam',             { population: 825000 }], // vertex\n *     ['Leiden',                { population: 122000 }], // vertex\n *     [['Amsterdam', 'Leiden'], { distance:   \"40km\" }]  // edge\n * );\n */\nexport default class Graph {\n\n\tconstructor(...parts) {\n\t\t/* storage */\n\t\tthis[_vertices]     = new Map(); // Map.< string, * >\n\t\tthis[_edges]        = new Map(); // Map.< string, Map.<string, *> >\n\n\t\t/* bookkeeping */\n\t\tthis[_reverseEdges] = new Map(); // Map.< string, Set.<*> >\n\t\tthis[_sources]      = new Set(); // Set.< string >\n\t\tthis[_sinks]        = new Set(); // Set.< string >\n\t\tthis[_edgeCount]    = 0;\n\n\t\t/* listeners */\n\t\tthis[_listeners] = new Map();\n\n\t\t/* add vertices and values from constructor arguments */\n\t\tfor (let [key, value] of parts) {\n\t\t\tif (Array.isArray(key)) {/////////////// an edge\n\t\t\t\tthis.createEdge(key, value);\n\t\t\t} else {//////////////////////////////// a vertex\n\t\t\t\tthis.addVertex(key, value);\n\t\t\t}\n\t\t}\n\t}\n\n\t////////////////////////////////////////////////////////\n\t////////// Static private convenience methods //////////\n\t////////////////////////////////////////////////////////\n\n\tstatic [_extractTwoArgs](a, b) {\n\t\treturn Array.isArray(a) ? a : [a, b];\n\t}\n\n\tstatic [_extractThreeArgs](a, b, c) {\n\t\tif (Array.isArray(a)) { [a, b, c] = [...a, b] }\n\t\tif (Array.isArray(a)) { [a, b, c] = [...a, b] }\n\t\treturn [a, b, c];\n\t}\n\n\t/////////////////////////////////////\n\t////////// Event Handling //////////\n\t/////////////////////////////////////\n\n\t/**\n\t * Register an event handler.\n\t * @param event   {string}   the event to listen for\n\t * @param handler {Function} the function to call for each such event fired, receiving its corresponding value\n\t */\n\ton(event, handler) {\n\t\tif (!this[_listeners].has(event)) {\n\t\t\tthis[_listeners].set(event, new Set());\n\t\t}\n\t\tthis[_listeners].get(event).add(handler);\n\t}\n\n\t/**\n\t * Deregister a previously registered event handler.\n\t * @param event   {string}   the event used to originally register a handler\n\t * @param handler {Function} the handler originally registered\n\t */\n\toff(event, handler) {\n\t\tif (this[_listeners].has(event)) {\n\t\t\tthis[_listeners].get(event).delete(handler);\n\t\t}\n\t}\n\n\t[_trigger](event, value) {\n\t\tfor (let handler of this[_listeners].get(event) || []) {\n\t\t\thandler(value);\n\t\t}\n\t}\n\n\t/**\n\t * An event that is triggered just after a vertex is added to this graph.\n\t * Handlers receive the new vertex `[key, value]` as an argument.\n\t * @event vertex-added\n\t * @memberof Graph\n\t * @instance\n\t * @see {@link Graph#on}\n\t * @see {@link Graph#off}\n\t */\n\t/**\n\t * An event that is triggered just after a vertex is removed from this graph.\n\t * Handlers receive the vertex key as an argument.\n\t * @event vertex-removed\n\t * @memberof Graph\n\t * @instance\n\t * @see {@link Graph#on}\n\t * @see {@link Graph#off}\n\t */\n\t/**\n\t * An event that is triggered after a vertex in this graph is modified.\n\t * It is also triggered after any {@link #Graph#event_vertex-added|\"vertex-added\"} event.\n\t * Handlers receive the vertex `[key, value]` as an argument.\n\t * @event vertex-modified\n\t * @memberof Graph\n\t * @instance\n\t * @see {@link Graph#on}\n\t * @see {@link Graph#off}\n\t */\n\t/**\n\t * An event that is triggered just after an edge is added to this graph.\n\t * Handlers receive the new edge `[[from, to], value]` as an argument.\n\t * @event edge-added\n\t * @memberof Graph\n\t * @instance\n\t * @see {@link Graph#on}\n\t * @see {@link Graph#off}\n\t */\n\t/**\n\t * An event that is triggered just after an edge is removed from this graph.\n\t * Handlers receive the edge key `[from, to]` as an argument.\n\t * @event edge-removed\n\t * @memberof Graph\n\t * @instance\n\t * @see {@link Graph#on}\n\t * @see {@link Graph#off}\n\t */\n\t/**\n\t * An event that is triggered after an edge in this graph is modified.\n\t * It is also triggered after any {@link #Graph#event_edge-added|\"edge-added\"} event.\n\t * Handlers receive the edge `[[from, to], value]` as an argument.\n\t * @event edge-modified\n\t * @memberof Graph\n\t * @instance\n\t * @see {@link Graph#on}\n\t * @see {@link Graph#off}\n\t */\n\n\n\t//////////////////////////////\n\t////////// Vertices //////////\n\t//////////////////////////////\n\n\t////////// creating them //////////\n\n\t/**\n\t * Add a new vertex to this graph.\n\t * @throws {Graph.VertexExistsError} if a vertex with this key already exists\n\t * @param  key    {string} the key with which to refer to this new vertex\n\t * @param [value] {*}      the value to store in this new vertex\n\t */ // TODO: allow [key, value] array to be given as argument in docs\n\taddNewVertex(key, value) {\n\t\t[key, value] = Graph[_extractTwoArgs](key, value);\n\t\tthis[_expectVerticesAbsent](key);\n\t\tthis[_vertices].set(key, value);\n\t\tthis[_edges].set(key, new Map());\n\t\tthis[_reverseEdges].set(key, new Set());\n\t\tthis[_sources].add(key);\n\t\tthis[_sinks].add(key);\n\t\tthis[_trigger]('vertex-added',    [key, value]);\n\t\tthis[_trigger]('vertex-modified', [key, value]);\n\t}\n\n\t/**\n\t * Set the value of an existing vertex in this graph.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param  key    {string} the key belonging to the vertex\n\t * @param [value] {*}      the value to store in this vertex\n\t */ // TODO: allow [key, value] array to be given as argument in docs\n\tsetVertex(key, value) {\n\t\t[key, value] = Graph[_extractTwoArgs](key, value);\n\t\tthis[_expectVertices](key);\n\t\tthis[_vertices].set(key, value);\n\t\tthis[_trigger]('vertex-modified', [key, value]);\n\t}\n\n\t/**\n\t * Make sure a vertex with a specific key exists in this graph. If it already exists,\n\t * do nothing. If it does not yet exist, add a new vertex with the given value.\n\t * @param  key    {string} the key for the vertex\n\t * @param [value] {*}      the value to store if a new vertex is added\n\t */ // TODO: allow [key, value] array to be given as argument in docs\n\tensureVertex(key, value) {\n\t\t[key, value] = Graph[_extractTwoArgs](key, value);\n\t\tif (!this.hasVertex(key)) {\n\t\t\tthis.addNewVertex(key, value);\n\t\t}\n\t}\n\n\t/**\n\t * Add a new vertex to this graph. If a vertex with this key already exists,\n\t * the value of that vertex is overwritten.\n\t * @param  key    {string} the key with which to refer to this new vertex\n\t * @param [value] {*}      the value to store in this new vertex\n\t */ // TODO: allow [key, value] array to be given as argument in docs\n\taddVertex(key, value) {\n\t\t[key, value] = Graph[_extractTwoArgs](key, value);\n\t\tif (this.hasVertex(key)) {\n\t\t\tthis.setVertex(key, value);\n\t\t} else {\n\t\t\tthis.addNewVertex(key, value);\n\t\t}\n\t}\n\n\n\t////////// removing them //////////\n\n\t/**\n\t * Remove an existing vertex from this graph.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @throws {Graph.HasConnectedEdgesError} if there are still edges connected to this vertex\n\t * @param key {string} the key of the vertex to remove\n\t */\n\tremoveExistingVertex(key) {\n\t\tthis[_expectVertices](key);\n\t\tthis[_expectNoConnectedEdges](key);\n\t\tthis[_vertices].delete(key);\n\t\tthis[_sources].delete(key);\n\t\tthis[_sinks].delete(key);\n\t\tthis[_trigger]('vertex-removed', key);\n\t}\n\n\t/**\n\t * Remove an existing vertex from this graph, as well as all edges connected to it.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param key {string} the key of the vertex to remove\n\t */\n\tdestroyExistingVertex(key) {\n\t\tthis[_expectVertices](key);\n\t\tfor (let [to] of this.verticesFrom(key)) { this.removeEdge(key,  to ) }\n\t\tfor (let [from] of this.verticesTo(key)) { this.removeEdge(from, key) }\n\t\tthis.removeExistingVertex(key);\n\t}\n\n\t/**\n\t * Remove an existing vertex from this graph.\n\t * If a vertex with this key does not exist, nothing happens.\n\t * @throws {Graph.HasConnectedEdgesError} if there are still edges connected to this vertex\n\t * @param key {string} the key of the vertex to remove\n\t */\n\tremoveVertex(key) {\n\t\tif (this.hasVertex(key)) {\n\t\t\tthis.removeExistingVertex(key);\n\t\t}\n\t}\n\n\t/**\n\t * Remove a vertex from this graph, as well as all edges connected to it.\n\t * If a vertex with this key does not exist, nothing happens.\n\t * @param key {string} the key of the vertex to remove\n\t */\n\tdestroyVertex(key) {\n\t\tif (this.hasVertex(key)) {\n\t\t\tthis.destroyExistingVertex(key);\n\t\t}\n\t}\n\n\n\t////////// querying them //////////\n\n\t/**\n\t * @returns {number} the number of vertices in the whole graph\n\t */\n\tvertexCount() { return this[_vertices].size }\n\n\t/**\n\t * Ask whether a vertex with a given key exists.\n\t * @param key {string} the key to query\n\t * @returns {boolean} whether there is a vertex with the given key\n\t */\n\thasVertex(key) { return this[_vertices].has(key) }\n\n\t/**\n\t * Get the key/value pair representing the vertex with the given `key`.\n\t * @param key {string} the key to query\n\t * @throws {Graph.VertexNotExistsError} if the `key` vertex does not exist in the graph\n\t * @returns {Array} a `[key, value]` shaped array representing the vertex\n\t */\n\tvertex(key) {\n\t\tthis[_expectVertices](key);\n\t\treturn [key, this.vertexValue(key)];\n\t}\n\n\t/**\n\t * Get the value associated with the vertex of a given `key`.\n\t * @param key {string} the key to query\n\t * @returns {*} the value associated with the vertex of the given key.\n\t * Note that a return value of `undefined` can mean\n\t *\n\t * 1. that there is no such vertex, or\n\t * 2. that the stored value is actually `undefined`.\n\t *\n\t * Use {@link Graph#hasVertex} to distinguish these cases.\n\t */\n\tvertexValue(key) { return this[_vertices].get(key) }\n\n\n\t///////////////////////////\n\t////////// Edges //////////\n\t///////////////////////////\n\n\t////////// adding them //////////\n\n\t/**\n\t * Add a new edge to this graph.\n\t * @throws {Graph.EdgeExistsError} if an edge between `from` and `to` already exists\n\t * @throws {Graph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store in this new edge\n\t */ // TODO: allow [from, to], value array to be given as argument in docss; or [[from, to], value] as single argument\n\taddNewEdge(from, to, value) {\n\t\t[from, to, value] = Graph[_extractThreeArgs](from, to, value);\n\t\tthis[_expectEdgesAbsent]([from, to]);\n\t\tthis[_expectVertices](from, to);\n\t\tthis[_edges].get(from).set(to, value);\n\t\tthis[_reverseEdges].get(to).add(from);\n\t\tthis[_edgeCount] += 1;\n\t\tthis[_sources].delete(to);\n\t\tthis[_sinks].delete(from);\n\t\tthis[_trigger]('edge-added',    [[from, to], value]);\n\t\tthis[_trigger]('edge-modified', [[from, to], value]);\n\t}\n\n\t/**\n\t * Add a new edge to this graph. If the `from` and/or `to` vertices do not yet exist\n\t * in the graph, they are implicitly added with an `undefined` value.\n\t * @throws {Graph.EdgeExistsError} if an edge between `from` and `to` already exists\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store in this new edge\n\t */ // TODO: allow [from, to], value array to be given as argument in docss; or [[from, to], value] as single argument\n\tcreateNewEdge(from, to, value) {\n\t\t[from, to, value] = Graph[_extractThreeArgs](from, to, value);\n\t\tthis[_expectEdgesAbsent]([from, to]);\n\t\tthis.ensureVertex(from);\n\t\tthis.ensureVertex(to);\n\t\tthis.addNewEdge(from, to, value);\n\t}\n\n\t/**\n\t * Set the value of an existing edge in this graph.\n\t * @throws {Graph.EdgeNotExistsError} if an edge between `from` and `to` does not yet exist\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store in this edge\n\t */ // TODO: allow [from, to], value array to be given as argument in docss; or [[from, to], value] as single argument\n\tsetEdge(from, to, value) {\n\t\t[from, to, value] = Graph[_extractThreeArgs](from, to, value);\n\t\tthis[_expectEdges]([from, to]);\n\t\tthis[_edges].get(from).set(to, value);\n\t\tthis[_trigger]('edge-modified', [[from, to], value]);\n\t}\n\n\t/**\n\t * Make sure an edge between the `from` and `to` vertices in this graph.\n\t * If one already exists, nothing is done.\n\t * If one does not yet exist, a new edge is added with the given value.\n\t * @throws {Graph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store if a new edge is added\n\t */ // TODO: allow [from, to], value array to be given as argument in docss; or [[from, to], value] as single argument\n\tspanEdge(from, to, value) {\n\t\t[from, to, value] = Graph[_extractThreeArgs](from, to, value);\n\t\tthis[_expectVertices](from, to);\n\t\tif (!this.hasEdge(from, to)) {\n\t\t\tthis.addNewEdge(from, to, value);\n\t\t}\n\t}\n\n\t/**\n\t * Add a new edge to this graph. If an edge between `from` and `to` already exists,\n\t * the value of that edge is overwritten.\n\t * @throws {Graph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store in this new edge\n\t */ // TODO: allow [from, to], value array to be given as argument in docss; or [[from, to], value] as single argument\n\taddEdge(from, to, value) {\n\t\t[from, to, value] = Graph[_extractThreeArgs](from, to, value);\n\t\tif (this.hasEdge(from, to)) {\n\t\t\tthis.setEdge(from, to, value);\n\t\t} else {\n\t\t\tthis.addNewEdge(from, to, value);\n\t\t}\n\t}\n\n\t/**\n\t * Make sure an edge between the `from` and `to` vertices exists in this graph.\n\t * If it already exists, nothing is done.\n\t * If it does not yet exist, a new edge is added with the given value.\n\t * If the `from` and/or `to` vertices do not yet exist\n\t * in the graph, they are implicitly added with an `undefined` value.\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store if a new edge is added\n\t */ // TODO: allow [from, to], value array to be given as argument in docss; or [[from, to], value] as single argument\n\tensureEdge(from, to, value) {\n\t\t[from, to, value] = Graph[_extractThreeArgs](from, to, value);\n\t\tif (!this.hasEdge(from, to)) {\n\t\t\tthis.createNewEdge(from, to, value);\n\t\t}\n\t}\n\n\t/**\n\t * Add a new edge to this graph. If an edge between the `from` and `to`\n\t * vertices already exists, the value of that edge is overwritten.\n\t * If the `from` and/or `to` vertices do not yet exist\n\t * in the graph, they are implicitly added with an `undefined` value.\n\t * @param  from   {string} the key for the originating vertex\n\t * @param  to     {string} the key for the terminating vertex\n\t * @param [value] {*}      the value to store if a new edge is added\n\t */ // TODO: allow [from, to], value array to be given as argument in docss; or [[from, to], value] as single argument\n\tcreateEdge(from, to, value) {\n\t\t[from, to, value] = Graph[_extractThreeArgs](from, to, value);\n\t\tif (this.hasEdge(from, to)) {\n\t\t\tthis.setEdge(from, to, value);\n\t\t} else {\n\t\t\tthis.createNewEdge(from, to, value);\n\t\t}\n\t}\n\n\n\t////////// removing them //////////\n\n\t/**\n\t * Remove an existing edge from this graph.\n\t * @throws {Graph.EdgeNotExistsError} if an edge between the `from` and `to` vertices doesn't exist\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t */ // TODO: allow [from, to] array to be given as argument in docs\n\tremoveExistingEdge(from, to) {\n\t\t[from, to] = Graph[_extractTwoArgs](from, to);\n\t\tthis[_expectEdges]([from, to]);\n\t\tthis[_edges].get(from).delete(to);\n\t\tthis[_reverseEdges].get(to).delete(from);\n\t\tthis[_edgeCount] -= 1;\n\t\tif (this. inDegree(to)   === 0) { this[_sources].add(to) }\n\t\tif (this.outDegree(from) === 0) { this[_sinks].add(from) }\n\t\tthis[_trigger]('edge-removed', [from, to]);\n\t}\n\n\t/**\n\t * Remove an edge from this graph.\n\t * If an edge between the `from` and `to` vertices doesn't exist, nothing happens.\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t */ // TODO: allow [from, to] array to be given as argument in docs\n\tremoveEdge(from, to) {\n\t\t[from, to] = Graph[_extractTwoArgs](from, to);\n\t\tif (this.hasEdge(from, to)) {\n\t\t\tthis.removeExistingEdge(from, to);\n\t\t}\n\t}\n\n\n\t////////// querying them //////////\n\n\t/**\n\t * @returns {number} the number of edges in the whole graph\n\t */\n\tedgeCount() { return this[_edgeCount] }\n\n\t/**\n\t * Ask whether an edge between given `from` and `to` vertices exist.\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t * @returns {boolean} whether there is an edge between the given `from` and `to` vertices\n\t */ // TODO: allow [from, to] array to be given as argument in docs\n\thasEdge(from, to) {\n\t\t[from, to] = Graph[_extractTwoArgs](from, to);\n\t\treturn this.hasVertex(from) &&\n\t\t\tthis.hasVertex(to) &&\n\t\t\tthis[_edges].has(from) &&\n\t\t\tthis[_edges].get(from).has(to);\n\t}\n\n\t/**\n\t * Get the key/value pair representing the edge between the given `from` and `to`.\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t * @returns {Array} a `[[from, to], value]` shaped array representing the edge\n\t */ // TODO: allow [from, to] array to be given as argument in docs\n\tedge(from, to) {\n\t\t[from, to] = Graph[_extractTwoArgs](from, to);\n\t\tthis[_expectEdges]([from, to]);\n\t\treturn [[from, to], this.edgeValue(from, to)];\n\t}\n\n\t/**\n\t * Get the value associated with the edge between given `from` and `to` vertices.\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t * @returns {*} the value associated with the edge between the given `from` and `to` vertices\n\t * Note that a return value of `undefined` can mean\n\t *\n\t * 1. that there is no such edge, or\n\t * 2. that the stored value is actually `undefined`.\n\t *\n\t * Use {@link Graph#hasEdge} to distinguish these cases.\n\t */ // TODO: allow [from, to] array to be given as argument in docs\n\tedgeValue(from, to) {\n\t\t[from, to] = Graph[_extractTwoArgs](from, to);\n\t\treturn this.hasEdge(from, to) ? this[_edges].get(from).get(to) : undefined;\n\t}\n\n\n\t///////////////////////////////////////////////\n\t//////////// ES6 Iterable interfaces //////////\n\t///////////////////////////////////////////////\n\n\t/**\n\t * Iterate over all vertices of the graph, in no particular order.\n\t * @returns {Iterator} an ES6 iterator yielding vertices\n\t * @example\n\t * for (var it = graph.vertices(), kv; !(kv = it.next()).done;) {\n\t *     var key   = kv.value[0],\n\t *         value = kv.value[1];\n\t *     // iterates over all vertices of the graph\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.vertices()) {\n\t *     // iterates over all vertices of the graph\n\t * }\n\t * @see {@link Graph#@@iterator}\n\t */\n\t*vertices() {\n\t\tlet done = new Set();\n\t\tfor (let [key] of this[_vertices]) {\n\t\t\tif (this.hasVertex(key) && !done.has(key)) {\n\t\t\t\tdone.add(key);\n\t\t\t\tyield this.vertex(key);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * A {@link Graph} object is itself {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol|iterable},\n\t * and serves as a short notation in ECMAScript 6 to iterate over all vertices in the graph, in no particular order.\n\t * @method Graph#@@iterator\n\t * @returns {Iterator} an ES6 iterator yielding vertices\n\t * @example\n\t * for (let [key, value] of graph) {\n\t *     // iterates over all vertices of the graph\n\t * }\n\t * @see {@link Graph#vertices}\n\t */\n\t[Symbol.iterator]() { return this.vertices() }\n\n\t/**\n\t * Iterate over all edges of the graph, in no particular order.\n\t * @returns {Iterator} an ES6 iterator yielding edges\n\t * @example\n\t * for (var it = graph.edges(), kv; !(kv = it.next()).done;) {\n\t *     var from  = kv.value[0][0],\n\t *         to    = kv.value[0][1],\n\t *         value = kv.value[1];\n\t *     // iterates over all edges of the graph\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [[from, to], value] of graph.edges()) {\n\t *     // iterates over all vertices of the graph\n\t * }\n\t */\n\t*edges() {\n\t\tlet done = new Map();\n\t\tfor (let from of this[_edges].keys()) {\n\t\t\tdone.set(from, new Set());\n\t\t\tfor (let to of this[_edges].get(from).keys()) {\n\t\t\t\tif (!done.get(from).has(to) && this.hasEdge(from, to)) {\n\t\t\t\t\tdone.get(from).add(to);\n\t\t\t\t\tyield this.edge(from, to);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over the vertices directly reachable from a given vertex in the graph, in no particular order.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with the given `from` key does not exist\n\t * @param key {string} the key of the vertex to take the outgoing edges from\n\t * @returns {Iterator} an ES6 iterator yielding vertices\n\t * @example\n\t * for (var it = graph.verticesFrom(from), kv; !(kv = it.next()).done;) {\n\t *     var to    = kv.value[0],\n\t *         value = kv.value[1];\n\t *     // iterates over all outgoing vertices of the `from` vertex\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [to, value] of graph.verticesFrom(from)) {\n\t *     // iterates over all outgoing vertices of the `from` vertex\n\t * }\n\t */\n\tverticesFrom(key) {\n\t\tthis[_expectVertices](key);\n\t\treturn this[_verticesFrom](key);\n\t}\n\t*[_verticesFrom](from) {\n\t\tlet done = new Set();\n\t\tfor (let to of this[_edges].get(from).keys()) {\n\t\t\tif (!done.has(to) && this.hasEdge(from, to)) {\n\t\t\t\tdone.add(to);\n\t\t\t\tyield this.vertex(to);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over the vertices from which a given vertex in the graph is directly reachable, in no particular order.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with the given `to` key does not exist\n\t * @param key {string} the key of the vertex to take the incoming edges from\n\t * @returns {Iterator} an ES6 iterator yielding vertices\n\t * @example\n\t * for (var it = graph.verticesTo(to), kv; !(kv = it.next()).done;) {\n\t *     var from  = kv.value[0],\n\t *         value = kv.value[1];\n\t *     // iterates over all outgoing vertices of the `to` vertex\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [from, value] of graph.verticesTo(to)) {\n\t *     // iterates over all incoming vertices of the `to` vertex\n\t * }\n\t */\n\tverticesTo(key) {\n\t\tthis[_expectVertices](key);\n\t\treturn this[_verticesTo](key);\n\t}\n\t*[_verticesTo](to) {\n\t\tlet done = new Set();\n\t\tfor (let from of this[_reverseEdges].get(to)) {\n\t\t\tif (!done.has(from) && this.hasEdge(from, to)) {\n\t\t\t\tdone.add(from);\n\t\t\t\tyield this.vertex(from);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over the outgoing edges of a given vertex in the graph, in no particular order.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with the given `from` key does not exist\n\t * @param key {string} the key of the vertex to take the outgoing edges from\n\t * @returns {Iterator} an ES6 iterator yielding edges\n\t * @example\n\t * for (var it = graph.edgesFrom(from), kv; !(kv = it.next()).done;) {\n\t *     var from  = kv.value[0][0],\n\t *         to    = kv.value[0][1],\n\t *         value = kv.value[1];\n\t *     // iterates over all outgoing edges of the `from` vertex\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [[from, to], value] of graph.edgesFrom(from)) {\n\t *     // iterates over all outgoing edges of the `from` vertex\n\t * }\n\t */\n\tedgesFrom(key) {\n\t\tthis[_expectVertices](key);\n\t\treturn this[_edgesFrom](key);\n\t}\n\t*[_edgesFrom](from) {\n\t\tlet done = new Set();\n\t\tfor (let to of this[_edges].get(from).keys()) {\n\t\t\tif (!done.has(to) && this.hasEdge(from, to)) {\n\t\t\t\tdone.add(to);\n\t\t\t\tyield this.edge(from, to);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over the incoming edges of a given vertex in the graph, in no particular order.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with the given `to` key does not exist\n\t * @param key {string} the key of the vertex to take the incoming edges from\n\t * @returns {Iterator} an ES6 iterator yielding edges\n\t * @example\n\t * for (var it = graph.edgesTo(to), kv; !(kv = it.next()).done;) {\n\t *     var from  = kv.value[0][0],\n\t *         to    = kv.value[0][1],\n\t *         value = kv.value[1];\n\t *     // iterates over all incoming edges of the `to` vertex\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [[from, to], value] of graph.edgesTo(to)) {\n\t *     // iterates over all incoming edges of the `to` vertex\n\t * }\n\t */\n\tedgesTo(key) {\n\t\tthis[_expectVertices](key);\n\t\treturn this[_edgesTo](key);\n\t}\n\t*[_edgesTo](to) {\n\t\tlet done = new Set();\n\t\tfor (let from of this[_reverseEdges].get(to)) {\n\t\t\tif (!done.has(from) && this.hasEdge(from, to)) {\n\t\t\t\tdone.add(from);\n\t\t\t\tyield this.edge(from, to);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over all vertices reachable from a given vertex in the graph, in no particular order.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with the given `from` key does not exist\n\t * @param from {string} the key of the vertex to take the reachable vertices from\n\t * @returns {Iterator} an ES6 iterator yielding vertices\n\t * @example\n\t * for (var it = graph.verticesWithPathFrom(from), kv; !(kv = it.next()).done;) {\n\t *     var key   = kv.value[0],\n\t *         value = kv.value[1];\n\t *     // iterates over all vertices reachable from `from`\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.verticesWithPathFrom(from)) {\n\t *     // iterates over all vertices reachable from `from`\n\t * }\n\t */\n\tverticesWithPathFrom(from) {\n\t\tthis[_expectVertices](from);\n\t\treturn this[_verticesWithPathFrom](from, new Set());\n\t}\n\t*[_verticesWithPathFrom](from, done) {\n\t\tfor (let [to] of this.verticesFrom(from)) {\n\t\t\tif (!done.has(to) && this.hasEdge(from, to)) {\n\t\t\t\tdone.add(to);\n\t\t\t\tyield this.vertex(to);\n\t\t\t\tyield* this[_verticesWithPathFrom](to, done);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over all vertices from which a given vertex in the graph can be reached, in no particular order.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with the given `to` key does not exist\n\t * @param to {string} the key of the vertex to take the reachable vertices from\n\t * @returns {Iterator} an ES6 iterator yielding vertices\n\t * @example\n\t * for (var it = graph.verticesWithPathTo(to), kv; !(kv = it.next()).done;) {\n\t *     var key   = kv.value[0],\n\t *         value = kv.value[1];\n\t *     // iterates over all vertices from which `to` can be reached\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.verticesWithPathTo(to)) {\n\t *     // iterates over all vertices from which `to` can be reached\n\t * }\n\t */\n\tverticesWithPathTo(to) {\n\t\tthis[_expectVertices](to);\n\t\treturn this[_verticesWithPathTo](to, new Set());\n\t}\n\t*[_verticesWithPathTo](to, done) {\n\t\tfor (let [from] of this.verticesTo(to)) {\n\t\t\tif (!done.has(from) && this.hasEdge(from, to)) {\n\t\t\t\tdone.add(from);\n\t\t\t\tyield this.vertex(from);\n\t\t\t\tyield* this[_verticesWithPathTo](from, done);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Iterate over all vertices that have no incoming edges, in no particular order.\n\t * @returns {Iterator} an ES6 iterator yielding vertices\n\t * @example\n\t * for (var it = graph.sources(), kv; !(kv = it.next()).done;) {\n\t *     var key   = kv.value[0],\n\t *         value = kv.value[1];\n\t *     // iterates over all vertices with no incoming edges\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.sources()) {\n\t *     // iterates over all vertices with no incoming edges\n\t * }\n\t */\n\t*sources() {\n\t\tlet done = new Set();\n\t\tfor (let key of this[_sources]) {\n\t\t\tif (this.hasVertex(key) && !done.has(key)) {\n\t\t\t\tdone.add(key);\n\t\t\t\tyield this.vertex(key);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Iterate over all vertices that have no outgoing edges, in no particular order.\n\t * @returns {Iterator} an ES6 iterator yielding vertices\n\t * @example\n\t * for (var it = graph.sinks(), kv; !(kv = it.next()).done;) {\n\t *     var key   = kv.value[0],\n\t *         value = kv.value[1];\n\t *     // iterates over all vertices with no outgoing edges\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let [key, value] of graph.sinks()) {\n\t *     // iterates over all vertices with no outgoing edges\n\t * }\n\t */\n\t*sinks() {\n\t\tlet done = new Set();\n\t\tfor (let key of this[_sinks]) {\n\t\t\tif (this.hasVertex(key) && !done.has(key)) {\n\t\t\t\tdone.add(key);\n\t\t\t\tyield this.vertex(key);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t//////////////////////////////\n\t////////// Clearing //////////\n\t//////////////////////////////\n\n\t/**\n\t * Remove all edges from the graph, but leave the vertices intact.\n\t */\n\tclearEdges() {\n\t\tfor (let [key] of this.edges()) { this.removeEdge(key) }\n\t}\n\n\t/**\n\t * Remove all edges and vertices from the graph, putting it back in its initial state.\n\t */\n\tclear() {\n\t\tfor (let [key] of this.vertices()) { this.destroyVertex(key) }\n\t}\n\n\n\t////////////////////////////////////////\n\t////////// (Advanced) Queries //////////\n\t////////////////////////////////////////\n\n\n\t/**\n\t * Ask whether `this` graph and a given `other` graph are equal.\n\t * Two graphs are equal if they have the same vertices and the same edges.\n\t * @param other {Graph} the other graph to compare to `this` one\n\t * @param [eqV] {function(*, *, string): boolean}\n\t *     a custom equality function for values stored in vertices;\n\t *     defaults to `===` comparison; The first two arguments are the\n\t *     values to compare. The third is the corresponding `key`.\n\t * @param [eqE] {function(*, *, Array): boolean}\n\t *     a custom equality function for values stored in edges;\n\t *     defaults to the function given for `eqV`; The first two arguments\n\t *     are the values to compare. The third is the corresponding\n\t *     `[from, to]` key.\n\t * @returns {boolean} `true` if the two graphs are equal; `false` otherwise\n\t */\n\tequals(other, eqV=(x,y)=>(x===y), eqE=eqV) {\n\t\tif (!(other instanceof Graph))                  { return false }\n\t\tif (this.vertexCount() !== other.vertexCount()) { return false }\n\t\tif (this.edgeCount()   !== other.edgeCount()  ) { return false }\n\t\tfor (let [key, value] of this.vertices()) {\n\t\t\tif (!other.hasVertex(key))                    { return false }\n\t\t\tif (!eqV(value, other.vertexValue(key), key)) { return false }\n\t\t}\n\t\tfor (let [key, value] of this.edges()) {\n\t\t\tif (!other.hasEdge(key))                      { return false }\n\t\t\tif (!eqE(value, other.edgeValue(key), key))   { return false }\n\t\t}\n\t\treturn true;\n\t}\n\n\n\t/**\n\t * Iterate over all simple directed cycles in this graph, in no particular order.\n\t * If you mutate the graph in between iterations, behavior of the iterator\n\t * becomes unspecified. (So, don't.)\n\t * @returns {Iterator} an ES6 iterator yielding arrays containing the vertex keys describing a cycle;\n\t *                     These arrays will contain each vertex key only once — even the first/last one.\n\t * @example\n\t * for (var it = graph.cycles(), kv; !(kv = it.next()).done;) {\n\t *     var cycle = kv.value;\n\t *     // iterates over all cycles of the graph\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let cycle of graph.cycles()) {\n\t *     // iterates over all cycles of the graph\n\t * }\n\t */\n\t*cycles() {\n\t\t// This algorithm is based on the following article:\n\t\t// Enumeration of the elementary circuits of a directed graph\n\t\t// R. Tarjan, SIAM Journal on Computing, 2 (1973), pp. 211-216\n\t\t// http://dx.doi.org/10.1137/0202017\n\t\t// -----\n\t\t// TODO: implement the improved version as defined by Johnson:\n\t\t// Finding all the elementary circuits of a directed graph.\n\t\t// D. B. Johnson, SIAM Journal on Computing 4, no. 1, 77-84, 1975.\n\t\t// http://dx.doi.org/10.1137/0204007\n\n\t\t/* bookkeeping */\n\t\tlet pointStack = [];\n\t\tlet markedStack, mark;\n\n\t\t/* the main recursive backtracking algorithm */\n\t\tlet _this = this;\n\t\tfunction* backtrack(v, out = {}) {\n\t\t\tpointStack.push(v);\n\t\t\tmark.add(v);\n\t\t\tmarkedStack.push(v);\n\t\t\tfor (let [w] of [..._this.verticesFrom(v)]) {\n\t\t\t\tif (w < pointStack[0]) { continue }\n\t\t\t\tif (w === pointStack[0]) {\n\t\t\t\t\tyield [...pointStack];\n\t\t\t\t\tout.found = true;\n\t\t\t\t} else if (!mark.has(w)) {\n\t\t\t\t\tlet o = {};\n\t\t\t\t\tyield* backtrack(w, o);\n\t\t\t\t\tout.found = out.found || o.found;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (out.found) { // if a simple cycle continuing the partial path on the pointStack has been found\n\t\t\t\tlet u;\n\t\t\t\tdo {\n\t\t\t\t\tu = markedStack.pop();\n\t\t\t\t\tmark.delete(u);\n\t\t\t\t} while (u !== v);\n\t\t\t}\n\t\t\tpointStack.pop();\n\t\t}\n\n\t\t/* start backtracking from each vertex in the graph */\n\t\tfor (let [a] of this.vertices()) {\n\t\t\tmarkedStack = [];\n\t\t\tmark = new Set();\n\t\t\tyield* backtrack(a);\n\t\t}\n\t}\n\n\n\t/**\n\t * Find any directed cycle in this graph.\n\t * @returns {?Array} an array containing the vertex keys describing the cycle; `null`, if there is no cycle;\n\t *                   The array will contain each vertex key only once — even the first/last one.\n\t */\n\tcycle() {\n\t\tlet result = this.cycles().next();\n\t\treturn result.done ? null : result.value;\n\t}\n\n\n\t/**\n\t * Test whether this graph contains a directed cycle.\n\t * @returns {boolean} whether this graph contains any directed cycle\n\t */\n\thasCycle() { return !this.cycles().next().done }\n\n\n\t/**\n\t * Iterate over all paths between two given keys in this graph, in no particular order.\n\t * If you mutate the graph in between iterations, behavior of the iterator\n\t * becomes unspecified. (So, don't.)\n\t * @param from {string} the key for the originating vertex\n\t * @param to   {string} the key for the terminating vertex\n\t * @throws {Graph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @returns {Iterator} an ES6 iterator yielding arrays containing the vertex-keys describing the path\n\t * @example\n\t * for (var it = graph.paths(from, to), kv; !(kv = it.next()).done;) {\n\t *     var path = kv.value;\n\t *     // iterates over all paths between `from` and `to` in the graph\n\t * }\n\t * @example\n\t * // in ECMAScript 6, you can use a for..of loop\n\t * for (let path of graph.paths(from, to)) {\n\t *     // iterates over all paths between `from` and `to` in the graph\n\t * }\n\t */ // TODO: allow [from, to] array to be given as argument in docs\n\tpaths(from, to) {\n\t\t[from, to] = Graph[_extractTwoArgs](from, to);\n\t\tthis[_expectVertices](from, to);\n\t\treturn this[_paths](from, to);\n\t}\n\t*[_paths](from, to) {\n\t\tlet stack = [];\n\n\t\tlet _this = this;\n\t\tfunction *pathsFromPrefix(current) {\n\t\t\tstack.push(current);\n\t\t\tfor (let [next] of _this.verticesFrom(current)) {\n\t\t\t\tif (next === to) {\n\t\t\t\t\tyield [...stack, to];\n\t\t\t\t} else if (stack.indexOf(next) === -1) {\n\t\t\t\t\tyield* pathsFromPrefix(next);\n\t\t\t\t}\n\t\t\t}\n\t\t\tstack.pop();\n\t\t}\n\n\t\tyield* pathsFromPrefix(from);\n\t}\n\n\n\t/**\n\t * Find any path between a given pair of keys.\n\t * @param from {string} the originating vertex\n\t * @param to   {string} the terminating vertex\n\t * @throws {Graph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @returns {?Array} an array with the keys of the path found between the two vertices,\n\t *                   including those two vertices themselves; `null` if no such path exists\n\t */ // TODO: allow [from, to] array to be given as argument in docs\n\tpath(from, to) {\n\t\tlet result = this.paths(from, to).next();\n\t\treturn result.done ? null : result.value;\n\t}\n\n\n\t/**\n\t * Test whether there is a directed path between a given pair of keys.\n\t * @param from {string} the originating vertex\n\t * @param to   {string} the terminating vertex\n\t * @throws {Graph.VertexNotExistsError} if the `from` and/or `to` vertices do not yet exist in the graph\n\t * @returns {boolean} whether such a path exists\n\t */ // TODO: allow [from, to] array to be given as argument in docs\n\thasPath(from, to) { return !this.paths(from, to).next().done }\n\n\n\t/**\n\t * Get the number of edges going out of a given vertex.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param key {string} the key of the vertex to query\n\t * @returns {number} the number of edges going out of the `key` vertex\n\t */\n\toutDegree(key) {\n\t\tthis[_expectVertices](key);\n\t\treturn this[_edges].get(key).size;\n\t}\n\n\n\t/**\n\t * Get the number of edges coming into a given vertex.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param key {string} the key of the vertex to query\n\t * @returns {number} the number of edges coming into the `key` vertex\n\t */\n\tinDegree(key) {\n\t\tthis[_expectVertices](key);\n\t\treturn this[_reverseEdges].get(key).size;\n\t}\n\n\n\t/**\n\t * Get the number of edges connected to a given vertex.\n\t * @throws {Graph.VertexNotExistsError} if a vertex with this key does not exist\n\t * @param key {string} the key of the vertex to query\n\t * @returns {number} the number of edges connected to the `key` vertex\n\t */\n\tdegree(key) { return this.outDegree(key) + this.inDegree(key) }\n\n\n\t///////////////////////////////////////\n\t////////// Cloning and stuff //////////\n\t///////////////////////////////////////\n\n\n\t/**\n\t * Merge another graph into this graph.\n\t * @param other {Graph} the other graph to merge into this one\n\t * @param [mV] {function(*, *, string): *}\n\t *     a custom merge function for values stored in vertices;\n\t *     defaults to choosing the second value over the first; The first and\n\t *     second arguments are the vertex values of `this` graph and the\n\t *     `other` graph respectively. The third is the corresponding `key`.\n\t * @param [mE] {function(*, *, Array): *}\n\t *     a custom merge function for values stored in edges;\n\t *     defaults to whichever of the two values is not `undefined`,\n\t *     giving preference to that of the other graph; The first and\n\t *     second arguments are the edge values of `this` graph and the\n\t *     `other` graph respectively. The third is the\n\t *     corresponding `[from, to]` key.\n\t */\n\tmergeIn(other, mV=((v1,v2)=>v2), mE=mV) {\n\t\tfor (let [key, value] of other.vertices()) {\n\t\t\tthis.addVertex(key, mV(this.vertexValue(key), value, key));\n\t\t}\n\t\tfor (let [key, value] of other.edges()) {\n\t\t\tthis.addEdge(key, mE(this.edgeValue(key), value, key));\n\t\t}\n\t}\n\n\n\t/**\n\t * Create a clone of this graph.\n\t * @param [trV] {function(*, string): *}\n\t *     a custom transformation function for values stored in vertices;\n\t *     defaults to the identity function; The first argument is the\n\t *     value to clone. The second is the corresponding `key`.\n\t * @param [trE] {function(*, Array): *}\n\t *     a custom transformation function for values stored in edges;\n\t *     defaults to the function given for `trV`; The first argument\n\t *     is the value to clone. The second is the corresponding\n\t *     `[from, to]` key.\n\t * @returns {Graph} a clone of this graph\n\t */\n\tclone(trV=(v=>v), trE=trV) {\n\t\tlet result = new Graph();\n\t\tresult.mergeIn(this, (v1, v2) => trV(v2), (v1, v2) => trE(v2));\n\t\treturn result;\n\t}\n\n\n\t/**\n\t * Create a clone of this graph, but without any transitive edges.\n\t * @param [trV] {function(*, string): *}\n\t *     a custom transformation function for values stored in vertices;\n\t *     defaults to the identity function; The first argument is the\n\t *     value to clone. The second is the corresponding `key`.\n\t * @param [trE] {function(*, Array): *}\n\t *     a custom transformation function for values stored in edges;\n\t *     defaults to the function given for `trV`; The first argument\n\t *     is the value to clone. The second is the corresponding\n\t *     `[from, to]` key.\n\t * @returns {Graph} a clone of this graph with all transitive edges removed\n\t */\n\ttransitiveReduction(trV, trE) {\n\t\t// argument defaults are handled in `clone`\n\t\tlet result = this.clone(trV, trE);\n\t\tfor (let [x] of this.vertices())\n\t\t\tfor (let [y] of this.vertices())\n\t\t\t\tif (result.hasEdge(x, y))\n\t\t\t\t\tfor (let [z] of this.vertices())\n\t\t\t\t\t\tif (result.hasPath(y, z))\n\t\t\t\t\t\t\tresult.removeEdge(x, z);\n\t\treturn result;\n\t}\n\n\t/**\n\t * This method replaces stretches of non-branching directed pathway into single edges.\n\t * More specifically, it identifies all 'nexus' vertices in the graph and preserves them.\n\t * It then removes all other vertices and all edges from the graph, then inserts edges\n\t * between nexuses that summarize the connectivity that was there before.\n\t *\n\t * A nexus is any vertex that is *not* characterized by '1 edge in, 1 edge out'.\n\t * A custom `isNexus` function may be provided to manually select additional vertices\n\t * that should be preserved as nexus.\n\t * @param [isNexus] {function(string, *): boolean}\n\t *                  a predicate for identifying additional vertices that should be treated as nexus;\n\t *                  It receives a `key` and `value` associated to a vertex and should return\n\t *                  true if and only if that vertex should be a nexus.\n\t * @throws {Graph.BranchlessCycleError} if the graph contains a cycle with no branches or nexuses\n\t */\n\tcontractPaths(isNexus=(()=>false)) {\n\n\t\t/* what makes a a vertex a nexus (start/end-point) */\n\t\tlet nexuses = new Set(\n\t\t\t[...this.vertices()]\n\t\t\t\t.filter(([key, val]) => this.outDegree(key) !== 1 || this.inDegree(key) !== 1 || isNexus(key, val))\n\t\t\t\t.map(([key]) => key)\n\t\t);\n\n\t\t/* error if there is a branch-less cycle */\n\t\t{\n\t\t\tlet unhandledVertices = new Set([...this.vertices()].map(([key])=>key));\n\t\t\tconst checkForBlCycle = (key) => {\n\t\t\t\tif (!unhandledVertices.has(key)) { return }\n\t\t\t\tunhandledVertices.delete(key);\n\t\t\t\tfor (let [next] of this.verticesFrom(key)) { checkForBlCycle(next) }\n\t\t\t\tfor (let [next] of this.verticesTo  (key)) { checkForBlCycle(next) }\n\t\t\t};\n\t\t\tfor (let key of nexuses) { checkForBlCycle(key) }\n\t\t\tif (unhandledVertices.size > 0) {\n\t\t\t\tlet startingKey = unhandledVertices.values().next().value,\n\t\t\t\t\tcycle       = [],\n\t\t\t\t\tcurrent     = startingKey;\n\t\t\t\tdo {\n\t\t\t\t\tcycle.push(current);\n\t\t\t\t\tcurrent = this.verticesFrom(current).next().value[0];\n\t\t\t\t} while (current !== startingKey);\n\t\t\t\tthrow new Graph.BranchlessCycleError(cycle);\n\t\t\t}\n\t\t}\n\n\t\t/* bookkeeping */\n\t\tlet contractionsToAdd = new Map();\n\n\t\t/* register the path starting with the given edge */\n\t\tconst startPath = (start, next, backwards) => {\n\t\t\t/* functions to help branch on `backwards` */\n\t\t\tconst fromTo       = (strt = start, nxt = next) => backwards ? [nxt, strt] : [strt, nxt];\n\t\t\tconst verticesNext = (v) => backwards ? this.verticesTo(v) : this.verticesFrom(v);\n\n\t\t\t/* bookkeeping */\n\t\t\tlet verticesToRemove = new Set();\n\t\t\tlet edgesToRemove    = new Set();\n\t\t\tlet path = new (this.constructor)();\n\n\t\t\t/* process the start of the path */\n\t\t\tpath.addVertex(start, this.vertexValue(start));\n\t\t\tpath.addVertex(next,  this.vertexValue(next) );\n\t\t\tpath.addNewEdge(...fromTo(), this.edgeValue(...fromTo()));\n\t\t\tedgesToRemove.add(fromTo());\n\n\t\t\t/* process as [current, next] moves across the path */\n\t\t\tlet current;\n\t\t\twhile (!nexuses.has(next)) {\n\t\t\t\t[current, next] = [next, verticesNext(next).next().value[0]];\n\t\t\t\tpath.addVertex(next, this.vertexValue(next));\n\t\t\t\tpath.addNewEdge(...fromTo(current, next), this.edgeValue(...fromTo(current, next)));\n\t\t\t\tverticesToRemove.add(current);\n\t\t\t\tedgesToRemove.add(fromTo(current, next));\n\t\t\t}\n\n\t\t\t/* register new path contraction */\n\t\t\tif (!contractionsToAdd.get(fromTo()[0]))                  { contractionsToAdd.set(fromTo()[0], new Map())                                 }\n\t\t\tif (!contractionsToAdd.get(fromTo()[0]).get(fromTo()[1])) { contractionsToAdd.get(fromTo()[0]).set(fromTo()[1], new (this.constructor)()) }\n\t\t\tcontractionsToAdd.get(fromTo()[0]).get(fromTo()[1]).mergeIn(path);\n\n\t\t\t/* remove old edges and vertices */\n\t\t\tfor (let key of edgesToRemove)    { this.removeExistingEdge(...key) }\n\t\t\tfor (let key of verticesToRemove) { this.destroyExistingVertex(key) }\n\t\t};\n\n\t\t/* process paths starting at all nexus points */\n\t\tfor (let first of nexuses) {\n\t\t\tfor (let [next] of this.verticesFrom(first)) { startPath(first, next, false) }\n\t\t\tfor (let [next] of this.verticesTo  (first)) { startPath(first, next, true)  }\n\t\t}\n\n\t\t/* add the replacement edges */\n\t\tfor (let [from, toVal] of contractionsToAdd)\n\t\t\tfor (let [to, rememberedPath] of toVal)\n\t\t\t\tthis.addNewEdge(from, to, rememberedPath);\n\t}\n\n\n\t////////////////////////////////\n\t////////// Assertions //////////\n\t////////////////////////////////\n\n\t[_expectVertices](...keys) {\n\t\tlet missingVertices = keys.filter(k => !this.hasVertex(k));\n\t\tif (missingVertices.length) { throw new Graph.VertexNotExistsError(...missingVertices) }\n\t}\n\n\t[_expectVerticesAbsent](...keys) {\n\t\tlet presentVertices = keys.filter(k => this.hasVertex(k));\n\t\tif (presentVertices.length) {\n\t\t\tthrow new Graph.VertexExistsError(...presentVertices.map(k => [k, this.vertexValue(k)]));\n\t\t}\n\t}\n\n\t[_expectEdges](...keys) {\n\t\tlet absentEdges = keys.filter(k => !this.hasEdge(...k));\n\t\tif (absentEdges.length) {\n\t\t\tthrow new Graph.EdgeNotExistsError(...absentEdges);\n\t\t}\n\t}\n\n\t[_expectEdgesAbsent](...keys) {\n\t\tlet presentEdges = keys.filter(k => this.hasEdge(...k));\n\t\tif (presentEdges.length) {\n\t\t\tthrow new Graph.EdgeExistsError(...presentEdges.map(k => [k, this.edgeValue(...k)]));\n\t\t}\n\t}\n\n\t[_expectNoConnectedEdges](key) {\n\t\tlet edges = [];\n\t\tfor (let [to]   of this.verticesFrom(key)) { edges.push([[key,  to ], this.edgeValue(key,  to )]) }\n\t\tfor (let [from] of this.verticesTo  (key)) { edges.push([[from, key], this.edgeValue(from, key)]) }\n\t\tif (edges.length) { throw new Graph.HasConnectedEdgesError(key, ...edges) }\n\t}\n\n}\n\n\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n//  // Errors //////////////////////////////////////////////////////////////////////////////////////\n//  ////////////////////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @class\n * @classdesc This type of error is thrown when specific vertices are expected not to exist, but do.\n * @extends Error\n */\nGraph.VertexExistsError = class VertexExistsError extends Error {\n\tconstructor(...vertices) {\n\t\tsuper();\n\t\t/**\n\t\t * the set of relevant vertices as `[key, value]` shaped arrays\n\t\t * @public\n\t\t * @constant vertices\n\t\t * @memberof Graph.VertexExistsError\n\t\t * @instance\n\t\t * @type {Set.<Array>}\n\t\t */\n\t\tthis.vertices = new Set(vertices);\n\t\tthis.message = `This graph has ${\n\t\t\tthis.vertices.size === 1 ? \"a vertex\" : \"vertices\"\n\t\t} '${\n\t\t\t[...this.vertices].map(([key]) => key).join(`', '`)\n\t\t}'`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when specific vertices are expected to exist, but don't.\n * @extends Error\n */\nGraph.VertexNotExistsError = class VertexNotExistsError extends Error {\n\tconstructor(...keys) {\n\t\tsuper();\n\t\t/**\n\t\t * the set of relevant vertex keys\n\t\t * @public\n\t\t * @constant vertices\n\t\t * @memberof Graph.VertexNotExistsError\n\t\t * @instance\n\t\t * @type {Set.<string>}\n\t\t */\n\t\tthis.vertices = new Set(keys);\n\t\tthis.message = `This graph does not have ${\n\t\t\tthis.vertices.size === 1 ? \"a vertex\" : \"vertices\"\n\t\t} '${\n\t\t\t[...this.vertices].join(`', '`)\n\t\t}'`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when specific edges are expected not to exist, but do.\n * @extends Error\n */\nGraph.EdgeExistsError = class EdgeExistsError extends Error {\n\tconstructor(...edges) {\n\t\tsuper();\n\t\t/**\n\t\t * the set of relevant edges as `[[from, to], value]` shaped arrays\n\t\t * @public\n\t\t * @constant edges\n\t\t * @memberof Graph.EdgeExistsError\n\t\t * @instance\n\t\t * @type {Set.<Array>}\n\t\t */\n\t\tthis.edges = new Set(edges);\n\t\tthis.message = `This graph has ${\n\t\t\tthis.edges.size === 1 ? \"an edge\" : \"edges\"\n\t\t} ${\n\t\t\t[...this.edges].map(([key]) => `[${key}]`).join(`, `)\n\t\t}`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when specific edges are expected to exist, but don't.\n * @extends Error\n */\nGraph.EdgeNotExistsError = class EdgeNotExistsError extends Error {\n\tconstructor(...edges) {\n\t\tsuper();\n\t\t/**\n\t\t * the set of relevant edge keys as `[from, to]` shaped arrays\n\t\t * @public\n\t\t * @constant edges\n\t\t * @memberof Graph.EdgeNotExistsError\n\t\t * @instance\n\t\t * @type {Set.<Array.<string>>}\n\t\t */\n\t\tthis.edges = new Set(edges);\n\t\tthis.message = `This graph does not have ${\n\t\t\tthis.edges.size === 1 ? \"an edge\" : \"edges\"\n\t\t} ${\n\t\t\t[...this.edges].map(([key]) => `[${key}]`).join(`, `)\n\t\t}`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when a vertex is expected not to have any connected edges, but does.\n * @extends Graph.EdgeExistsError\n */\nGraph.HasConnectedEdgesError = class HasConnectedEdgesError extends Graph.EdgeExistsError {\n\tconstructor(key, ...edges) {\n\t\tsuper(...edges);\n\t\t/**\n\t\t * the key of the vertex that has connected edges\n\t\t * @public\n\t\t * @constant vertex\n\t\t * @memberof Graph.HasConnectedEdgesError\n\t\t * @instance\n\t\t * @type {string}\n\t\t */\n\t\tthis.vertex = key;\n\t\tthis.message = `The '${key}' vertex has connected ${\n\t\t\tthis.edges.size === 1 ? \"an edge\" : \"edges\"\n\t\t} ${\n\t\t\t[...this.edges].map(([key]) => `[${key}]`).join(`, `)\n\t\t}`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when a graph is expected not to have a directed cycle, but does.\n * @extends Error\n */\nGraph.CycleError = class CycleError extends Error {\n\tconstructor(cycle) {\n\t\tsuper();\n\t\t/**\n\t\t * the vertices involved in the cycle, in order but with an unspecified starting point\n\t\t * @public\n\t\t * @constant cycle\n\t\t * @memberof Graph.CycleError\n\t\t * @instance\n\t\t * @type {Array.<string>}\n\t\t */\n\t\tthis.cycle = cycle;\n\t\tthis.message = `This graph contains a cycle: ${cycle}`;\n\t}\n};\n\n/**\n * @class\n * @classdesc This type of error is thrown when a graph is expected not to have a branch-less directed cycle, but does.\n * @extends Graph.CycleError\n */\nGraph.BranchlessCycleError = class BranchlessCycleError extends Graph.CycleError {\n\tconstructor(cycle) {\n\t\tsuper(cycle);\n\t\tthis.message = `This graph contains a branch-less cycle: ${cycle}`;\n\t}\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/graph.es6.js\n **/"]}