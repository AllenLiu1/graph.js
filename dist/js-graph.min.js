
/*
 * -------------------------------------------------------
 * Project: Graph Datastructure
 * Version: 0.1.0
 *
 * Author:  Michiel Helvensteijn
 * Site:    http://mhelvens.net
 * Contact: mhelvens@gmail.com
 *
 *
 * Copyright (c) 2014 Michiel Helvensteijn
 * -------------------------------------------------------
 */

"use strict";!function(root,name,factory){"function"==typeof define&&define.amd?define([],factory):"object"==typeof exports?module.exports=factory():root[name]=factory()}(this,"JsGraph",function(){function JsGraph(){var that=this,_vertices={},_edges={},_reverseEdges={},_vertexCount=0,_edgeCount=0,_addVertexCallbacks=new Callbacks,_removeVertexCallbacks=new Callbacks;that.onAddVertex=_addVertexCallbacks.add,that.onRemoveVertex=_removeVertexCallbacks.add,that.addNewVertex=function(key,value){if(that.hasVertex(key))throw new JsGraph.VertexExistsError(key,_vertices[key]);_vertices[key]=value,_edges[key]={},_reverseEdges[key]={},_vertexCount+=1,_addVertexCallbacks.fire(key,value)},that.setVertex=function(key,value){if(!that.hasVertex(key))throw new JsGraph.VertexNotExistsError(key);_vertices[key]=value},that.ensureVertex=function(key,value){that.hasVertex(key)||that.addNewVertex(key,value)},that.addVertex=function(key,value){that.hasVertex(key)?that.setVertex(key,value):that.addNewVertex(key,value)},that.removeExistingVertex=function(key){if(!that.hasVertex(key))throw new JsGraph.VertexNotExistsError(key);if(Object.keys(_edges[key]).length)throw new JsGraph.HasConnectedEdgesError(key);if(Object.keys(_reverseEdges[key]).length)throw new JsGraph.HasConnectedEdgesError(key);var valueOfRemovedVertex=_vertices[key];delete _vertices[key],_vertexCount-=1,_removeVertexCallbacks.fire(key,valueOfRemovedVertex)},that.destroyExistingVertex=function(key){if(!that.hasVertex(key))throw new JsGraph.VertexNotExistsError(key);that.eachVertexFrom(key,function(to){that.removeEdge(key,to)}),that.eachVertexTo(key,function(from){that.removeEdge(from,key)}),that.removeExistingVertex(key)},that.removeVertex=function(key){that.hasVertex(key)&&that.removeExistingVertex(key)},that.destroyVertex=function(key){that.hasVertex(key)&&that.destroyExistingVertex(key)};var _addEdgeCallbacks=new Callbacks,_removeEdgeCallbacks=new Callbacks;that.onAddEdge=_addEdgeCallbacks.add,that.onRemoveEdge=_removeEdgeCallbacks.add,that.addNewEdge=function(from,to,value){if(that.hasEdge(from,to))throw new JsGraph.EdgeExistsError(from,to,that.edgeValue(from,to));if(!that.hasVertex(from))throw that.hasVertex(to)?new JsGraph.VertexNotExistsError(from):new JsGraph.VertexNotExistsError(from).v(to);if(!that.hasVertex(to))throw new JsGraph.VertexNotExistsError(to);_edges[from][to]=value,_reverseEdges[to][from]=null,_edgeCount+=1,_addEdgeCallbacks.fire(from,to,value)},that.createNewEdge=function(from,to,value){if(that.hasEdge(from,to))throw new JsGraph.EdgeExistsError(from,to,that.edgeValue(from,to));that.ensureVertex(from),that.ensureVertex(to),that.addNewEdge(from,to,value)},that.setEdge=function(from,to,value){if(!that.hasEdge(from,to))throw new JsGraph.EdgeNotExistsError(from,to);_edges[from][to]=value},that.spanEdge=function(from,to,value){if(!that.hasVertex(from))throw that.hasVertex(to)?new JsGraph.VertexNotExistsError(from):new JsGraph.VertexNotExistsError(from).v(to);if(!that.hasVertex(to))throw new JsGraph.VertexNotExistsError(to);that.hasEdge(from,to)||that.addNewEdge(from,to,value)},that.addEdge=function(from,to,value){that.hasEdge(from,to)?that.setEdge(from,to,value):that.addNewEdge(from,to,value)},that.ensureEdge=function(from,to,value){that.hasEdge(from,to)||that.createNewEdge(from,to,value)},that.createEdge=function(from,to,value){that.hasEdge(from,to)?that.setEdge(from,to,value):that.createNewEdge(from,to,value)},that.removeExistingEdge=function(from,to){if(!that.hasEdge(from,to))throw new JsGraph.EdgeNotExistsError(from,to);if("undefined"!=typeof _edges[from]){var valueOfRemovedEdge=_edges[from][to];delete _edges[from][to]}"undefined"!=typeof _reverseEdges[to]&&delete _reverseEdges[to][from],_edgeCount-=1,_removeEdgeCallbacks.fire(from,to,valueOfRemovedEdge)},that.removeEdge=function(from,to){that.hasEdge(from,to)&&that.removeExistingEdge(from,to)},that.vertexCount=function(){return _vertexCount},that.hasVertex=function(key){return key in _vertices},that.vertexValue=function(key){return _vertices[key]},that.edgeCount=function(){return _edgeCount},that.hasEdge=function(from,to){return that.hasVertex(from)&&that.hasVertex(to)&&from in _edges&&to in _edges[from]},that.edgeValue=function(from,to){return that.hasEdge(from,to)?_edges[from][to]:void 0},that.eachVertex=function(handler){Object.keys(_vertices).forEach(function(key){handler(key,_vertices[key])})},that.eachVertexFrom=function(from,handler){if(!that.hasVertex(from))throw new JsGraph.VertexNotExistsError(from);Object.keys(_edges[from]).forEach(function(to){handler(to,that.vertexValue(to),that.edgeValue(from,to))})},that.eachVertexTo=function(to,handler){if(!that.hasVertex(to))throw new JsGraph.VertexNotExistsError(to);Object.keys(_reverseEdges[to]).forEach(function(from){handler(from,that.vertexValue(from),that.edgeValue(from,to))})},that.eachEdge=function(handler){Object.keys(_edges).forEach(function(from){Object.keys(_edges[from]).forEach(function(to){handler(from,to,_edges[from][to])})})},that.clearEdges=that.eachEdge.bind(void 0,that.removeEdge),that.clear=that.eachVertex.bind(void 0,that.destroyVertex),that.hasPath=function(from,to){function hasPathAux(current){if(that.hasEdge(current,to))return!0;visited[current]=!0;var found=!1;return that.eachVertexFrom(current,function(next){found||visited[next]||!hasPathAux(next)||(found=!0)}),delete visited[current],found}if(!that.hasVertex(from)||!that.hasVertex(to))return!1;var visited={};return hasPathAux(from)},that.topologically=function(handler){function visit(a){visited.push(a);var i=visited.indexOf(a);if(i!==visited.length-1){var cycle=visited.slice(i+1).reverse();throw new JsGraph.CycleError(cycle)}handled[a]||(that.eachVertexTo(a,visit),handled[a]={returned:handler(a,that.vertexValue(a))}),visited.pop()}var visited=[],handled={};that.eachVertex(function(a){handled[a]||visit(a)})}}function Callbacks(){var callbacks=[];this.add=function(fn){return-1===callbacks.indexOf(fn)&&callbacks.push(fn),function(){var index=callbacks.indexOf(fn);-1!==index&&callbacks.splice(index,1)}},this.fire=function(){var args=arguments;callbacks.forEach(function(fn){fn.apply(null,args)})}}function newError(name,constructor){return constructor.prototype.__proto__=Error.prototype,constructor.prototype.constructor=constructor,constructor.prototype.name=name,constructor}return JsGraph.VertexExistsError=newError("VertexExistsError",function(key,value){function refreshMessage(){that.message="This graph has "+(1===that.vertices?"a vertex":"vertices")+" '"+Object.keys(that.vertices).join("', '")+"'"}var that=this;that.v=function(key,value){return that.vertices[key]=value,refreshMessage(),that},that.vertices={},"undefined"!=typeof key&&that.v(key,value),refreshMessage()}),JsGraph.VertexNotExistsError=newError("VertexNotExistError",function(key){function refreshMessage(){that.message="This graph does not have "+(1===that.vertices?"a vertex":"vertices")+" '"+Object.keys(that.vertices).join("', '")+"'"}var that=this;that.v=function(key){return that.vertices[key]=void 0,refreshMessage(),that},that.vertices={},"undefined"!=typeof key&&that.v(key),refreshMessage()}),JsGraph.EdgeExistsError=newError("EdgeExistsError",function(from,to,value){function refreshMessage(){var edges=[];Object.keys(that.edges).forEach(function(from){Object.keys(that.edges[from]).forEach(function(to){edges.push("('"+from+"', '"+to+"')")})}),that.message="This graph has "+(1===edges.length?"an edge ":"edges ")+edges.join(", ")}var that=this;that.e=function(from,to,value){return"undefined"==typeof that.edges[from]&&(that.edges[from]={}),that.edges[from][to]=value,refreshMessage(),that},that.edges={},"undefined"!=typeof from&&"undefined"!=typeof to&&that.e(from,to,value),refreshMessage()}),JsGraph.EdgeNotExistsError=newError("EdgeNotExistError",function(from,to){function refreshMessage(){var edges=[];Object.keys(that.edges).forEach(function(from){Object.keys(that.edges[from]).forEach(function(to){edges.push("('"+from+"', '"+to+"')")})}),that.message="This graph does not have "+(1===edges.length?"an edge ":"edges ")+edges.join(", ")}var that=this;that.e=function(from,to){return"undefined"==typeof that.edges[from]&&(that.edges[from]={}),that.edges[from][to]=void 0,refreshMessage(),that},that.edges={},"undefined"!=typeof from&&"undefined"!=typeof to&&that.e(from,to),refreshMessage()}),JsGraph.HasConnectedEdgesError=newError("HasConnectedEdgesError",function(key){this.message="The '"+key+"' vertex has connected edges",this.key=key}),JsGraph.CycleError=newError("CycleError",function(cycle){this.message="This graph contains a cycle: "+this.cycle,this.cycle=cycle}),JsGraph});